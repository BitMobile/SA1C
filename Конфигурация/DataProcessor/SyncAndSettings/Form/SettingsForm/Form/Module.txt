
/////////////////////////////////////////////////////////////////////////////////////////////////
// Common procedures and functions



&AtServer
Procedure OnOpenServer()
    
    Object.Server = Constants.Server.Get();
    Object.Path = Constants.ServerPath.Get();
    Object.Password = Constants.Password.Get();
	Object.Port 		= Constants.Port.Get();
    Object.SKUFeatures = Constants.SKUFeaturesRegistration.Get();
    Object.MultiStock = Constants.MultiStock.Get();
	
	Sessions = GetInfoBaseSessions();
	ThisSessionNumber = InfoBaseSessionNumber();
	
	ThisForm.UploadGUID = Constants.UploadGUID.Get();
			
	For Each Session in Sessions Do
		If Session.SessionNumber = ThisSessionNumber Then
			ThisForm.ThisSessionID = String(Session.SessionNumber)+String(Session.SessionStarted);
		EndIf;
	EndDo;
	
	CheckSync();
	
EndProcedure

&AtServer
Procedure CheckSync(SyncMayStart = False)
	
	Try
		
		SyncStarted = Constants.SyncronizationStarted.Get();
		
	Except
		
		Msg(NStr("en = ""Can't get SyncronizationStarted constant""; ru = ""Не могу получить константу SyncronizationStarted"""), ThisForm.UUID);
		ThisForm.Items.SyncronizeData.Enabled = False;
		SyncMayStart = False;
		Return;

	EndTry;
			
	If SyncStarted <> "" Then
		
		If SyncStarted = ThisForm.ThisSessionID Then
			
			Msg(NStr("en = ""Sync already started by you""; ru = ""Синхронизация уже запущена вами"""), ThisForm.UUID);
			ThisForm.Items.SyncronizeData.Enabled = False;
			SyncMayStart = False;
			Return;
			
		Else
			
			Sessions = GetInfoBaseSessions();
			
			For Each Session In Sessions Do
				
				If String(Session.SessionNumber)+String(Session.SessionStarted) = SyncStarted Then
					
					Msg(NStr("en = ""Sync already started by user: ""; ru = ""Синхронизация уже запущена пользователем: """) + Session.User, ThisForm.UUID);
					ThisForm.Items.SyncronizeData.Enabled = False;
					SyncMayStart = False;
					Return;
					
				EndIf;
				
			EndDo;
			
		EndIf;//SyncStarted = ThisForm.ThisSessionID
		
	EndIf;//SyncStarted <> ""
	
	SyncMayStart = True;
		
EndProcedure

&AtServer
Function GetUploadGUID()
	
	Return Constants.UploadGUID.Get();

EndFunction

&AtServer
Procedure DefaultSettingsServer()
    
    DataProcessors.SyncAndSettings.FillRecordset();
    
EndProcedure

&AtServer
Procedure DefaultFTPSettingsServer()
    
    DataProcessors.SyncAndSettings.FillFTPRecordset();
    
EndProcedure

&AtServer
Function LanguageCheck()
    
    Return InfoBaseUsers.CurrentUser().Language.Name;
    
EndFunction // ()

&AtServer
Function GetLastSyncUploadInfo(LastDate, LastStatus)
    
	LastDate = Constants.LastSyncUploadDate.Get();
    LastStatus = Constants.LastSyncUploadStatus.Get();
    
EndFunction

&AtServer
Function GetLastSyncDownloadInfo(LastDate, LastStatus)
    
    LastDate = Constants.LastSyncDownloadDate.Get();
    LastStatus = Constants.LastSyncDownloadStatus.Get();
    
EndFunction

&AtServer
Function GetLastDeletedSyncInfo(LastDate, LastStatus)
    
    LastDate = Constants.LastSyncDeletedDate.Get();
    LastStatus = Constants.LastSyncDeletedStatus.Get();
    
EndFunction

&AtServer
Procedure Msg(Text, FormID = Undefined)
	
	If NOT FormID = Undefined Then
		
		Message = New UserMessage;
		Message.Text = Text;
		Message.TargetID = FormID;
		Message.Message();
		
	EndIf;	
	
EndProcedure

//////////////////////////////////////////////
// Common Settings

&AtServer
Procedure SaveSettingsServer()
    
    Constants.Server.Set(Object.Server);
    Constants.ServerPath.Set(Object.Path);
    Constants.Password.Set(Object.Password);
	Constants.Port.Set(Object.Port);

    
EndProcedure

//////////////////////////////////////////////
// Common Sync

&AtServer 
Procedure SyncronizeDataServer(All = False, FormID = Undefined, UploadComplete = False)
	SyncMayStart = False;
	BeginTransaction();//4 Constant.SyncronizationStarted lock
	Try
		
		//Lock SyncStarted Constant
		DLock = New DataLock;
		BlockElement = DLock.Add("Constant.SyncronizationStarted");
		BlockElement.Mode = DataLockMode.Exclusive;
		Dlock.Lock();	
		
		CheckSync(SyncMayStart);
		
	Except
		
		Msg(NStr("en = ""Can't lock SyncronizationStarted constant!""; ru = ""Не могу заблокировать константу SyncronizationStarted"""), FormID);
		SyncMayStart = False;
		
	EndTry;
	
	If SyncMayStart Then
		ConstantSet = False;
		Try 
			
			Constants.SyncronizationStarted.Set(ThisForm.ThisSessionID);
			ConstantSet = True;
			
		Except
			
			ConstantSet = False;
			
		EndTry;
		

		CommitTransaction();//4 Constant.SyncronizationStarted lock
		
		If ConstantSet Then
			
			//Download
			DownloadComplete = False;
			
			Msg(NStr("en = ""Data download started""; ru = ""Загрузка данных запущена"""), FormID);
				
			DataProcessors.SyncAndSettings.DownloadData(DownloadComplete);
			    
			If DownloadComplete Then 
			        
				Msg(NStr("en = ""Data download completed""; ru = ""Загрузка данных завершена"""), FormID);
				DataProcessors.SyncAndSettings.SaveSyncDownloadState(True);
			        
			Else 
			        
				Msg(NStr("en = ""Data download interrupted""; ru = ""Загрузка данных прервана"""), FormID);
				DataProcessors.SyncAndSettings.SaveSyncDownloadState(False);
					
			EndIf;//DowloadComlete
			
			//Upload
			UploadComplete = False;
			
			DataProcessors.SyncAndSettings.UploadData(All, UploadComplete);
			
			If UploadComplete Then 
			        
				Msg(NStr("en = ""Data async upload started""; ru = ""Асинхронная выгрузка данных запущена"""), FormID);
				ThisForm.Items.SyncronizeData.Enabled = False;
				        
			Else 
			        
				Msg(NStr("en = ""Data async upload interrupted""; ru = ""Асинхронная выгрузка данных прервана"""), FormID);
				Constants.SyncronizationStarted.Set("");
				DataProcessors.SyncAndSettings.SaveSyncUploadState(False);
					
			EndIf;//UploadComlete
					
		EndIf;//ConstantSet
		
	Else
		
		CommitTransaction();//4 Constant.SyncronizationStarted lock
		
	EndIf;//SyncMayStart
	
EndProcedure

&AtServer
Procedure SyncronizePicturesServer()
    
    DataProcessors.SyncAndSettings.SyncPicturesOnServer();
    
EndProcedure

&AtServer
Procedure UploadAllPicturesServer()
    
    DataProcessors.SyncAndSettings.SyncPicturesOnServer(True);
    
EndProcedure

&AtServer
Procedure SynchronizeDeletedObjectsServer()
    
    Message(NStr("en = ""Synchronization deleted data is in process..""; ru = ""Синхронизация удаленных данных в процессе..."""), MessageStatus.Important); 
    
    SyncComplete = False;
    
    DataProcessors.SyncAndSettings.SyncDeletedData(SyncComplete);
    
    If SyncComplete Then
        
        Message(NStr("en = ""Synchronization deleted data was successful""; ru = ""Синхронизация удаленных данных прошла успешно"""));
        
        DataProcessors.SyncAndSettings.SaveSyncDeletedDataState(True);
        
    Else 
        
        Message(NStr("en = ""Synchronization deleted data not successful""; ru = ""Синхронизация удаленных данных не удалась"""));
        
        DataProcessors.SyncAndSettings.SaveSyncDeletedDataState(False);
        
    EndIf;
    
EndProcedure

/////////////////////////////////////////////////////////////////////////////////////////////////
// Command interface

&AtClient
Procedure SetLastSyncUploadInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncUploadDate.TextColor = WebColors.Green;
            LastSyncUploadDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncUploadDate.TextColor = WebColors.Red;
            LastSyncUploadDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncUploadDate.TextColor = WebColors.Red;
        LastSyncUploadDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure

&AtClient
Procedure SetLastSyncDownloadInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncDownloadDate.TextColor = WebColors.Green;
            LastSyncDownloadDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncDownloadDate.TextColor = WebColors.Red;
            LastSyncDownloadDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncDownloadDate.TextColor = WebColors.Red;
        LastSyncDownloadDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure


&AtClient
Procedure SetLastDeletedSyncInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncDeletedDate.TextColor = WebColors.Green;
            LastSyncDeletedDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncDeletedDate.TextColor = WebColors.Red;
            LastSyncDeletedDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncDeletedDate.TextColor = WebColors.Red;
        LastSyncDeletedDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure

&AtClient
Procedure OnOpen(Cancel)
    
    OnOpenServer();
	
	If ThisForm.UploadGUID <> "" Then
		
		ThisForm.Items.SyncronizeData.Enabled = False;
		
		msg(НСтр("ru = 'Другой пользователь уже запустил синхронизацию и от сервера получен GUID асинхронной выгрузки, проверка статуса...';"
		     + " en = 'Another user already started async uploading and get her UUID, checking status...'"),UUID);
			 
		AttachIdleHandler("SyncronizeDataServerAtClient",20);
		
	EndIf;
    

    LastUploadDate = Undefined;
    LastUploadStatus = False;
	
	GetLastSyncUploadInfo(LastUploadDate, LastUploadStatus);
    SetLastSyncUploadInfo(LastUploadDate, LastUploadStatus);
	
	LastDownloadDate = Undefined;
    LastDownloadStatus = False;
    
    GetLastSyncDownloadInfo(LastDownloadDate, LastDownloadStatus);
    SetLastSyncDownloadInfo(LastDownloadDate, LastDownloadStatus);
    
    LastDeletedDate = Undefined;
    LastDeletedStatus = False;
    
    GetLastDeletedSyncInfo(LastDeletedDate, LastDeletedStatus);
    SetLastDeletedSyncInfo(LastDeletedDate, LastDeletedStatus);
    
EndProcedure

//////////////////////////////////////////////
// Settings command

&AtClient
Procedure SaveSettings(Command)
    
    SaveSettingsServer();
    Items.SaveSettings.Enabled = False; 
    
EndProcedure

&AtClient
Procedure ServerOnChange(Item)
    
    Items.SaveSettings.Enabled = True;
    
EndProcedure

&AtClient
Procedure PathOnChange(Item)
    
    Items.SaveSettings.Enabled = True;        
    
EndProcedure

&AtClient
Procedure PasswordOnChange(Item)
    
    Items.SaveSettings.Enabled = True;
    
EndProcedure

&AtClient
Procedure DefaultSettings(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'Settings will be reset. Continue?';"
    + "ru = 'Настройки будет презаполнены. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        DefaultSettingsServer();
        Items.SyncSettingsTable.Refresh();
        
    EndIf;
    
EndProcedure

&AtClient
Procedure DefaultFTPSettings(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'Settings will be reset. Continue?';"
    + "ru = 'Настройки будет презаполнены. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        DefaultFTPSettingsServer();
        Items.FTPSyncSettingsTable.Refresh();
        
    EndIf;
    
EndProcedure

//////////////////////////////////////////////
// Sync command

&AtClient
Procedure SyncronizeData(Command)
	UploadComplete = False;
    SyncronizeDataServer(,ThisForm.UUID, UploadComplete);
	If UploadComplete Then
		UploadGUID = GetUploadGUID();
		
		AttachIdleHandler("SyncronizeDataServerAtClient",20);
		
	EndIf;
		
	UpdateInfo();
  
EndProcedure

&AtClient
Procedure SyncronizeDataServerAtClient()
	
	BreakIdle = False;
	
	ResultString = CheckAsyncUploadAtServer(ThisForm.UploadGUID);
	
	If ResultString = "NothingToCheck" Then
		
		BreackIdle = True;
		
	ElsIf ResultString = "ok" Then
		
		Msg(NStr("en = ""Data async uploading completed""; ru = ""Асинхронная выгрузка данных завершена"""), ThisForm.UUID);
		BreakIdle = True;
		
	ElsIf ResultString = "processing" Then
		
		Msg(NStr("en = ""Data async uploading processing...""; ru = ""Асинхронная выгрузка данных в процессе..."""), ThisForm.UUID);	
		
	Else
		
		Msg(NStr("en = ""Data async uploading interrupted with error: ""; ru = ""Асинхронная выгрузка данных прервана с ошибкой: """) + ResultString, ThisForm.UUID);
		BreakIdle = True;
		
	EndIf;
	
	UpdateInfo();
	
	If BreakIdle Then
		DetachIdleHandler("SyncronizeDataServerAtClient");
		ThisForm.Items.SyncronizeData.Title = "Синхронизировать данные";
		ThisForm.Items.SyncronizeData.Enabled = True;
	EndIf;
	
EndProcedure

&AtServer
Function CheckAsyncUploadAtServer(UploadGUID)
	
	 Return DataProcessors.SyncAndSettings.CheckAsyncUpload(UploadGUID);
	
EndFunction

&AtClient
Procedure UpdateInfo()
    
    Var LastDownloadDate, LastDownloadStatus, LastUploadDate, LastUploadStatus;
    
    LastUploadDate = Undefined;
    LastUploadStatus = False;
    
    GetLastSyncUploadInfo(LastUploadDate, LastUploadStatus);
    SetLastSyncUploadInfo(LastUploadDate, LastUploadStatus);
    
    LastDownloadDate = Undefined;
    LastDownloadStatus = False;
    
    GetLastSyncDownloadInfo(LastDownloadDate, LastDownloadStatus);
    SetLastSyncDownloadInfo(LastDownloadDate, LastDownloadStatus);

EndProcedure

&AtClient
Procedure SyncronizePictures(Command)
    
    Message(NStr("en = 'Synchronization of pictures is started'; ru = 'Cинхронизация картинок начата'"));
    
    SyncronizePicturesServer();
    
EndProcedure

&AtClient
Procedure UploadAllPictures(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'The operation can take a long time. Continue?';"
    + "ru = 'Операция может занять продолжительное время. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        Message(NStr("en = 'Uploading pictures is started'; ru = 'Выгрузка картинок начата'"));
        
        UploadAllPicturesServer();
        
    EndIf;
    
EndProcedure

&AtClient
Procedure SynchronizeDeletedObjects(Command)
    
    SynchronizeDeletedObjectsServer();
    
    LastDate = Undefined;
    LastStatus = False;
    
    GetLastDeletedSyncInfo(LastDate, LastStatus);
    SetLastDeletedSyncInfo(LastDate, LastStatus);
    
EndProcedure


//////////////////////////////////////////////
//Mobile settings


&AtClient
Procedure DefaultMobileSettings(Command)
    CheckOutMobileSettingsAtServer();
EndProcedure

&AtServer
Procedure CheckOutMobileSettingsAtServer() Export
    ////Update mobile settings
    settingsList = new ValueList;
    settingsList.Add(New Structure("Name, Commentary", "NOR", "Проверять указание причины не взятия заказа при плановом визите"));
    settingsList.Add(New Structure("Name, Commentary", "CoordCtrl", "Контроль снятия координат планового визита"));
    settingsList.Add(New Structure("Name, Commentary", "UVR", "Проверять указание причины внепланового визита"));
    settingsList.Add(New Structure("Name, Commentary", "NoStkEnbl", "Номенклатура с нулевым остатком доступна для заказа"));
    settingsList.Add(New Structure("Name, Commentary", "PlanEnbl", "Доступно создание планового визита из мобильного приложения"));
    
    For Each value In settingsList Do
        query2 = new Query;
        query2.Text=
        "SELECT
        |   MobileApplicationSettings.Ref,
        |   MobileApplicationSettings.Description
        |FROM
        |   Catalog.MobileApplicationSettings AS MobileApplicationSettings
        |WHERE
        |   MobileApplicationSettings.Code = &Code";
        query2.SetParameter("Code", value.Value.Name);
        If query2.Execute().IsEmpty() Then
            newItem = Catalogs.MobileApplicationSettings.CreateItem();
            newItem.Code = value.Value.Name;
            newItem.Description = value.Value.Commentary;
            newItem.Write();
        Else
            v = Query2.Execute().Unload()[0].Ref.GetObject(); 
            v.Code = value.Value.Name;
            v.Description = value.Value.Commentary;
            v.Write();
        EndIf;
        
        ThisForm.Items.MobileAppSettingsTable.Refresh();
        
    EndDo;
    
EndProcedure


//////////////////////////////////////////////
//Database settings

&AtClient
Procedure SwitchButton(Item)	
    If Items.SaveDatabaseSettings.Enabled = False Then
        Items.SaveDatabaseSettings.Enabled = True;    	    
    EndIf;
EndProcedure


&AtClient
Procedure SaveDatabaseSettings(Command)
    SaveDatabaseSettingsServer();
    Items.SaveDatabaseSettings.Enabled = False;    
EndProcedure

&AtServer
Procedure SaveDatabaseSettingsServer()
    Constants.SKUFeaturesRegistration.Set(Object.SKUFeatures);
    Constants.MultiStock.Set(Object.MultiStock);
EndProcedure

&AtServer
Function GetLastSyncInfo(LastDate, LastStatus)
    
    LastDate = Constants.LastSyncDate.Get();
    LastStatus = Constants.LastSyncStatus.Get();
    
EndFunction

/////////////////////////////////////////////////////////////////////////////////////////////////
// Command interface

&AtClient
Procedure SetLastSyncInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncDate.TextColor = WebColors.Green;
            LastSyncDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncDate.TextColor = WebColors.Red;
            LastSyncDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncDate.TextColor = WebColors.Red;
        LastSyncDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure

&AtClient
Procedure PortOnChange(Item)
	
	Items.SaveSettings.Enabled = True;

EndProcedure
























































