
/////////////////////////////////////////////////////////////////////////////////////////////////
// Common procedures and functions

&AtServer
Procedure OnOpenServer()
    
    Object.Server 		= Constants.Server.Get();
    Object.Path 		= Constants.ServerPath.Get();
    Object.Password 	= Constants.Password.Get();
	Object.Port 		= Constants.Port.Get();
    Object.SKUFeatures 	= Constants.SKUFeaturesRegistration.Get();
    Object.MultiStock 	= Constants.MultiStock.Get();
    
EndProcedure

&AtServer
Procedure DefaultSettingsServer()
    
    DataProcessors.SyncAndSettings.FillRecordset();
    
EndProcedure

&AtServer
Procedure DefaultFTPSettingsServer()
    
    DataProcessors.SyncAndSettings.FillFTPRecordset();
    
EndProcedure

&AtServer
Function LanguageCheck()
    
    Return InfoBaseUsers.CurrentUser().Language.Name;
    
EndFunction // ()

&AtServer
Function GetLastSyncInfo(LastDate, LastStatus)
    
    LastDate = Constants.LastSyncDate.Get();
    LastStatus = Constants.LastSyncStatus.Get();
    
EndFunction

&AtServer
Function GetLastDeletedSyncInfo(LastDate, LastStatus)
    
    LastDate = Constants.LastSyncDeletedDate.Get();
    LastStatus = Constants.LastSyncDeletedStatus.Get();
    
EndFunction

//////////////////////////////////////////////
// Common Settings

&AtServer
Procedure SaveSettingsServer()
    
    Constants.Server.Set(Object.Server);
    Constants.ServerPath.Set(Object.Path);
    Constants.Password.Set(Object.Password);
	Constants.Port.Set(Object.Port);
    
EndProcedure

//////////////////////////////////////////////
// Common Sync

&AtServer 
Procedure SyncronizeDataServer(All)
    
    UploadComplete = False;
    DownloadComplete = False;
	
	Message(NStr("en = ""Data upload is in process..""; ru = ""Выгрузка данных в процессе..."""), MessageStatus.Important);
	
    DataProcessors.SyncAndSettings.UploadData(All, UploadComplete);
    
    If UploadComplete Then
        
        Message(NStr("en = ""Data upload completed""; ru = ""Выгрузка данных завершена"""));
                   
    Else 
        
        Message(NStr("en = ""Data upload interrupted""; ru = ""Выгрузка данных прервана"""));
                
    EndIf;
	
	Message(NStr("en = ""Data download is in process""; ru = ""Загрузка данных в процессе..."""));
	
	DataProcessors.SyncAndSettings.DownloadData(DownloadComplete);
        
    If DownloadComplete Then 
        
        Message(NStr("en = ""Data download completed""; ru = ""Загрузка данных завершена"""));
               
    Else 
        
        Message(NStr("en = ""Data download interrupted""; ru = ""Загрузка данных прервана"""));
                
	EndIf;
	
	If DownloadComplete And UploadComplete Then
	
		Message(NStr("en = ""Synchronization was successful""; ru = ""Синхронизация прошла успешно"""));
		DataProcessors.SyncAndSettings.SaveSyncState(True);
		
	Else 
		
		DataProcessors.SyncAndSettings.SaveSyncState(False);
		
	EndIf;
		
EndProcedure

&AtServer
Procedure SyncronizePicturesServer()
    
    DataProcessors.SyncAndSettings.SyncPicturesOnServer();
    
EndProcedure

&AtServer
Procedure UploadAllPicturesServer()
    
    DataProcessors.SyncAndSettings.SyncPicturesOnServer(True);
    
EndProcedure

&AtServer
Procedure SynchronizeDeletedObjectsServer()
    
    Message(NStr("en = ""Synchronization deleted data is in process..""; ru = ""Синхронизация удаленных данных в процессе..."""), MessageStatus.Important); 
    
    SyncComplete = False;
    
    DataProcessors.SyncAndSettings.SyncDeletedData(SyncComplete);
    
    If SyncComplete Then
        
        Message(NStr("en = ""Synchronization deleted data was successful""; ru = ""Синхронизация удаленных данных прошла успешно"""));
        
        DataProcessors.SyncAndSettings.SaveSyncDeletedDataState(True);
        
    Else 
        
        Message(NStr("en = ""Synchronization deleted data not successful""; ru = ""Синхронизация удаленных данных не удалась"""));
        
        DataProcessors.SyncAndSettings.SaveSyncDeletedDataState(False);
        
    EndIf;
    
EndProcedure

/////////////////////////////////////////////////////////////////////////////////////////////////
// Command interface

&AtClient
Procedure SetLastSyncInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncDate.TextColor = WebColors.Green;
            LastSyncDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncDate.TextColor = WebColors.Red;
            LastSyncDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncDate.TextColor = WebColors.Red;
        LastSyncDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure

&AtClient
Procedure SetLastDeletedSyncInfo(LastDate, LastStatus)
    
    If ValueIsFilled(LastDate) Then
        
        If LastStatus Then
            
            Items.LastSyncDeletedDate.TextColor = WebColors.Green;
            LastSyncDeletedDate = String(LastDate) + NStr("en = "" (completed)""; ru = "" (выполнена)""");
            
        Else 
            
            Items.LastSyncDeletedDate.TextColor = WebColors.Red;
            LastSyncDeletedDate = String(LastDate) + NStr("en = "" (failed)""; ru = "" (не выполнена)""");
            
        EndIf;
        
    Else
        
        Items.LastSyncDeletedDate.TextColor = WebColors.Red;
        LastSyncDeletedDate = NStr("en = ""No data""; ru = ""Нет данных""");
        
    EndIf;
    
EndProcedure

&AtClient
Procedure OnOpen(Cancel)
    
    OnOpenServer();
    
    LastDate = Undefined;
    LastStatus = False;
    
    GetLastSyncInfo(LastDate, LastStatus);
    SetLastSyncInfo(LastDate, LastStatus);
    
    LastDeletedDate = Undefined;
    LastDeletedStatus = False;
    
    GetLastDeletedSyncInfo(LastDeletedDate, LastDeletedStatus);
    SetLastDeletedSyncInfo(LastDeletedDate, LastDeletedStatus);
    
EndProcedure

//////////////////////////////////////////////
// Settings command

&AtClient
Procedure SaveSettings(Command)
    
    SaveSettingsServer();
    Items.SaveSettings.Enabled = False; 
    
EndProcedure

&AtClient
Procedure ServerOnChange(Item)
    
    Items.SaveSettings.Enabled = True;
    
EndProcedure

&AtClient
Procedure PathOnChange(Item)
    
    Items.SaveSettings.Enabled = True;        
    
EndProcedure

&AtClient
Procedure PasswordOnChange(Item)
    
    Items.SaveSettings.Enabled = True;
    
EndProcedure

&AtClient
Procedure PortOnChange(Item)
	
	Items.SaveSettings.Enabled = True;

EndProcedure

&AtClient
Procedure DefaultSettings(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'Settings will be reset. Continue?';"
    + "ru = 'Настройки будет перезаполнены. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        DefaultSettingsServer();
        Items.SyncSettingsTable.Refresh();
        
    EndIf;
    
EndProcedure

&AtClient
Procedure DefaultFTPSettings(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'Settings will be reset. Continue?';"
    + "ru = 'Настройки будет презаполнены. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        DefaultFTPSettingsServer();
        Items.FTPSyncSettingsTable.Refresh();
        
    EndIf;
    
EndProcedure

//////////////////////////////////////////////
// Sync command

&AtClient
Procedure SyncronizeData(Command)
    
    SyncronizeDataServer(False);
    
    LastDate = Undefined;
    LastStatus = False;
    
    GetLastSyncInfo(LastDate, LastStatus);
    SetLastSyncInfo(LastDate, LastStatus);
    
EndProcedure

&AtClient
Procedure SyncronizePictures(Command)
    
    Message(NStr("en = 'Synchronization of pictures is started'; ru = 'Cинхронизация картинок начата'"));
    
    SyncronizePicturesServer();
    
EndProcedure

&AtClient
Procedure UploadAllPictures(Command)
    
    Mode = QuestionDialogMode.OKCancel;
    
    Text = "en = 'The operation can take a long time. Continue?';"
    + "ru = 'Операция может занять продолжительное время. Продолжить?'";
    
    Answer = DoQueryBox(NStr(Text), Mode, 0);
    
    If Answer = DialogReturnCode.OK Then
        
        Message(NStr("en = 'Uploading pictures is started'; ru = 'Выгрузка картинок начата'"));
        
        UploadAllPicturesServer();
        
    EndIf;
    
EndProcedure

&AtClient
Procedure SynchronizeDeletedObjects(Command)
    
    SynchronizeDeletedObjectsServer();
    
    LastDate = Undefined;
    LastStatus = False;
    
    GetLastDeletedSyncInfo(LastDate, LastStatus);
    SetLastDeletedSyncInfo(LastDate, LastStatus);
    
EndProcedure


//////////////////////////////////////////////
//Mobile settings


&AtClient
Procedure DefaultMobileSettings(Command)
    CheckOutMobileSettingsAtServer();
EndProcedure

&AtServer
Procedure CheckOutMobileSettingsAtServer() Export
    ////Update mobile settings
    settingsList = new ValueList;
    settingsList.Add(New Structure("Name, Commentary", "NOR", "Проверять указание причины не взятия заказа при плановом визите"));
    settingsList.Add(New Structure("Name, Commentary", "CoordCtrl", "Контроль снятия координат планового визита"));
    settingsList.Add(New Structure("Name, Commentary", "UVR", "Проверять указание причины внепланового визита"));
    settingsList.Add(New Structure("Name, Commentary", "NoStkEnbl", "Номенклатура с нулевым остатком доступна для заказа"));
    settingsList.Add(New Structure("Name, Commentary", "PlanEnbl", "Доступно создание планового визита из мобильного приложения"));
    
    For Each value In settingsList Do
        query2 = new Query;
        query2.Text=
        "SELECT
        |   MobileApplicationSettings.Ref,
        |   MobileApplicationSettings.Description
        |FROM
        |   Catalog.MobileApplicationSettings AS MobileApplicationSettings
        |WHERE
        |   MobileApplicationSettings.Code = &Code";
        query2.SetParameter("Code", value.Value.Name);
        If query2.Execute().IsEmpty() Then
            newItem = Catalogs.MobileApplicationSettings.CreateItem();
            newItem.Code = value.Value.Name;
            newItem.Description = value.Value.Commentary;
            newItem.Write();
        Else
            v = Query2.Execute().Unload()[0].Ref.GetObject(); 
            v.Code = value.Value.Name;
            v.Description = value.Value.Commentary;
            v.Write();
        EndIf;
        
        ThisForm.Items.MobileAppSettingsTable.Refresh();
        
    EndDo;
    
EndProcedure


//////////////////////////////////////////////
//Database settings

&AtClient
Procedure SwitchButton(Item)	
    If Items.SaveDatabaseSettings.Enabled = False Then
        Items.SaveDatabaseSettings.Enabled = True;    	    
    EndIf;
EndProcedure


&AtClient
Procedure SaveDatabaseSettings(Command)
    SaveDatabaseSettingsServer();
    Items.SaveDatabaseSettings.Enabled = False;    
EndProcedure

&AtServer
Procedure SaveDatabaseSettingsServer()
    Constants.SKUFeaturesRegistration.Set(Object.SKUFeatures);
    Constants.MultiStock.Set(Object.MultiStock);
EndProcedure































































