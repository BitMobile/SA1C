
Var Dictionary;
 
Procedure ExportMetadata(TempStorageAddress) Export

	FileName = GetTempFileName(".xml");
	
	XML = New XMLWriter;
	XML.OpenFile(FileName, "UTF-8");
	
	Xml.WriteXMLDeclaration();	
	Xml.WriteStartElement("Configuration");
        XML.WriteAttribute("Version", Metadata.Version);
        Xml.WriteAttribute("Name", Metadata.Name);
		
		Xml.WriteStartElement("GlobalParameters");
		Xml.WriteEndElement();
		
		//metadata objects..
		
		Xml.WriteStartElement("Entities");

			For Each Enum In Metadata.Enums Do
				
				FullName = Enum.FullName();
				EntitySchema = Translate(Left(FullName, Find(FullName,".") - 1));
				EntityName = Right(FullName, StrLen(FullName) - Find(FullName,"."));
				
				Xml.WriteStartElement("Entity");
				
					Xml.WriteAttribute("Schema", EntitySchema);
					Xml.WriteAttribute("Name", EntityName);
					
					Xml.WriteStartElement("Fields");
						WriteAttributesEnum(Xml, Enum);										
					Xml.WriteEndElement();
					
				Xml.WriteEndElement();
				
			EndDo;	
			
			Query = New Query;              
            Query.Text = 
                "SELECT
                |	SyncOrder.MetadataObject,
                |	SyncOrder.Upload,
                |	SyncOrder.Download
                |FROM
                |	InformationRegister.SyncOrder AS SyncOrder";
            QueryResult = Query.Execute().Unload();
            
			For Each Value in QueryResult Do
				
				ObjType = Translate(Left(Value.MetadataObject, Find(Value.MetadataObject, ".") - 1));
				ObjName = Mid(Value.MetadataObject, Find(Value.MetadataObject, ".") + 1);
				
				If ObjType = "Catalog" Then 
					
					Catalog = Metadata.Catalogs[ObjName];
					FullName = Catalog.FullName();
					
					Xml.WriteStartElement("Entity");
					
						Xml.WriteAttribute("Schema", ObjType);
						Xml.WriteAttribute("Name", ObjName);
						
						WriteSyncAttributes(XML, FullName, "Header");        /////////////
	                    
						Xml.WriteStartElement("Fields");

							WriteAttributesCatalog(Xml, Catalog);
							WriteAttributes(Xml, Catalog);
												
						Xml.WriteEndElement();
						
						Xml.WriteStartElement("TabularSections");
						
							For Each TabularSection In Catalog.TabularSections Do
								
								Xml.WriteStartElement("TabularSection");
								
		                        	Xml.WriteAttribute("Name", TabularSection.Name);                                    
									
									WriteSyncAttributes(XML, FullName, TabularSection.Name);
									
									WriteAttributesId(Xml, TabularSection);
									WriteAttributesRef(Xml, TabularSection);
									WriteAttributesLineNumber(Xml, TabularSection);
									WriteAttributes(Xml, TabularSection);
									
								Xml.WriteEndElement();
								
							EndDo;
										
						Xml.WriteEndElement();
						
					Xml.WriteEndElement();
					
				ElsIf ObjType = "Document" Then 
					
					Document = Metadata.Documents[ObjName];
					FullName = Document.FullName();
					
					Xml.WriteStartElement("Entity");
					
						Xml.WriteAttribute("Schema", ObjType);
						Xml.WriteAttribute("Name", ObjName);
						
						WriteSyncAttributes(XML, FullName, "Header"); 
	                    
						Xml.WriteStartElement("Fields");

							WriteAttributesDocument(Xml, Document);
							WriteAttributes(Xml, Document);
												
						Xml.WriteEndElement();
						
						Xml.WriteStartElement("TabularSections");
						
							For Each TabularSection In Document.TabularSections Do
								
								Xml.WriteStartElement("TabularSection");
								
		                        	Xml.WriteAttribute("Name", TabularSection.Name);
									
									WriteSyncAttributes(XML, FullName, TabularSection.Name); 
									                                    									
									WriteAttributesId(Xml, TabularSection);
									WriteAttributesRef(Xml, TabularSection);
									WriteAttributesLineNumber(Xml, TabularSection);
									WriteAttributes(Xml, TabularSection);
									
								Xml.WriteEndElement();
								
							EndDo;
										
						Xml.WriteEndElement();
						
					Xml.WriteEndElement();
					
				EndIf;
    				
    		EndDo;

		Xml.WriteEndElement();
			
		//Enum values are considered as metadata ..
		
		Xml.WriteStartElement("Constants");

			For Each Enum In Metadata.Enums Do
				
                For Each EnumValue In Enum.EnumValues Do
                    Synonym = ?(EnumValue.Synonym="", EnumValue.Name, EnumValue.Synonym);
                    AddInDictionary(?(EnumValue.Synonym="", EnumValue.Name, EnumValue.Synonym), EnumValue.Name);
                EndDo;
                
                ObjectName = TranslateType(Enum.FullName());
			
				Xml.WriteStartElement("Entity");
					Xml.WriteAttribute("Name", ObjectName);
									
                    Query = New Query;
                    Query.Text = "SELECT Ref FROM " + ObjectName;
                    QueryResult = Query.Execute();
                    Rows = QueryResult.Choose();				
					While Rows.Next() Do
                    				
                    	Xml.WriteStartElement("Row");
                    	
                    		Xml.WriteAttribute("_RS", "0"); //new
                    		Xml.WriteAttribute("Id", UUIDFromEmunValue(Rows.Ref));
                            RefName = Translate(String(Rows.Ref));
                    		Xml.WriteAttribute("Name", String(RefName));
                            Xml.WriteAttribute("Description", String(RefName));

                    	Xml.WriteEndElement();
						
					EndDo;
																		
				Xml.WriteEndElement();
				
			EndDo;	

		Xml.WriteEndElement();
	
	Xml.WriteEndElement();	
		
	Xml.Close();
	
	TempStorageAddress = PutToTempStorage(New BinaryData(FileName));

EndProcedure

Procedure AddInDictionary(val1, val2)

	Dictionary.Add(val1, val2);

EndProcedure

Function Translate(Value)
	
	Item = Dictionary.FindByValue(Value);
	If Item = Undefined Then
		Raise("Value '" + Value + "' cant be translated");
	Else
		Return Item.Presentation;
	EndIf;
	
EndFunction

Function TranslateType(FullName)
	
	Pos = Find(FullName, ".");
	Return Translate(Left(FullName, Pos - 1)) + "." + Right(FullName, StrLen(FullName) - Pos);
	
EndFunction

Procedure WriteAttributesId(Xml, Catalog)
	
	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Id");
		Xml.WriteAttribute("Type", "Guid");
		Xml.WriteAttribute("KeyField", "true");						
	Xml.WriteEndElement();
    	
EndProcedure

Procedure WriteAttributesRef(Xml, Catalog)
	
	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Ref");
		Xml.WriteAttribute("Type", "Guid");
		Xml.WriteAttribute("KeyField", "false");	
		Xml.WriteAttribute("AllowNull", "false");
	Xml.WriteEndElement();
	
EndProcedure

Procedure WriteAttributesLineNumber(Xml, Catalog)
	
	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "LineNumber");
		Xml.WriteAttribute("Type", "Integer");
		Xml.WriteAttribute("KeyField", "false");
		Xml.WriteAttribute("AllowNull", "false");
	Xml.WriteEndElement();
	
EndProcedure

Procedure WriteAttributesEnum(Xml, Enum)
	
	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Id");
		Xml.WriteAttribute("Type", "Guid");
		Xml.WriteAttribute("KeyField", "true");						
	Xml.WriteEndElement();

	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Name");
		Xml.WriteAttribute("Type", "String");
		Xml.WriteAttribute("Length", "100");						
		Xml.WriteAttribute("AllowNull", "false");						
	Xml.WriteEndElement();
	
	Xml.WriteStartElement("Field");
		Xml.WriteAttribute("Name", "Description");
		Xml.WriteAttribute("Type", "String");
		Xml.WriteAttribute("Length", "100");
		Xml.WriteAttribute("AllowNull", "false");						
	Xml.WriteEndElement();
	
EndProcedure

Procedure WriteAttributesCatalog(Xml, Catalog)
	
	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Id");
		Xml.WriteAttribute("Type", "Guid");
		Xml.WriteAttribute("KeyField", "true");						
	Xml.WriteEndElement();

	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Code");
		Xml.WriteAttribute("Type", Translate(String(Catalog.CodeType)));
		Xml.WriteAttribute("Length", String(Catalog.CodeLength));						
		Xml.WriteAttribute("AllowNull", "true");						
	Xml.WriteEndElement();
	
	Xml.WriteStartElement("Field");
		Xml.WriteAttribute("Name", "Description");
		Xml.WriteAttribute("Type", Translate(String(Catalog.CodeType)));
		Xml.WriteAttribute("Length", String(Catalog.DescriptionLength));
		Xml.WriteAttribute("AllowNull", "false");						
	Xml.WriteEndElement();
	
	For Each Owner In Catalog.Owners Do
		
		Xml.WriteStartElement("Field");
			Xml.WriteAttribute("Name", "Owner");
			Xml.WriteAttribute("Type", TranslateType(Owner.FullName()));						
		Xml.WriteEndElement();		
		
		Break;
		
	EndDo;
	
	If Catalog.Hierarchical Then
		
		Xml.WriteStartElement("Field");
			Xml.WriteAttribute("Name", "Parent");
			Xml.WriteAttribute("Type", TranslateType(Catalog.FullName()));						
		Xml.WriteEndElement();		
		
	EndIf;
	
EndProcedure

Procedure WriteAttributesDocument(Xml, Document)
	    
    Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Id");
		Xml.WriteAttribute("Type", "Guid");
		Xml.WriteAttribute("KeyField", "true");						
	Xml.WriteEndElement();

	Xml.WriteStartElement("Field");				
		Xml.WriteAttribute("Name", "Number");
		Xml.WriteAttribute("Type", Translate(String(Document.NumberType)));
		Xml.WriteAttribute("Length", String(Document.NumberLength));						
		Xml.WriteAttribute("AllowNull", "true");						
	Xml.WriteEndElement();
	
	Xml.WriteStartElement("Field");
		Xml.WriteAttribute("Name", "Date");
		Xml.WriteAttribute("Type", "DateTime");
		Xml.WriteAttribute("AllowNull", "false");						
	Xml.WriteEndElement();
    
    Xml.WriteStartElement("Field");
        Xml.WriteAttribute("Name", "Posted");
        Xml.WriteAttribute("AllowNull", "true");						
    	Xml.WriteAttribute("Type", "Boolean");     
    Xml.WriteEndElement();

	
EndProcedure

Procedure WriteAttributes(Xml, Entity)
	
	For Each Attribute In Entity.Attributes Do
		
		Xml.WriteStartElement("Field");
		
			Xml.WriteAttribute("Name", Attribute.Name);
			If Attribute.FillChecking = FillChecking.DontCheck Then
				Xml.WriteAttribute("AllowNull", "true");
			Else
				Xml.WriteAttribute("AllowNull", "false");
			EndIf;
			
			Type = Attribute.Type;
			If Type.Types().Count() <> 1 Then
				Raise(String(Attribute.Type) + " - composite types are not supported !");
			EndIf;						
			Type = Type.Types()[0];
			Type = Metadata.FindByType(Type);  
			
			If Type = Undefined Then //simple type
				Type = String(Attribute.Type);
				
				If Translate(Type) = "Unique identifier" Then
					Xml.WriteAttribute("Type", "Guid");
				EndIf;

				If Translate(Type) = "String" Then
					Xml.WriteAttribute("Type", "String");
                    L = Attribute.Type.StringQualifiers.Length;
                    If L = 0 Then
                        Raise("Zero length isn't allowed: " + Attribute.Name);
                   EndIf;
					Xml.WriteAttribute("Length", String(Attribute.Type.StringQualifiers.Length));							
				EndIf;
				
				If Translate(Type) = "Boolean" Then
					Xml.WriteAttribute("Type", "Boolean");						
				EndIf;
				
				If Translate(Type) = "Date" Then
					Xml.WriteAttribute("Type", "DateTime");
				EndIf;
										
				If Translate(Type) = "Number" Then
					If Attribute.Type.NumberQualifiers.FractionDigits=0 Then
						Xml.WriteAttribute("Type", "Integer");
					Else
						Xml.WriteAttribute("Type", "Decimal");
						Xml.WriteAttribute("Precision", String(Attribute.Type.NumberQualifiers.Digits));
						Xml.WriteAttribute("Scale", String(Attribute.Type.NumberQualifiers.FractionDigits));
					EndIf;
				EndIf;
				
			Else

				Xml.WriteAttribute("Type", TranslateType(Type.FullName()));
				
			EndIf;
			
		Xml.WriteEndElement();

	EndDo;
	
	For Each Attribute In Entity.StandardAttributes Do
		
		If Attribute.Name = "IsFolder" Then
			Xml.WriteStartElement("Field");
				Xml.WriteAttribute("Name", Attribute.Name);
				Xml.WriteAttribute("Type", "Boolean");
			Xml.WriteEndElement();
		EndIf;
		
	EndDo;
             	
EndProcedure

Function UUIDFromEmunValue(Value)
	
	UUID = Mid(ValueToStringInternal(Value), StrLen(ValueToStringInternal(Value))-32,32);
	UUID = Left(UUID,8) + "-" + Mid(UUID,9,4) + "-" + Mid(UUID,13,4) + "-" + Mid(UUID,17,4) + "-" + Right(UUID,12);
	Return UUID;	
	
EndFunction

Function WriteSyncAttributes(XML, FullName, FilterName)

    Query = New Query;
    Query.Text = 
        "SELECT
        |	SyncOrder.Upload as SyncUpload,
        |	SyncOrder.Download as SyncDownload,
        |	SyncOrder.Filter
        |FROM
        |	InformationRegister.SyncOrder AS SyncOrder
        |WHERE
        |	SyncOrder.MetadataObject = &MetadataObject OR SyncOrder.MetadataObject = &MetadataObjectTranslated";
    Query.SetParameter("MetadataObject", FullName);
    Query.SetParameter("MetadataObjectTranslated", TranslateType(FullName));
	
	Result = Query.Execute().Unload();
	
	For Each Column In Result.Columns Do
		
		For Each Row In Result Do
			
			If Row[Column.Name] = True Then 
				
				Xml.WriteAttribute(Column.Name, "True");
				
			ElsIf Row[Column.Name] = False Then 
				
				Xml.WriteAttribute(Column.Name, "False");
				
			Else
				
				FilterText = GetFilter(Row[Column.Name], FilterName);
				
				If ValueIsFilled(FilterText) Then 
                	XML.WriteAttribute("SyncFilter", FilterText);
				EndIf;
				
            EndIf;
			
		EndDo;
    EndDo;	

EndFunction 

Function GetFilter(FilterString, CurrentFilterName)
	
	CurrentFilterText = "";
	
	i = 0;
	
	While i = 0 Do 
		
		FilterNamePos = Find(FilterString, "FilterName= '");
        FilterTextPos = Find(FilterString, "' FilterText= '");
		SeparatorPos = Find(FilterString, "';");
		
		FilterName = StrReplace(Mid(FilterString, FilterNamePos, FilterTextPos - FilterNamePos), "FilterName= '", "");
		FilterText = StrReplace(Mid(FilterString, FilterTextPos, SeparatorPos - FilterTextPos), "' FilterText= '", "");
				
		If FilterName = CurrentFilterName Then 
			
			CurrentFilterText = FilterText;
			
			i = 1;
			
		EndIf;
		
		FilterString = Right(FilterString, StrLen(FilterString) - (SeparatorPos));
		
		If StrLen(FilterString) = 0 or SeparatorPos = 0 Then 
			
			i = 1;
			
		EndIf;
				
	EndDo;

	Return CurrentFilterText;
	
EndFunction


Dictionary = New ValueList;
Dictionary.Add("Справочник", "Catalog"); 
Dictionary.Add("Catalog", "Catalog"); 
Dictionary.Add("Документ", "Document"); 
Dictionary.Add("Document", "Document"); 
Dictionary.Add("Перечисление", "Enum"); 
Dictionary.Add("Enum", "Enum"); 
Dictionary.Add("Уникальный идентификатор", "Unique identifier"); 
Dictionary.Add("Unique identifier", "Unique identifier"); 
Dictionary.Add("Строка", "String"); 
Dictionary.Add("String", "String"); 
Dictionary.Add("Число", "Number"); 
Dictionary.Add("Number", "Number"); 
Dictionary.Add("Булево", "Boolean"); 
Dictionary.Add("Boolean", "Boolean"); 
Dictionary.Add("Дата", "Date"); 
Dictionary.Add("Date", "Date"); 

