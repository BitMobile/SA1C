
/////////////////////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаСервере
Процедура ПриОткрытииСервер()
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	IDВыгрузки = Константы.bitmobile_IDВыгрузки.Получить();
			
	Для Каждого СеансИБ Из СеансыИБ Цикл 
		
		Если СеансИБ.НомерСеанса = НомерСеанса Тогда 
			
			IDСеанса = Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьСостояниеСинхронизации();
	
	ВерсияМодуляСинхронизации = "Используется модуль синхронизации версии: " + Метаданные.Обработки.bitmobile_СинхронизацияИНастройки.Реквизиты.ВерсияМодуляСинхронизации.Подсказка;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеСинхронизации()
	
	Попытка
		
		СинхронизацияНачата = Константы.bitmobile_СинхронизацияЗапущена.Получить();
		
	Исключение
		
		Сообщение 							= Новый СообщениеПользователю;
		Сообщение.Текст 					= Строка("Ошибка при получении текущего состояния синхронизации");
		Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
		Сообщение.Сообщить();
		
		Элементы.СинхронизироватьДанные.Доступность = Ложь;
		
		Возврат;

	КонецПопытки;
			
	Если Не СинхронизацияНачата = "" Тогда 
		
		Если СинхронизацияНачата = IDСеанса Тогда 
			
			Сообщение 							= Новый СообщениеПользователю;
			Сообщение.Текст 					= Строка("Синхронизация уже запущена вами");
			Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
			Сообщение.Сообщить();

			Элементы.СинхронизироватьДанные.Доступность = Ложь;
			
			Возврат;
			
		Иначе 
			
			СеансыИБ = ПолучитьСеансыИнформационнойБазы();
			
			Для Каждого СеансИБ Из СеансыИБ Цикл
				
				Если Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса) = СинхронизацияНачата Тогда 
					
					Сообщение 							= Новый СообщениеПользователю;
					Сообщение.Текст 					= Строка("Синхронизация уже запущена пользователем: " + Строка(СеансИБ.Пользователь));
					Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
					Сообщение.Сообщить();
					
					Элементы.СинхронизироватьДанные.Доступность = Ложь;
			
					Возврат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, IDОкна)
	
	 Возврат Обработки.bitmobile_СинхронизацияИНастройки.ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, IDОкна);
	
КонецФункции

&НаСервере
Функция ПолучитьIDВыгрузки()
	
	Возврат Константы.bitmobile_IDВыгрузки.Получить();

КонецФункции

&НаСервере
Процедура ВыгрузитьМетаданныеВФайлСервер(АдресВХ)
	
	Обработки.bitmobile_СинхронизацияИНастройки.ВыгрузитьМетаданные(АдресВХ);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьПорядокВыгрузкиСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Настройка,
		|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА";

	ТаблицаОбработки = Запрос.Выполнить().Выгрузить();

	ДеревоОбработки = Новый ДеревоЗначений;
	ДеревоОбработки.Колонки.Добавить("Настройка");
	ДеревоОбработки.Колонки.Добавить("ОбъектКонфигурации");
		
	ОтсутствуютНеобходимыеНастройки = Ложь;
		
	// Найти требуемые для выгрузки объекта настройки
	Для Каждого СтрокаНастройки Из ТаблицаОбработки Цикл 
		
		Если ОтсутствуютНеобходимыеНастройки Тогда 
			Прервать;
		КонецЕсли;	
		
		ОбойтиНастройкиРекурсивно(СтрокаНастройки.Настройка, ДеревоОбработки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, СтрокаНастройки.Настройка);
		
	КонецЦикла;	
	
	Если Не ОтсутствуютНеобходимыеНастройки Тогда 
		
		ТаблицаПорядка = Новый ТаблицаЗначений;
		ТаблицаПорядка.Колонки.Добавить("Настройка");
					
		Для Каждого Уровень Из ДеревоОбработки.Строки Цикл 
			
			Если ТаблицаПорядка.Найти(Уровень.Настройка) = Неопределено Тогда 
				
				ЗаполнитьТаблицуПорядка(Уровень, ТаблицаПорядка);
							
				Вставка = ТаблицаПорядка.Добавить();
				Вставка.Настройка = Уровень.Настройка;
											
			КонецЕсли;
						
		КонецЦикла;
		
		Инд = 0;
		
		// Применить таблицу порядка
		Для Каждого СтрокаПорядка Из ТаблицаПорядка Цикл 
			
			Инд = Инд + 1;
			
			ОбъектНастройки = СтрокаПорядка.Настройка.ПолучитьОбъект();
			ОбъектНастройки.ПозицияВВыгрузке = Инд;
			ОбъектНастройки.Записать();
			
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбойтиНастройкиРекурсивно(Настройка, СтрокаДереваОбработки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка)
	
	Если ОтсутствуютНеобходимыеНастройки Тогда 
		Возврат;
	КонецЕсли;	
	
	ВставкаНастройки 					= СтрокаДереваОбработки.Строки.Добавить();
	ВставкаНастройки.Настройка 			= Настройка;
	ВставкаНастройки.ОбъектКонфигурации = Настройка.ОбъектКонфигурации;
		
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройка.ОбъектКонфигурации);
	
	// Обработать реквизиты шапки
	Для Каждого СтрокаРеквизитаШапки Из Настройка.РеквизитыШапки Цикл 
		
		Если ЗначениеЗаполнено(СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile) Тогда 
			
			Если СтрокаРеквизитаШапки.ПриводитьКСтроке Тогда 
				
				Продолжить;
				
			КонецЕсли;	
			
			Если СтрокаРеквизитаШапки.СтандартныйРеквизит Тогда 
				
				ТипРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[СтрокаРеквизитаШапки.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
				
				Если Не МетаданныеРеквизита = Неопределено И Не СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile = "Id" Тогда 
					
					Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
						
						ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
						
						НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
					
						Если Не НайденнаяНастройка = Неопределено Тогда 
							
							Если Не НайденнаяНастройка.Настройка = ИсходнаяНастройка И Не НайденнаяНастройка.Настройка = Настройка Тогда 
							
								ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка);
								
							КонецЕсли;	
							
						Иначе 
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile;
							Сообщение.Сообщить();
							
							ОтсутствуютНеобходимыеНастройки = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
										
				КонецЕсли;	
				
			Иначе 
				
				ТипРеквизита = МетаданныеОбъекта.Реквизиты[СтрокаРеквизитаШапки.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
				
				Если Не МетаданныеРеквизита = Неопределено Тогда 
					
					Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
						
						ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
						
						НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
						
						Если Не НайденнаяНастройка = Неопределено Тогда 
							
							Если Не НайденнаяНастройка.Настройка = ИсходнаяНастройка И Не НайденнаяНастройка.Настройка = Настройка Тогда 
							
								ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка);
								
							КонецЕсли;
							
						Иначе 
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile;
							Сообщение.Сообщить();
							
							ОтсутствуютНеобходимыеНастройки = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЕсли;
							
		КонецЕсли;
								
	КонецЦикла;	
	
	// Обработать табличные части
	Для Каждого СтрокаТабличнойЧасти Из Настройка.ТабличныеЧасти Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile) Тогда 
			
			ТаблицаРеквизитов = Настройка.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации));
			
			Если СтрокаТабличнойЧасти.Запрос Тогда 
				
				Построитель = Новый ПостроительЗапроса;
				Построитель.Текст = СтрокаТабличнойЧасти.ТекстЗапроса;
				Построитель.ЗаполнитьНастройки();
				
				Для Каждого СтрокаРеквизитаТЧ Из ТаблицаРеквизитов Цикл
					
					Если ЗначениеЗаполнено(СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile) Тогда
						
						Если СтрокаРеквизитаТЧ.ПриводитьКСтроке Тогда 
				
							Продолжить;
							
						КонецЕсли;						
						
						ПолеТипа = Построитель.ДоступныеПоля.Найти(СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации);
						
						ТипРеквизита = ПолеТипа.ТипЗначения.Типы().Получить(0);
							
						МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
						
						Если Не МетаданныеРеквизита = Неопределено И Не СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile = "Ref" Тогда 
							
							Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
								
								ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
								
								НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
							
								Если Не НайденнаяНастройка = Неопределено Тогда 
									
									Если Не НайденнаяНастройка.Настройка = ИсходнаяНастройка И Не НайденнаяНастройка.Настройка = Настройка Тогда 
							
										ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка);
										
									КонецЕсли;
									
								Иначе 
									
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
									Сообщение.Сообщить();
									
									ОтсутствуютНеобходимыеНастройки = Истина;
									
									Прервать;
									
								КонецЕсли;
								
							КонецЕсли;
														
						КонецЕсли;
													
					КонецЕсли;						
					
				КонецЦикла;	
				
			Иначе 
				
				Для Каждого СтрокаРеквизитаТЧ Из ТаблицаРеквизитов Цикл 
				
					Если ЗначениеЗаполнено(СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile) Тогда 
						
						Если СтрокаРеквизитаТЧ.ПриводитьКСтроке Тогда 
				
							Продолжить;
							
						КонецЕсли;
						
						Если СтрокаРеквизитаТЧ.СтандартныйРеквизит Тогда 
							
							Если Не СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile = "Ref" Тогда 
							
								ТипРеквизита = МетаданныеОбъекта.ТабличныеЧасти[СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации].СтандартныеРеквизиты[СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
								
								МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
								
								Если Не МетаданныеРеквизита = Неопределено Тогда 
									
									Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
										
										ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
										
										НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
									
										Если Не НайденнаяНастройка = Неопределено Тогда 
											
											Если Не НайденнаяНастройка.Настройка = ИсходнаяНастройка И Не НайденнаяНастройка.Настройка = Настройка Тогда 
								
												ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка);
												
											КонецЕсли;
											
										Иначе 
											
											Сообщение = Новый СообщениеПользователю;
											Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
											Сообщение.Сообщить();
											
											ОтсутствуютНеобходимыеНастройки = Истина;
											
											Прервать;
											
										КонецЕсли;
										
									КонецЕсли;	
									
								КонецЕсли;
								
							КонецЕсли;
														
						Иначе 
							
							ТипРеквизита = МетаданныеОбъекта.ТабличныеЧасти[СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации].Реквизиты[СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
							
							МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
							
							Если Не МетаданныеРеквизита = Неопределено Тогда 
								
								Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
									
									ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
									
									НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
								
									Если Не НайденнаяНастройка = Неопределено Тогда 
										
										Если Не НайденнаяНастройка.Настройка = ИсходнаяНастройка И Не НайденнаяНастройка.Настройка = Настройка Тогда 
										
											ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, ОтсутствуютНеобходимыеНастройки, ИсходнаяНастройка);
											
										КонецЕсли;
										
									Иначе 
										
										Сообщение = Новый СообщениеПользователю;
										Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
										Сообщение.Сообщить();
										
										ОтсутствуютНеобходимыеНастройки = Истина;
										
										Прервать;
										
									КонецЕсли;
									
								КонецЕсли;	
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;	
				
				КонецЦикла;
			
			КонецЕсли;					
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуПорядка(Уровень, ТаблицаПорядка)
	
	Для Каждого Стр Из Уровень.Строки Цикл  
		
		Если ТаблицаПорядка.Найти(Стр.Настройка) = Неопределено Тогда 
			
			ЗаполнитьТаблицуПорядка(Стр, ТаблицаПорядка);
						
			ВставкаКонтейнера = ТаблицаПорядка.Добавить();
			ВставкаКонтейнера.Настройка = Стр.Настройка;
					    								
		КонецЕсли;
						
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус)

	ПоследняяДата = Константы.bitmobile_ДатаПоследнейВыгрузкиДанных.Получить();
    ПоследнийСтатус = Константы.bitmobile_СтатусПоследнейВыгрузкиДанных.Получить();

КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус)

	ПоследняяДата = Константы.bitmobile_ДатаПоследнейЗагрузкиДанных.Получить();
    ПоследнийСтатус = Константы.bitmobile_СтатусПоследнейЗагрузкиДанных.Получить();

КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных)

	ПоследняяДатаУдаленных = Константы.bitmobile_ДатаПоследнейСинхронизацииУдаленныхДанных.Получить();
    ПоследнийСтатусУдаленных = Константы.bitmobile_СтатусПоследнейСинхронизацииУдаленныхДанных.Получить();

КонецФункции

&НаСервере
Процедура СохранитьНастройкиВФайлСервер(АдресВХ)
	
	Обработки.bitmobile_СинхронизацияИНастройки.СохранитьНастройкиВФайл(АдресВХ);
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзФайлаСервер(АдресВХ, НастройкиПоУмолчанию = Ложь)
	
	Обработки.bitmobile_СинхронизацияИНастройки.ВосстановитьНастройкиИзФайла(АдресВХ, НастройкиПоУмолчанию);
	
КонецПроцедуры

//////////////////////////////////////////////
// Серверные процедуры для синхронизации

&НаСервере 
Процедура СинхронизироватьДанныеСервер(IDСеанса)
	
	bitmobile_ОбработчикиСинхронизацииИПодписок.Синхронизация(IDСеанса);
		
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьФайлыСервер()
	
	Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьФайлы();
				
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВсеФайлыСервер()
	
	Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьФайлы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьУдаленныеДанныеСервер()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Синхронизация удаленных данных в процессе...";
	Сообщение.Сообщить();
	
	СинхронизацияЗавершена = False;
	
	Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьУдаленныеДанные(СинхронизацияЗавершена);
		
	Если СинхронизацияЗавершена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Синхронизация удаленных данных прошла успешно.";
		Сообщение.Сообщить();
		
		Обработки.bitmobile_СинхронизацияИНастройки.СохранитьСтатусСинхронизацииУдаленных(Истина);
					
	Иначе  
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Синхронизация удаленных данных не удалась.";
		Сообщение.Сообщить();
		
		Обработки.bitmobile_СинхронизацияИНастройки.СохранитьСтатусСинхронизацииУдаленных(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНастроек()
	
	Порт = Константы.bitmobile_Порт.Получить();
	
	АдресСервера = Константы.bitmobile_Сервер.Получить() + ":" + ?(ЗначениеЗаполнено(Порт), Строка(Порт), "80") + Константы.bitmobile_ПутьНаСервере.Получить();
	
	Сервер = "Адрес сервера: " + ?(ЗначениеЗаполнено(АдресСервера), АдресСервера, "не указан");
	
	ИмяКонфигурации 			= Константы.bitmobile_ИмяКонфигурации.Получить();
	ВерсияКонфигурации 			= Константы.bitmobile_ВерсияКонфигурации.Получить();
	ОтключитьПодпискиНаСобытия 	= Константы.bitmobile_ОтключитьПодпискиНаСобытия.Получить();
	
	Конфигурация = "Имя конфигурации: " + ?(ЗначениеЗаполнено(ИмяКонфигурации), ИмяКонфигурации, "не указано") 
				 + "; Версия конфигурации: " + ?(ЗначениеЗаполнено(ВерсияКонфигурации), ВерсияКонфигурации, "не указана")
				 + "; Регистрация изменений объектов: " + ?(ОтключитьПодпискиНаСобытия, "отключена", "включена");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ bitmobile_АдресаЭлПочтыДляОтчетов.ЭлПочта) КАК Количество
		|ИЗ
		|	РегистрСведений.bitmobile_АдресаЭлПочтыДляОтчетов КАК bitmobile_АдресаЭлПочтыДляОтчетов";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
    ОтчетыОбОшибках = "Отправка отчетов " + ?(Константы.bitmobile_ИспользоватьОтправкуОтчета.Получить(), "включена,", "отключена,") + " получателей - " + Выборка.Количество;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////
// Командный интерфейс

&НаКлиенте
Процедура ОбновитьДанныеСписков()
	
	Элементы.ТаблицаНастроек.Обновить();
	Элементы.КонтролируемыеИзмеренияРегистров.Обновить();
	Элементы.СоответствиеПеречислений.Обновить();
	Элементы.НастройкиМобильныхПриложений.Обновить();

КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаНастроекПриИзменении(Элемент)
	
	Элементы.КонтролируемыеИзмеренияРегистров.Обновить();
	Элементы.СоответствиеПеречислений.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус, ВыгрузкаВыполняется = Ложь)
	
	Если ВыгрузкаВыполняется Тогда 
		
		Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
		ДатаПоследнейВыгрузкиДанных = "Выполняется";
		
	Иначе 	
	
		Если ЗначениеЗаполнено(ПоследняяДата) Тогда 
			
			Если ПоследнийСтатус Тогда 
				
				Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
				ДатаПоследнейВыгрузкиДанных = Строка(ПоследняяДата) + " (выполнена)";
				
			Иначе 
				
				Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Красный;
				ДатаПоследнейВыгрузкиДанных = Строка(ПоследняяДата) + " (не выполнена)";
							
			КонецЕсли;
					
		Иначе 
			
			Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейВыгрузкиДанных = "Нет данных";
							
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус)
	
	Если ЗначениеЗаполнено(ПоследняяДата) Тогда 
		
		Если ПоследнийСтатус Тогда 
			
			Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
			ДатаПоследнейЗагрузкиДанных = Строка(ПоследняяДата) + " (выполнена)";
			
		Иначе 
			
			Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейЗагрузкиДанных = Строка(ПоследняяДата) + " (не выполнена)";
						
		КонецЕсли;
				
	Иначе 
		
		Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Красный;
		ДатаПоследнейЗагрузкиДанных = "Нет данных";
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных)
	
	Если ЗначениеЗаполнено(ПоследняяДатаУдаленных) Тогда 
		
		Если ПоследнийСтатусУдаленных Тогда 
			
			Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Зеленый;
			ДатаПоследнейСинхронизацииУдаленныхДанных = Строка(ПоследняяДатаУдаленных) + " (выполнена)";
			
		Иначе 
			
			Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейСинхронизацииУдаленныхДанных = Строка(ПоследняяДатаУдаленных) + " (не выполнена)";
						
		КонецЕсли;
				
	Иначе 
		
		Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Красный;
		ДатаПоследнейСинхронизацииУдаленныхДанных = "Нет данных";
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииСервер();
	
	ЗаполнитьДанныеНастроек();
	
	Если ЗначениеЗаполнено(IDВыгрузки) Тогда 
		
		Элементы.СинхронизироватьДанные.Доступность = Ложь;
		
		ПодключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки", 20);
		
		ОбновитьИнформацию(Истина);
		
	Иначе 
		
		ОбновитьИнформацию();
		
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуВыгрузки()
	
	ОтключитьОбработчик = Ложь;
	
	СтрокаОтвета = ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, ЭтаФорма.УникальныйИдентификатор);
	
	Если СтрокаОтвета = "Не указан ID выгрузки" Тогда 
		
		ОтключитьОбработчик = Истина;
		
		ОбновитьИнформацию();
		
	ИначеЕсли СтрокаОтвета = "ok" Тогда 
		
		ОтключитьОбработчик = Истина;
		
		ОбновитьИнформацию();
		
	ИначеЕсли СтрокаОтвета = "processing" Тогда
		
		ОбновитьИнформацию(Истина);
		
	Иначе 
		
		ОтключитьОбработчик = Истина;
		
		ОбновитьИнформацию();
		
	КонецЕсли;
	
	Если ОтключитьОбработчик Тогда 
		
		ОтключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки");
		
		Элементы.СинхронизироватьДанные.Доступность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформацию(ВыгрузкаВыполняется = Ложь)
	
	ПоследняяДата = Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус, ВыгрузкаВыполняется);
	
	ПоследняяДата = Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус);
	
	ПоследняяДата = Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДата, ПоследнийСтатус);
				
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииПоУмолчанию(Команда)
	
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = "Настройки будет перезаполнены. Продолжить?";
	
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
	
    	ВосстановитьНастройкиИзФайлаСервер(Неопределено, Истина);
		
		ОбновитьДанныеСписков();
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанные(Команда)
	
	СинхронизироватьДанныеСервер(IDСеанса);
	
	IDВыгрузки = ПолучитьIDВыгрузки();
	
	Если ЗначениеЗаполнено(IDВыгрузки) Тогда 
		
		Элементы.СинхронизироватьДанные.Доступность = Ложь;
		
		ПодключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки", 20);
		
	КонецЕсли;	
	
	ОбновитьИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьФайлы(Команда)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Cинхронизация файлов в процессе...";
	Сообщение.Сообщить();
    	
	СинхронизироватьФайлыСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеФайлы(Команда)
	
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = "Операция может занять продолжительное время. Продолжить?";
	
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка файлов в процессе...";
		Сообщение.Сообщить();
		
		ВыгрузитьВсеФайлыСервер();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьУдаленныеДанные(Команда)
	
	СинхронизироватьУдаленныеДанныеСервер();
	 
	ПоследняяДатаУдаленных = Неопределено;
	ПоследнийСтатусУдаленных = Ложь;
	
	ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных);
	УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМетаданныеВФайл(Команда)
	
#Если ВебКлиент Тогда 
	
	ИмяВыбранногоФайла = "";
	
	ПоместитьФайл( , ИмяВыбранногоФайла, ИмяВыбранногоФайла, Истина, ЭтаФорма.УникальныйИдентификатор); 
	
	Если ЗначениеЗаполнено(ИмяВыбранногоФайла) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка метаданных в процессе...";
		Сообщение.Сообщить();
		
		АдресВХ = "";
		
		ВыгрузитьМетаданныеВФайлСервер(АдресВХ);	
		
		Если ЗначениеЗаполнено(АдресВХ) Тогда 
				
			ПолучитьФайл(АдресВХ, ИмяВыбранногоФайла, Ложь);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выгрузка метаданных завершена. Файл: " + ИмяВыбранногоФайла;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
		       
#Иначе
	
	Диалог 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок 			= "Выберите файл";
	Диалог.ПолноеИмяФайла 		= ""; 
	Диалог.Фильтр 				= "XML файл(*.xml)|*.xml";
	Диалог.МножественныйВыбор 	= Ложь;
			
	Если Диалог.Выбрать() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка метаданных в процессе...";
		Сообщение.Сообщить();
		
		АдресВХ = "";
		
		ВыгрузитьМетаданныеВФайлСервер(АдресВХ);
		
		Если ЗначениеЗаполнено(АдресВХ) Тогда 
			
			ПолучитьФайл(АдресВХ, Диалог.ПолноеИмяФайла, Ложь);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выгрузка метаданных завершена. Файл: " + Диалог.ПолноеИмяФайла;
			Сообщение.Сообщить();
			
		КонецЕсли;
				
	КонецЕсли;
	
#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВФайл(Команда)
	
	ОткрытьФорму("Обработка.bitmobile_СинхронизацияИНастройки.Форма.ФормаПодтвержденияВыгрузки", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОтправкиОтчетов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.bitmobile_НастройкиОтправкиОтчетов", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСервера(Команда)
	
	ОткрытьФорму("ОбщаяФорма.bitmobile_НастройкиСервера", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиКонфигурации(Команда)
	
	ОткрытьФорму("ОбщаяФорма.bitmobile_НастройкиКонфигурации", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолучателейОтчетов(Команда)
	
	ОткрытьФорму("РегистрСведений.bitmobile_АдресаЭлПочтыДляОтчетов.Форма.ФормаСписка", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПорядокВыгрузки(Команда)
	
	РассчитатьПорядокВыгрузкиСервер();
	
	Элементы.ТаблицаНастроек.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнитьДанныеНастроек" Тогда 
		
		ЗаполнитьДанныеНастроек();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
#Если ВебКлиент Тогда 
	
	ИмяВыбранногоФайла = "";
	
	ПоместитьФайл( , ИмяВыбранногоФайла, ИмяВыбранногоФайла, Истина, ЭтаФорма.УникальныйИдентификатор); 
	
	Если ЗначениеЗаполнено(ИмяВыбранногоФайла) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сохранение настроек в процессе...";
		Сообщение.Сообщить();
		
		АдресВХ = "";
		
		СохранитьНастройкиВФайлСервер(АдресВХ);	
		
		Если ЗначениеЗаполнено(АдресВХ) Тогда 
				
			ПолучитьФайл(АдресВХ, ИмяВыбранногоФайла, Ложь);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сохранение настроек завершено. Файл: " + ИмяВыбранногоФайла;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
		       
#Иначе
	
	Диалог 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок 			= "Выберите файл";
	Диалог.ПолноеИмяФайла 		= ""; 
	Диалог.Фильтр 				= "XML файл(*.xml)|*.xml";
	Диалог.МножественныйВыбор 	= Ложь;
			
	Если Диалог.Выбрать() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сохранение настроек в процессе...";
		Сообщение.Сообщить();
		
		АдресВХ = "";
		
		СохранитьНастройкиВФайлСервер(АдресВХ);
		
		Если ЗначениеЗаполнено(АдресВХ) Тогда 
			
			ПолучитьФайл(АдресВХ, Диалог.ПолноеИмяФайла, Ложь);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сохранение настроек завершено. Файл: " + Диалог.ПолноеИмяФайла;
			Сообщение.Сообщить();
			
		КонецЕсли;
				
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайла(Команда)
	
#Если ВебКлиент Тогда 
	
	ИмяВыбранногоФайла = "";
	
	АдресВХ = "";
	
	ПоместитьФайл(АдресВХ, ИмяВыбранногоФайла, ИмяВыбранногоФайла, Истина, ЭтаФорма.УникальныйИдентификатор); 
	
	Если ЗначениеЗаполнено(АдресВХ) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Восстановление настроек в процессе...";
		Сообщение.Сообщить();
		
		ВосстановитьНастройкиИзФайлаСервер(АдресВХ);	
		
		ОбновитьДанныеСписков();
		
	КонецЕсли;
		       
#Иначе
	    
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = "Настройки будет перезаполнены. Продолжить?";
	
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		
		Диалог 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок 			= "Выберите файл";
		Диалог.ПолноеИмяФайла 		= ""; 
		Диалог.Фильтр 				= "XML файл(*.xml)|*.xml";
		Диалог.МножественныйВыбор 	= Ложь;
				
		Если Диалог.Выбрать() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек в процессе...";
			Сообщение.Сообщить();
			
			АдресВХ = "";
			
			ПоместитьФайл(АдресВХ, Диалог.ПолноеИмяФайла, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			
			ВосстановитьНастройкиИзФайлаСервер(АдресВХ);
			
			ОбновитьДанныеСписков();
									
		КонецЕсли;
    			
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры


































	

	



























