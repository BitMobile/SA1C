  
/////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обеспечения синхронизации файлов

Процедура СинхронизироватьФайлы(ПолнаяВыгрузка = Ложь) Экспорт
	
	ДопустимыйРазмерФайла = Константы.bitmobile_ДопустимыйРазмерФайла.Получить();
	
	Если ПолнаяВыгрузка Тогда  
        ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка файлов в процессе...");
	Иначе  
		ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация файлов в процессе...");
	КонецЕсли;
	
	ОшибкаПолученияPrivateTXT	= "Ошибка при получении файла private.txt ";
	ОшибкаПолучения				= "Ошибка при получении файла ";
	ОшибкаУдаления 				= "Ошибка при удалении файла "; 
	ОшибкаПеремещения			= "Ошибка при перемещении файла "; 
	ОшибкаДобавления			= "Ошибка при добавлении файла ";
	ОшибкаОчистки				= "Каталог Private не очищен ";
	СОшибкой 					= "с сообщением: "; 
	ОшибкаСсылки				= "Не найдена ссылка для файла ";
	ОшибкаПользователя			= "Не найден пользователь для файла ";
	ОшибкаСоединенияВ 			= "Невозможно подключиться к серверу. Выгрузка файлов прервана ";
	ОшибкаСоединенияС 			= "Невозможно подключиться к серверу. Синхронизация файлов прервана ";
	ОшибкаРазмера				= "Превышен размер файла (>" + Строка(ДопустимыйРазмерФайла) + ") ";
	ОшибкаНастройки				= "Не найдена настройка синхронизации для файла ";
	
	Протокол 	= Константы.bitmobile_ПротоколПередачиФайлов.Получить();
	Пароль		= Константы.bitmobile_Пароль.Получить();
	Сервер 		= СтрЗаменить(Константы.bitmobile_Сервер.Получить(), "localhost", "127.0.0.1");
	
	СоединениеУстановлено = Ложь;
	
	Попытка
		
		Если Протокол = Enums.bitmobile_ПротоколыПередачиФайлов.FTP Тогда 
			
			Путь 	= "";
			Админ 	= ПолучитьFTPАдмина();
			
			Соединение = Новый FTPСоединение(Сервер, , Админ, Пароль, , Ложь);
			
			СоединениеУстановлено = Истина;
			
		Иначе
			
			Путь = Константы.bitmobile_ПутьНаСервере.Получить();
			
			Путь = СтрЗаменить(Путь, "admin/", "webdav");
			
			Порт = Константы.bitmobile_Порт.Получить();
			
			Соединение = Новый HTTPСоединение(Сервер, Порт, "admin", Пароль);
			
			СоединениеУстановлено = Истина;
			
		КонецЕсли;	
		
	Исключение
		
		Если ПолнаяВыгрузка Тогда  
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОшибкаСоединенияВ;
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаСоединенияВ + СОшибкой + ОписаниеОшибки());
			
		Иначе  
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОшибкаСоединенияС;
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаСоединенияС + СОшибкой + ОписаниеОшибки());
			
		КонецЕсли;
		
	КонецПопытки;
	
	Если СоединениеУстановлено Тогда  
		
		ТаблицаНастроек = ПолучитьТаблицуНастроекФайлов();
		
		Если Не ПолнаяВыгрузка Тогда 
		
			// Синхронизировать папку Private
			ТаблицаФайловPrivate = Новый ТаблицаЗначений;
			ТаблицаФайловPrivate.Колонки.Добавить("Файл");
						
			Попытка
				
				ФайлТаблицыPrivate = ПолучитьИмяВременногоФайла(".txt");
				
		    	Соединение.Получить(Путь + "/private.txt", ФайлТаблицыPrivate);
			
				Результат = Новый ТекстовыйДокумент();
		        Результат.Прочитать(ФайлТаблицыPrivate, КодировкаТекста.UTF8);
		        
		        Для Инд = 1 По Результат.КоличествоСтрок() Цикл 
					
					ВременнаяСтрока = Результат.ПолучитьСтроку(Инд);
					
					ВременнаяСтрока = СокрЛП(Лев(ВременнаяСтрока, Найти(ВременнаяСтрока, "|") - 1));
					
					ВременнаяСтрока = СтрЗаменить(ВременнаяСтрока, "\", "/"); 
					
					ВременнаяСтрока = Прав(ВременнаяСтрока, СтрДлина(ВременнаяСтрока) - 1);
					
					Вставка 		= ТаблицаФайловPrivate.Добавить();
		            Вставка.Файл 	= "/private/" + ВременнаяСтрока;
		            												
				КонецЦикла;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОшибкаПолученияPrivateTXT + СОшибкой + ОписаниеОшибки();
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаПолученияPrivateTXT + СОшибкой + ОписаниеОшибки());
								
			КонецПопытки;  
			
			ТаблицаОбработкиФайлов = Новый ТаблицаЗначений;
			ТаблицаОбработкиФайлов.Колонки.Добавить("СсылкаОбъекта");
			ТаблицаОбработкиФайлов.Колонки.Добавить("СсылкаПользователя");
			ТаблицаОбработкиФайлов.Колонки.Добавить("РасширениеФайла");
			ТаблицаОбработкиФайлов.Колонки.Добавить("IDФайла");
			ТаблицаОбработкиФайлов.Колонки.Добавить("Файл");
			
			Для Каждого СтрPrivate Из ТаблицаФайловPrivate Цикл  
				
				СсылкаОбъекта = Неопределено;
				СсылкаПользователя = Неопределено;
				
				// Получить данные объекта по маске 'userID/objectName/objectID/filename'
				ПолноеИмя 		= СтрЗаменить(СтрPrivate.Файл, "/private/", "");
				Слеш 			= Найти(ПолноеИмя, "/");
				IDПользователя 	= Лев(ПолноеИмя, Слеш - 1);
						
				Попытка
					
					СсылкаПользователя = Справочники.User.ПолучитьСсылку(Новый УникальныйИдентификатор(IDПользователя));
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаПользователя + СтрPrivate.Файл;
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаПользователя + СтрPrivate.Файл);
					
					Продолжить;
					
				КонецПопытки;
								
				ОбъектBitmobile 	= ПолучитьДанныеОбъекта(ПолноеИмя, Слеш); 
				IDОбъекта 			= ПолучитьДанныеОбъекта(ПолноеИмя, Слеш);
				
				НайденнаяНастройка = ТаблицаНастроек.Найти(НРег(ОбъектBitmobile), "ОбъектBitmobile");
				
				Если Не ЗначениеЗаполнено(НайденнаяНастройка) Тогда 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаНастройки + СтрPrivate.Файл;
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаНастройки + СтрPrivate.Файл);
					
					Продолжить;
					
				КонецЕсли;
				
				Если НайденнаяНастройка.ВидОбъектаBitmobile = "Catalog" Тогда 
					
					Менеджер = Справочники[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Справочник.", ""), "Catalog.", "")];
					
					Попытка
						
						СсылкаОбъекта = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(IDОбъекта));
						
					Исключение
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОшибкаСсылки + СтрPrivate.Файл;
						Сообщение.Сообщить();
						
						ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаСсылки + СтрPrivate.Файл);
						
						Продолжить;
						
					КонецПопытки;
                										
				КонецЕсли;
				
				Если НайденнаяНастройка.ВидОбъектаBitmobile = "Document" Тогда 
					
					Менеджер = Документы[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Документ.", ""), "Document.", "")];
					
					Попытка
						
						СсылкаОбъекта = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(IDОбъекта));
						
					Исключение
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОшибкаСсылки + СтрPrivate.Файл;
						Сообщение.Сообщить();
						
						ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаСсылки + СтрPrivate.Файл);
						
						Продолжить;
						
					КонецПопытки;
													
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаСсылки + СтрPrivate.Файл;
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаСсылки + СтрPrivate.Файл);
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СсылкаПользователя) Тогда  
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаПользователя + СтрPrivate.Файл;
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаПользователя + СтрPrivate.Файл);
					
					Продолжить;
					
				КонецЕсли;;
				
				ИмяФайлаИзстроки 	= СтрЗаменить(СтрPrivate.Файл, "/private/" + IDПользователя + "/" + ОбъектBitmobile + "/" + IDОбъекта + "/", "");
				СтрокаIDФайла 		= Лев(ИмяФайлаИзстроки, 36);
				РасширениеФайла 	= СтрЗаменить(ИмяФайлаИзстроки, СтрокаIDФайла, "");
				IDФайла 			= Новый УникальныйИдентификатор(СтрокаIDФайла);
				
				ВставкаДанных 						= ТаблицаОбработкиФайлов.Добавить();
				ВставкаДанных.СсылкаОбъекта         = СсылкаОбъекта;
				ВставкаДанных.СсылкаПользователя    = СсылкаПользователя;
				ВставкаДанных.РасширениеФайла       = РасширениеФайла;
				ВставкаДанных.IDФайла               = IDФайла;
				ВставкаДанных.Файл                  = СтрPrivate.Файл;
								
			КонецЦикла;
			
			МассивIDФайлов = ТаблицаОбработкиФайлов.ВыгрузитьКолонку("IDФайла");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	StorageAdditionalInformation.FileName КАК IDФайла
				|ИЗ
				|	InformationRegister.StorageAdditionalInformation КАК StorageAdditionalInformation
				|ГДЕ
				|	StorageAdditionalInformation.FileName В(&МассивIDФайлов)";
			
			Запрос.УстановитьПараметр("МассивIDФайлов", МассивIDФайлов);
			
			ТаблицаЗагруженныхФайлов = Запрос.Выполнить().Выгрузить();
	
			Для Каждого СтрОбработки Из ТаблицаОбработкиФайлов Цикл
				
				НайденныйФайл = ТаблицаЗагруженныхФайлов.Find(СтрОбработки.IDФайла);
								
				Если Протокол = Enums.bitmobile_ПротоколыПередачиФайлов.FTP Тогда
				
					Если Не НайденныйФайл = Неопределено Тогда  
						
						Попытка
							
							Соединение.Удалить(СтрОбработки.Файл);
							
						Исключение
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОшибкаУдаления + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки();
							Сообщение.Сообщить();
							
							ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаУдаления + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки());
							
						КонецПопытки;
						
					Иначе  
						
						ВременныйФайл = ПолучитьИмяВременногоФайла(СтрОбработки.РасширениеФайла);
					
						Попытка
							
					    	Соединение.Получить(СтрОбработки.Файл, ВременныйФайл);
							
						Исключение
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОшибкаПолучения + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки();
							Сообщение.Сообщить();
							
							ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаПолучения + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки());
							
							Продолжить;
							
						КонецПопытки;
											
						ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайл);
						
						ФайлДляРазмера = Новый Файл(ВременныйФайл);
						
						МенеджерЗаписи 							= РегистрыСведений.StorageAdditionalInformation.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Object					= СтрОбработки.СсылкаОбъекта;
						МенеджерЗаписи.SyncDirection			= Перечисления.SyncDirections.Private;
						МенеджерЗаписи.User						= СтрОбработки.СсылкаПользователя;
						МенеджерЗаписи.FullFileName				= СтрОбработки.Файл;
						МенеджерЗаписи.FileName					= СтрОбработки.IDФайла;
						МенеджерЗаписи.Extension				= СтрОбработки.РасширениеФайла;
						МенеджерЗаписи.Size						= ФайлДляРазмера.Размер();
						МенеджерЗаписи.Storage					= Новый ХранилищеЗначения(ДвоичныеДанные);
						
						МенеджерЗаписи.Записать();
						
						Попытка
							
					    	Соединение.Удалить(СтрОбработки.Файл);
							
						Исключение
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОшибкаУдаления + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки();
							Сообщение.Сообщить();
							
							ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаУдаления + СтрОбработки.Файл + " (" + Строка(СтрОбработки.СсылкаОбъекта) + ") " + СОшибкой + ОписаниеОшибки());
							
						КонецПопытки;	
						
						УдалитьФайлы(ВременныйФайл);
															
					КонецЕсли;
					
				Иначе
					
					Если НайденныйФайл = Неопределено Тогда
					
						МенеджерЗаписи 							= РегистрыСведений.StorageAdditionalInformation.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Object					= СтрОбработки.СсылкаОбъекта;
						МенеджерЗаписи.SyncDirection			= Перечисления.SyncDirections.Private;
						МенеджерЗаписи.User						= СтрОбработки.СсылкаПользователя;
						МенеджерЗаписи.FullFileName				= СтрОбработки.Файл;
						МенеджерЗаписи.FileName					= СтрОбработки.IDФайла;
						МенеджерЗаписи.Extension				= СтрОбработки.РасширениеФайла;
												
						МенеджерЗаписи.Записать();
						
					КонецЕсли;
					
				КонецЕсли;	
							
			КонецЦикла;	
			
		КонецЕсли;
				
		// Синхронизировать папку Shared
		МассивДействий = Новый Массив;
		МассивДействий.Добавить(Перечисления.SyncAction.AddFile);
		МассивДействий.Добавить(Перечисления.SyncAction.DeleteFile);
		
		// Создать пустой файл для обработки каталогов
		ИмяФайлаMCDIR 	= ПолучитьИмяВременногоФайла();
		ТекстФайлаMCDIR = Новый ТекстовыйДокумент;
		ТекстФайлаMCDIR.Записать(ИмяФайлаMCDIR);
				
		Если ПолнаяВыгрузка Тогда  
			МассивДействий.Добавить(Перечисления.SyncAction.ПустаяСсылка());
		КонецЕсли;
				
		ТаблицаФайловShared = ПолучитьТаблицуФайлов(МассивДействий, Перечисления.SyncDirections.Shared);
		
		Для Каждого СтрShared Из ТаблицаФайловShared Цикл 
			
			ИмяОбъектаКонфигурации = СтрShared.Object.Метаданные().ПолноеИмя();
						
			СтруктураПоиска = Новый Структура("ОбъектКонфигурации, ВыгрузкаФайловShared", 
												ИмяОбъектаКонфигурации, 
												Истина);
												
			НайденныеНастройки = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеНастройки.Количество() = 0 Тогда  
				Продолжить;
			Иначе 
				НайденнаяНастройка = НайденныеНастройки.Получить(0);
			КонецЕсли;
			
			Если СтрShared.Action = Перечисления.SyncAction.AddFile 
				Или СтрShared.Action = Перечисления.SyncAction.ПустаяСсылка() Тогда  
			
				ВременныйФайл = ПолучитьИмяВременногоФайла(СтрShared.Extension);
				
				ДвоичныеДанныеДляПередачи = СтрShared.Storage.Получить();
				ДвоичныеДанныеДляПередачи.Записать(ВременныйФайл);
				
				// Проверка файлов на размер, текущее ограничение 400КВ
				ФайлДляРазмера = Новый Файл(ВременныйФайл);
				
				Если ФайлДляРазмера.Размер() > (ДопустимыйРазмерФайла * 1024) Тогда  
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаРазмера + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") ";
					Сообщение.Сообщить();
					
					Если ПолнаяВыгрузка Тогда 
						
						ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") " + СОшибкой + ОшибкаРазмера);
						
					Иначе  
						
						ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") " + СОшибкой + ОшибкаРазмера);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				IDОбъекта = Строка(СтрShared.Object.Ссылка.УникальныйИдентификатор());
				
				Если Протокол = Enums.bitmobile_ПротоколыПередачиФайлов.FTP Тогда
				
					Соединение.УстановитьТекущийКаталог("/shared");
				
					Попытка
						
						Соединение.УстановитьТекущийКаталог(НайденнаяНастройка.ОбъектBitmobile);
						
					Исключение
						
						Соединение.СоздатьКаталог(НайденнаяНастройка.ОбъектBitmobile);
						Соединение.УстановитьТекущийКаталог(НайденнаяНастройка.ОбъектBitmobile);
						
					КонецПопытки;
									
					Попытка
						
						Соединение.УстановитьТекущийКаталог(IDОбъекта);
						
					Исключение
						
						Соединение.СоздатьКаталог(IDОбъекта);
						
					КонецПопытки;
					
					Попытка
						
						Соединение.Записать(ВременныйФайл, СтрShared.FullFileName);
						
					Исключение
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") " + СОшибкой + ОписаниеОшибки();
						Сообщение.Сообщить();
						
						Если ПолнаяВыгрузка Тогда 
							
							ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
							
						Иначе  
							
							ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
							
						КонецЕсли;
						
						УдалитьФайлы(ВременныйФайл);				
						
						Продолжить;
						
					КонецПопытки;
										
				Иначе
					
					Попытка
						
						Соединение.Записать(ИмяФайлаMCDIR, Путь + "/shared/" + НайденнаяНастройка.ОбъектBitmobile + "/mkdir");
						
						Соединение.Записать(ИмяФайлаMCDIR, Путь + "/shared/" + НайденнаяНастройка.ОбъектBitmobile + "/" + IDОбъекта + "/mkdir");
						
						Соединение.Записать(ВременныйФайл, Путь + СтрShared.FullFileName);
						
					Исключение
	                    
	                   	Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") " + СОшибкой + ОписаниеОшибки();
						Сообщение.Сообщить();
						
						Если ПолнаяВыгрузка Тогда 
							
							ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
							
						Иначе  
							
							ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаДобавления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
							
						КонецЕсли;
						
						УдалитьФайлы(ВременныйФайл);				
						
						Продолжить;
						
					КонецПопытки;
	                					
				КонецЕсли;	
				
				МенеджерЗаписи = РегистрыСведений.StorageAdditionalInformation.СоздатьМенеджерЗаписи();
					
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрShared); 
				
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Action 	= Перечисления.SyncAction.ПустаяСсылка();
				МенеджерЗаписи.Size		= ФайлДляРазмера.Размер();
				МенеджерЗаписи.Записать();
				
				УдалитьФайлы(ВременныйФайл);
				
			ИначеЕсли СтрShared.Действие = Перечисления.SyncAction.DeleteFile Then
				
				Попытка
					
					Соединение.Удалить(СтрShared.FullFileName);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОшибкаУдаления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + ") " + СОшибкой + ОписаниеОшибки();
					Сообщение.Сообщить();
					
					Если ПолнаяВыгрузка Тогда 
						
						ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаУдаления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
						
					Иначе  
						
						ЗаписьЖурналаРегистрации("Синхронизация файлов", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ОшибкаУдаления + СтрShared.FullFileName + " (" + Строка(СтрShared.Object) + СОшибкой + ОписаниеОшибки());
						
					КонецЕсли;
					
					Продолжить;
					
				КонецПопытки;
								
				МенеджерЗаписи = РегистрыСведений.StorageAdditionalInformation.СоздатьМенеджерЗаписи();
				
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрShared);
				
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Удалить();
								
			КонецЕсли;
					
		КонецЦикла;
		
		Если ПолнаяВыгрузка Тогда  
	    
	        Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выгрузка файлов завершена.";
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Полная выгрузка файлов", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка файлов завершена");
		    	
	    Иначе  
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Cинхронизация файлов завершена.";
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Cинхронизация файлов", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Cинхронизация файлов завершена");
		    	
		КонецЕсли;
		
	КонецЕсли;
							
КонецПроцедуры

Функция ПолучитьТаблицуФайлов(МассивДействий, НаправлениеСинхронизации)
	     
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	StorageAdditionalInformation.Object КАК Object,
		|	StorageAdditionalInformation.SyncDirection КАК SyncDirection,
		|	StorageAdditionalInformation.Action КАК Action,
		|	StorageAdditionalInformation.User КАК User,
		|	StorageAdditionalInformation.FileName КАК FileName,
		|	StorageAdditionalInformation.FullFileName КАК FullFileName,
		|	StorageAdditionalInformation.Extension КАК Extension,
		|	StorageAdditionalInformation.Storage КАК Storage,
		|	StorageAdditionalInformation.Size КАК Size
		|ИЗ
		|	РегистрСведений.StorageAdditionalInformation КАК StorageAdditionalInformation
		|ГДЕ
		|	StorageAdditionalInformation.SyncDirection = &НаправлениеСинхронизации
		|	И StorageAdditionalInformation.Action В(&МассивДействий)";

	Запрос.УстановитьПараметр("МассивДействий", МассивДействий);
	Запрос.УстановитьПараметр("НаправлениеСинхронизации", НаправлениеСинхронизации);

	Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

Функция ПолучитьFTPАдмина()
	
	Путь	= Константы.bitmobile_ПутьНаСервере.Получить();
	Путь 	= Прав(Путь, СтрДлина(Путь) - 1);
	Путь	= Лев(Путь, СтрДлина(Путь) - 1);
			  
	ВременныйПуть = Путь;
		
	Слеш 	= Найти(Путь, "/");
	
	Путь 	= Прав(Путь, СтрДлина(Путь) - Слеш);
	Путь 	= СтрЗаменить(Путь, "/", "_");	
	
	Если Путь = "admin" Или Путь = "Admin" Тогда  
		Путь = СтрЗаменить(ВременныйПуть, "/", "_");
	КонецЕсли;
		
	Возврат Путь;
	
КонецФункции

Функция ПолучитьТаблицуНастроекФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
	    |	ВЫРАЗИТЬ(bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile + ""."" + bitmobile_НастройкиСинхронизации.Наименование КАК СТРОКА) КАК ОбъектBitmobile,
	    |	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации,
	    |	bitmobile_НастройкиСинхронизации.ВыгрузкаФайловShared КАК ВыгрузкаФайловShared,
	    |	bitmobile_НастройкиСинхронизации.ЗагрузкаФайловPrivate КАК ЗагрузкаФайловPrivate,
	    |	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile КАК ВидОбъектаBitmobile
	    |ИЗ
	    |	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
	    |ГДЕ
	    |	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ";
		
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНастройки Из ТаблицаНастроек Цикл 
		
		СтрокаНастройки.ОбъектBitmobile = НРег(СтрокаНастройки.ОбъектBitmobile);		
		
	КонецЦикла;	
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПолучитьДанныеОбъекта(ПолноеИмя, Слеш)
	
	ПолноеИмя 	= Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - Слеш);
	Слеш 		= Найти(ПолноеИмя, "/");
	
	Возврат Лев(ПолноеИмя, Слеш - 1);	
		
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обеспечения выгрузки метаданных

Процедура ВыгрузитьМетаданные(АдресВХ) Экспорт

	ИмяФайла = ПолучитьИмяВременногоФайла(".xml"); // FileName
	
	ВерсияКонфигурации 	= Константы.bitmobile_ВерсияКонфигурации.Получить();
	ИмяКонфигурации		= Константы.bitmobile_ИмяКонфигурации.Получить();
	
	ЕстьНастройка = Истина;
	
	Если Не ЗначениеЗаполнено(ВерсияКонфигурации) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана версия конфигурации.";
		Сообщение.Сообщить();
		
		ЕстьНастройка = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указано имя конфигурации.";
		Сообщение.Сообщить();
		
		ЕстьНастройка = Ложь;
		
	КонецЕсли;
	                  	
	Если ЕстьНастройка Тогда
		
		XML = Новый ЗаписьXML;
		XML.ОткрытьФайл(ИмяФайла, "UTF-8");
		
		XML.ЗаписатьОбъявлениеXML();	
		XML.ЗаписатьНачалоЭлемента("Configuration");
	
	 	XML.ЗаписатьАтрибут("Version", ВерсияКонфигурации);
	    XML.ЗаписатьАтрибут("Name", ИмяКонфигурации);
		
		XML.ЗаписатьНачалоЭлемента("GlobalParameters");
		XML.ЗаписатьКонецЭлемента();;
		
		// Объекты метаданных
		XML.ЗаписатьНачалоЭлемента("Entities");

		    // Получить перечисления используемые в настройках
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	bitmobile_СоответствиеПеречислений.ИмяВКонфигурации,
				|	bitmobile_СоответствиеПеречислений.ИмяВBitmobile,
				|	bitmobile_СоответствиеПеречислений.СоответствиеЗначенийПеречисления
				|ИЗ
				|	РегистрСведений.bitmobile_СоответствиеПеречислений КАК bitmobile_СоответствиеПеречислений";

			ТаблицаСоответствийПеречислений = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Соответствие Из ТаблицаСоответствийПеречислений Цикл
				
				XML.ЗаписатьНачалоЭлемента("Entity");
				
					XML.ЗаписатьАтрибут("Schema", "Enum");
				    XML.ЗаписатьАтрибут("Name", Соответствие.ИмяВBitmobile);
					
					XML.ЗаписатьНачалоЭлемента("Fields");
						
						XML.ЗаписатьНачалоЭлемента("Field");				
							XML.ЗаписатьАтрибут("Name", "Id");
							XML.ЗаписатьАтрибут("Type", "Guid");
							XML.ЗаписатьАтрибут("KeyField", "true");						
						XML.ЗаписатьКонецЭлемента();

						XML.ЗаписатьНачалоЭлемента("Field");				
							XML.ЗаписатьАтрибут("Name", "Name");
							XML.ЗаписатьАтрибут("Type", "String");
							XML.ЗаписатьАтрибут("Length", "100");						
							XML.ЗаписатьАтрибут("AllowNull", "false");						
						XML.ЗаписатьКонецЭлемента();
						
						XML.ЗаписатьНачалоЭлемента("Field");
							XML.ЗаписатьАтрибут("Name", "Description");
							XML.ЗаписатьАтрибут("Type", "String");
							XML.ЗаписатьАтрибут("Length", "100");
							XML.ЗаписатьАтрибут("AllowNull", "false");						
						XML.ЗаписатьКонецЭлемента();
					
					XML.ЗаписатьКонецЭлемента();
					
				XML.ЗаписатьКонецЭлемента();	
				
			КонецЦикла;
			
			// Получить таблицу актуальных настроек
			Запрос = Новый Запрос;
			Запрос.Текст = 
			    "ВЫБРАТЬ
			    |	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
			    |	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile КАК ВидОбъектаBitmobile,
			    |	ВЫРАЗИТЬ(bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile + ""."" + bitmobile_НастройкиСинхронизации.Наименование КАК СТРОКА) КАК ОбъектBitmobile,
			    |	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации,
			    |	bitmobile_НастройкиСинхронизации.Наименование КАК Наименование,
			    |	bitmobile_НастройкиСинхронизации.ВыгрузкаДанных КАК ВыгрузкаДанных,
			    |	bitmobile_НастройкиСинхронизации.ЗагрузкаДанных КАК ЗагрузкаДанных,
			    |	bitmobile_НастройкиСинхронизации.ФильтрВBitmobile КАК ФильтрВBitmobile
			    |ИЗ
			    |	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
			    |ГДЕ
			    |	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ";
				
			ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
				        
			Для Каждого Настройка Из ТаблицаНастроек Цикл 
				
				ВидОбъекта = Настройка.ВидОбъектаBitmobile; 
				ИмяОбъекта = Настройка.Наименование; 
								
				МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройка.ОбъектКонфигурации);
				
				XML.ЗаписатьНачалоЭлемента("Entity");
				
					XML.ЗаписатьАтрибут("Schema", ВидОбъекта);
					XML.ЗаписатьАтрибут("Name", ИмяОбъекта);
					
					XML.ЗаписатьАтрибут("SyncUpload", ?(Настройка.ВыгрузкаДанных, "True", "False"));
					XML.ЗаписатьАтрибут("SyncDownload", ?(Настройка.ЗагрузкаДанных, "True", "False"));
					XML.ЗаписатьАтрибут("SyncFilter", Настройка.ФильтрВBitmobile);
											
					XML.ЗаписатьНачалоЭлемента("Fields");
					
					    ЗаписатьРеквизиты(XML, Настройка, МетаданныеОбъекта, Настройка.Ссылка.РеквизитыШапки.Выгрузить(), ТаблицаНастроек, ТаблицаСоответствийПеречислений);
																									
					XML.ЗаписатьКонецЭлемента();
					
					XML.ЗаписатьНачалоЭлемента("TabularSections");
					
						Для Каждого ТабличнаяЧастьНастройки Из Настройка.Ссылка.ТабличныеЧасти Цикл 
							
							Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаBitmobile) И ЗначениеЗаполнено(ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации) Тогда 
								
								XML.ЗаписатьНачалоЭлемента("TabularSection");
								
								    XML.ЗаписатьАтрибут("Name", ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаBitmobile);
									
									XML.ЗаписатьАтрибут("SyncFilter", ТабличнаяЧастьНастройки.Фильтр);
									
									Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки.Ключ) Тогда 
										
										XML.ЗаписатьАтрибут("Key", ТабличнаяЧастьНастройки.Ключ);
										
									КонецЕсли;
																	
									ТаблицаРеквизитов = Настройка.Ссылка.РеквизитыТабличныхЧастей.Выгрузить(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации));
									
									Если ТабличнаяЧастьНастройки.Запрос Тогда
										
										Построитель = Новый ПостроительЗапроса;
		                                Построитель.Текст = ТабличнаяЧастьНастройки.ТекстЗапроса;
										Построитель.ЗаполнитьНастройки();
										
										ЗаписатьРеквизиты(XML, Настройка, Построитель.ДоступныеПоля, ТаблицаРеквизитов, ТаблицаНастроек, ТаблицаСоответствийПеречислений, ТабличнаяЧастьНастройки);
									
									Иначе 
										
										ЗаписатьРеквизиты(XML, Настройка, МетаданныеОбъекта.ТабличныеЧасти[ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации], ТаблицаРеквизитов, ТаблицаНастроек, ТаблицаСоответствийПеречислений, ТабличнаяЧастьНастройки);
										
									КонецЕсли;	
										
								XML.ЗаписатьКонецЭлемента();
								
							КонецЕсли;
															
						КонецЦикла;
									
					XML.ЗаписатьКонецЭлемента();
					
				XML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
											
		XML.ЗаписатьКонецЭлемента();
			
		// Записать значения перечислениий
		XML.ЗаписатьНачалоЭлемента("Constants");

			Для Каждого СтрокаПеречисления Из ТаблицаСоответствийПеречислений Цикл 
				
				Если ЗначениеЗаполнено(СтрокаПеречисления.ИмяВBitmobile) Тогда 
				
					XML.ЗаписатьНачалоЭлемента("Entity");
					
						XML.ЗаписатьАтрибут("Name", "Enum." + СтрокаПеречисления.ИмяВBitmobile);
						
						МетаданныеПеречисления = Метаданные.НайтиПоПолномуИмени(СтрокаПеречисления.ИмяВКонфигурации);
						
						СоответствиеЗначений = СтрокаПеречисления.СоответствиеЗначенийПеречисления.Получить();
						
						Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл 
							
							СсылкаЗначения = ПредопределенноеЗначение(МетаданныеПеречисления.ПолноеИмя() + "." + ЗначениеПеречисления.Имя); 
							
							XML.ЗаписатьНачалоЭлемента("Row");
							
								XML.ЗаписатьАтрибут("_RS", "0"); 
		                		XML.ЗаписатьАтрибут("Id", ГУИДИзЗначенияПеречисления(СсылкаЗначения));
								
								Если Не СоответствиеЗначений = Неопределено Тогда 
									
									ИмяВBitmobile = СоответствиеЗначений.Получить(СсылкаЗначения);
									
									Если Не ИмяВBitmobile = Неопределено И ЗначениеЗаполнено(ИмяВBitmobile) Тогда 
										
										XML.ЗаписатьАтрибут("Name", СокрЛП(ИмяВBitmobile));
											
									Иначе 
										
										XML.ЗаписатьАтрибут("Name", ЗначениеПеречисления.Имя);
										
									КонецЕсли;
									
								Иначе 
									
									XML.ЗаписатьАтрибут("Name", ЗначениеПеречисления.Имя);
																	
								КонецЕсли;
													
								XML.ЗаписатьАтрибут("Description", ЗначениеПеречисления.Имя);
								
							XML.ЗаписатьКонецЭлемента();
							
						КонецЦикла;
						
					XML.ЗаписатьКонецЭлемента();
					
				Иначе 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Для перечисления " + СтрокаПеречисления.ИмяВКонфигурации + " не указано имя в bitmobile. Перечисление не выгружено.";
					Сообщение.Сообщить();
					
				КонецЕсли;
														
			КонецЦикла;
            		
		XML.ЗаписатьКонецЭлемента();

		XML.ЗаписатьКонецЭлемента();
		
		XML.Закрыть();

		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаписатьРеквизиты(XML, Настройка, ДанныеРеквизитов, Реквизиты, ТаблицаНастроек, ТаблицаСоответствийПеречислений, ТабличнаяЧастьНастройки = Неопределено)
	
	Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки) Тогда 
	
		XML.ЗаписатьНачалоЭлемента("Field");				
			XML.ЗаписатьАтрибут("Name", "Id");
			XML.ЗаписатьАтрибут("Type", "Guid");
			XML.ЗаписатьАтрибут("KeyField", "true");						
		XML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	Для Каждого СтрокаРеквизита Из Реквизиты Цикл
		
		Если ЗначениеЗаполнено(СтрокаРеквизита.РеквизитОбъектаBitmobile) Тогда 
			
			Если СтрокаРеквизита.СтандартныйРеквизит И (СтрокаРеквизита.РеквизитОбъектаКонфигурации = "Ссылка" Или СтрокаРеквизита.РеквизитОбъектаКонфигурации = "Ref") Тогда
				
				XML.ЗаписатьНачалоЭлемента("Field");				
					XML.ЗаписатьАтрибут("Name", СтрокаРеквизита.РеквизитОбъектаBitmobile);
					XML.ЗаписатьАтрибут("Type", "Guid");
					
					Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки) Тогда 
						
						XML.ЗаписатьАтрибут("KeyField", "false");
						XML.ЗаписатьАтрибут("AllowNull", "false");
																		
					Иначе 
						
						XML.ЗаписатьАтрибут("KeyField", "true");
						
					КонецЕсли;
					
				XML.ЗаписатьКонецЭлемента();
				
			Иначе
				
				Если СтрокаРеквизита.ПриводитьКСтроке Тогда 
					
					XML.ЗаписатьНачалоЭлемента("Field");
				
						XML.ЗаписатьАтрибут("Name", СтрокаРеквизита.РеквизитОбъектаBitmobile);
						XML.ЗаписатьАтрибут("Type", "String");
						XML.ЗаписатьАтрибут("Length", "500");
						
					XML.ЗаписатьКонецЭлемента();	
					
				Иначе 				
				
					Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки) И ТабличнаяЧастьНастройки.Запрос Тогда
						
						ОписаниеТиповРеквизита = ДанныеРеквизитов[СтрокаРеквизита.РеквизитОбъектаКонфигурации].ТипЗначения;
						
						ТипыРеквизита = ОписаниеТиповРеквизита.Типы();
						
					Иначе 	
						
						Если СтрокаРеквизита.СтандартныйРеквизит Тогда 
						
							МетаданныеРеквизита = ДанныеРеквизитов.СтандартныеРеквизиты[СтрокаРеквизита.РеквизитОбъектаКонфигурации];
							
						Иначе 
							
							МетаданныеРеквизита = ДанныеРеквизитов.Реквизиты[СтрокаРеквизита.РеквизитОбъектаКонфигурации];
							
						КонецЕсли;
						
						ОписаниеТиповРеквизита = МетаданныеРеквизита.Тип;
						
						ТипыРеквизита = ОписаниеТиповРеквизита.Типы();
						
					КонецЕсли;
									
					ТипРеквизита = ТипыРеквизита.Получить(0);
					
					// Проверка на составной тип данных
					Если Не ТипыРеквизита.Количество() = 1 Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Составной тип данных не поддерживается. В настройке " 
										+ Настройка.ВидОбъектаBitmobile + "." + Настройка.Наименование 
										+ ?(ЗначениеЗаполнено(ТабличнаяЧастьНастройки), " в табличной части " + ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации, "") 
										+ " пропущен реквизит " + СтрокаРеквизита.РеквизитОбъектаBitmobile;
						Сообщение.Сообщить();		
								
						Продолжить;
						
					КонецЕсли;
					
					// Проверка на строку нулевой длинны
					Если ТипРеквизита = Тип("Строка") И ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина = 0 Тогда 
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Строки нулевой длины не поддерживаются. В настройке " 
										+ Настройка.ВидОбъектаBitmobile + "." + Настройка.Наименование 
										+ ?(ЗначениеЗаполнено(ТабличнаяЧастьНастройки), " в табличной части " + ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации, "") 
										+ " пропущен реквизит " + СтрокаРеквизита.РеквизитОбъектаBitmobile;
						Сообщение.Сообщить();		
								
						Продолжить;
						
					КонецЕсли;
									
					МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
					
					Если МетаданныеТипа = Неопределено Тогда 
					
					XML.ЗаписатьНачалоЭлемента("Field");
				
						XML.ЗаписатьАтрибут("Name", СтрокаРеквизита.РеквизитОбъектаBitmobile);
						
						Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки) И ТабличнаяЧастьНастройки.Запрос Тогда
							
							XML.ЗаписатьАтрибут("AllowNull", "true");
							
						Иначе 	
						
							Если МетаданныеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда 
								
								XML.ЗаписатьАтрибут("AllowNull", "true");
								
							Иначе 
								
								XML.ЗаписатьАтрибут("AllowNull", "false");
								
							КонецЕсли;
							
						КонецЕсли;	
						
						Если ТипРеквизита = Тип("УникальныйИдентификатор") Тогда 
							
							XML.ЗаписатьАтрибут("Type", "Guid");
							
						ИначеЕсли ТипРеквизита = Тип("Строка") Тогда 
							
							XML.ЗаписатьАтрибут("Type", "String");
							XML.ЗаписатьАтрибут("Length", Строка(ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина));
							
						ИначеЕсли ТипРеквизита = Тип("Булево") Тогда 
							
							XML.ЗаписатьАтрибут("Type", "Boolean");

						ИначеЕсли ТипРеквизита = Тип("Дата") Тогда 
							
							XML.ЗаписатьАтрибут("Type", "DateTime2");
							
						ИначеЕсли ТипРеквизита = Тип("Число") Тогда 
							
							Если ОписаниеТиповРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда 
								
								XML.ЗаписатьАтрибут("Type", "Integer");
								
							Иначе 
								
								XML.ЗаписатьАтрибут("Type", "Decimal");
								XML.ЗаписатьАтрибут("Precision", Строка(ОписаниеТиповРеквизита.КвалификаторыЧисла.Разрядность));
								XML.ЗаписатьАтрибут("Scale", Строка(ОписаниеТиповРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти));
								
							КонецЕсли;
												
						КонецЕсли;
						
					XML.ЗаписатьКонецЭлемента();
					
				Иначе 
					
					// Проверка на наличие типа в настройках
					ПолноеИмяТипа = МетаданныеТипа.ПолноеИмя();
					
					// Найти настройку по полному имени типа
					НастройкаДокументСправочник = ТаблицаНастроек.Найти(ПолноеИмяТипа, "ОбъектКонфигурации");
					
					НастройкаПеречисление = ТаблицаСоответствийПеречислений.Найти(ПолноеИмяТипа, "ИмяВКонфигурации");
					
					Если НастройкаДокументСправочник = Неопределено И НастройкаПеречисление = Неопределено Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Тип данных не указан в настройках. Нарушена ссылочная целостность. В настройке " 
										+ Настройка.ВидОбъектаBitmobile + "." + Настройка.Наименование 
										+ ?(ЗначениеЗаполнено(ТабличнаяЧастьНастройки), " в табличной части " + ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации, "") 
										+ " пропущен реквизит " + СтрокаРеквизита.РеквизитОбъектаBitmobile;
						Сообщение.Сообщить();	
							
						Продолжить;
						
					Иначе
						
						XML.ЗаписатьНачалоЭлемента("Field");
				
							XML.ЗаписатьАтрибут("Name", СтрокаРеквизита.РеквизитОбъектаBitmobile);
							
							Если ЗначениеЗаполнено(ТабличнаяЧастьНастройки) И ТабличнаяЧастьНастройки.Запрос Тогда
							
								XML.ЗаписатьАтрибут("AllowNull", "true");
								
							Иначе
							
								Если МетаданныеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять Тогда 
									
									XML.ЗаписатьАтрибут("AllowNull", "true");
									
								Иначе 
									
									XML.ЗаписатьАтрибут("AllowNull", "false");
									
								КонецЕсли;
								
							КонецЕсли;
														
							Если НастройкаДокументСправочник = Неопределено Тогда 
								
								XML.ЗаписатьАтрибут("Type", "Enum." + НастройкаПеречисление.ИмяВBitmobile);

							Иначе 
								 
								XML.ЗаписатьАтрибут("Type", НастройкаДокументСправочник.ОбъектBitmobile);
								
							КонецЕсли;
														
						XML.ЗаписатьКонецЭлемента();	
						
					КонецЕсли;
										
				КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
										
	КонецЦикла;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обеспечения синхронизации данных 

Процедура ОтправкаОтчетаОбОшибке(Операция, ИнфОбОшибке, ИмяФайлаЗапроса = Неопределено);
	
	Если Константы.bitmobile_ИспользоватьОтправкуОтчета.Получить() = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ТелоПисьма = "Конфигурация: " + Метаданные.Имя + " " + Метаданные.Версия + " " + Метаданные.Поставщик + " " + " 
	            |Конфигурация BitMobile: " + Константы.bitmobile_ИмяКонфигурации.Получить() + " " + Константы.bitmobile_ВерсияКонфигурации.Получить() + "
				|Solution: " + Константы.bitmobile_Сервер.Получить() + Константы.bitmobile_ПутьНаСервере.Получить() + "
				|Дата: " + ТекущаяДата() + "
				|Пользователь: " + Пользователь + "
				|
				|При операции """ + Операция + """ возникла ошибка:
				|
				| " + ИнфОбОшибке + "
				|";
		
	ИПП 						= Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP 		= Константы.bitmobile_АдресСервераSMTP.Получить();
	ИПП.ВремяОжидания 			= 30;
	ИПП.ПарольSMTP 				= Константы.bitmobile_ПарольSMTP.Получить();
	ИПП.ПользовательSMTP 		= Константы.bitmobile_ПользовательSMTP.Получить();
	ИПП.ПортSMTP 				= Константы.bitmobile_ПортSMTP.Получить();
	
	Если Константы.bitmobile_АутентификацияSMTP.Получить() Тогда 
		ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации.Login;
	КонецЕсли;
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	НаборЗаписей = РегистрыСведений.bitmobile_АдресаЭлПочтыДляОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	НетПолучателей = Истина;
	
	Для Каждого Стр Из НаборЗаписей Цикл 
		
		Сообщение.Получатели.Добавить(СокрЛП(Стр.ЭлПочта));
		НетПолучателей = Ложь;
		
	КонецЦикла;
	
	Если НетПолучателей Тогда 
		
		Сообщение1С = Новый СообщениеПользователю;
		Сообщение1С.Текст = "Отправка отчетов об ошибке включена, но не указано ни одного адреса получателя.";
		Сообщение1С.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Сообщение.Отправитель.Адрес = Константы.bitmobile_ПользовательSMTP.Получить();
	Сообщение.Тема = "Отчет об ошибке синхронизации BitMobile";
	
	Если Не ИмяФайлаЗапроса = Неопределено Тогда 
		
		Если Константы.bitmobile_ПрикреплятьФайлДанных.Получить() Тогда
			
			ПроверкаРазмера = Новый Файл(ИмяФайлаЗапроса);
			
			Если ПроверкаРазмера.Размер() <= Константы.bitmobile_РазмерПрикрепляемогоФайла.Получить() * 1048576 Тогда
				
				Сообщение.Вложения.Добавить(ИмяФайлаЗапроса);
				
			Иначе
				
				ТелоПисьма = ТелоПисьма + "
				|Файл данных не был отправлен, т.к. его размер превысил допустимое значение.";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Сообщение.Тексты.Добавить(ТелоПисьма);	
	
	Попытка
		
		Почта = Новый ИнтернетПочта;
		Почта.Подключиться(ИПП);
		Почта.Послать(Сообщение);
	    Почта.Отключиться();
		
		Сообщение1С = Новый СообщениеПользователю;
		Сообщение1С.Текст = "Отчет об ошибке синхронизации отправлен.";
		Сообщение1С.Сообщить();
		
		ЗаписьЖурналаРегистрации("Отчет об ошибке синхронизации", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Отчет об ошибке синхронизации отправлен.");
						
	Исключение
		
		Сообщение1С = Новый СообщениеПользователю;
		Сообщение1С.Текст = "Не удалось отправить отчет об ошибке синхронизации: " + ОписаниеОшибки();
		Сообщение1С.Сообщить();
		
		ЗаписьЖурналаРегистрации("Отчет об ошибке синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Не удалось отправить отчет об ошибке синхронизации: " + ОписаниеОшибки()); 
					
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьСтатусЗагрузки(Статус) Экспорт

	Константы.bitmobile_ДатаПоследнейЗагрузкиДанных.Установить(ТекущаяДата());
	Константы.bitmobile_СтатусПоследнейЗагрузкиДанных.Установить(Статус);
			
КонецПроцедуры

Процедура СохранитьСтатусВыгрузки(Статус) Экспорт

	Константы.bitmobile_ДатаПоследнейВыгрузкиДанных.Установить(ТекущаяДата());
	Константы.bitmobile_СтатусПоследнейВыгрузкиДанных.Установить(Статус);
			
КонецПроцедуры

Процедура СохранитьСтатусСинхронизацииУдаленных(Статус) Экспорт

	Константы.bitmobile_ДатаПоследнейСинхронизацииУдаленныхДанных.Установить(ТекущаяДата());
	Константы.bitmobile_СтатусПоследнейСинхронизацииУдаленныхДанных.Установить(Статус);
			
КонецПроцедуры

Процедура ПроверитьСостояниеСинхронизации(НачатьСинхронизацию = Ложь) Экспорт 
	
	СинхронизацияНачата = Константы.bitmobile_СинхронизацияЗапущена.Получить();
		
	ОшибкаСоединения = Ложь;
	
	IDВыгрузки = Константы.bitmobile_IDВыгрузки.Получить();
	
	Ответ = ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, Неопределено, ОшибкаСоединения);
	
	Если Не ОшибкаСоединения И Не Ответ = "processing" Или (Ответ = "Не указан ID выгрузки" И Не ЗначениеЗаполнено(СинхронизацияНачата)) Тогда 
				
		НачатьСинхронизацию = Истина;
			
	КонецЕсли;
			
КонецПроцедуры

Функция ОтправитьНаСерверBitmobile(Метод, Сервер, Порт, Путь, Пароль, ИмяФайлаЗапроса = Неопределено, ТолькоОтправить = Истина, ИспользоватьPost = Истина, ОтправлятьZIP = Ложь, ПриниматьZIP = Ложь)	
	
	Если Не ЗначениеЗаполнено(Порт) Тогда 
		
		Порт = 80;
		
	КонецЕсли;	
	
	Соединение = Новый HTTPСоединение(Сервер, Порт, "admin", Пароль);
	ПутьСоединения = Путь + Метод;	
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Если ИспользоватьPost Тогда 
		
		ЗаголовокHTTP = Новый Соответствие(); 
		
		Если ОтправлятьZIP Тогда 
			
			ЗаголовокHTTP.Вставить("Content-Encoding", "deflate");
			
		ИначеЕсли ПриниматьZIP Тогда 
			
			ЗаголовокHTTP.Вставить("Accept-Encoding", "deflate");
			
		КонецЕсли;
        	
		Ответ = Соединение.ОтправитьДляОбработки(ИмяФайлаЗапроса, ПутьСоединения, ИмяФайлаРезультата, ЗаголовокHTTP);
		
	Иначе 
		
		Ответ = Соединение.Получить(ПутьСоединения, ИмяФайлаРезультата);
				
	КонецЕсли;	
	
	
	Если Ответ.КодСостояния = 200 Тогда
	
		Если ТолькоОтправить Тогда  
			
			Результат = Новый ТекстовыйДокумент();
			Результат.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			СтрокаРезультата = "";
			Для C = 1 По Результат.КоличествоСтрок() Цикл 
				СтрокаРезультата = СтрокаРезультата + Результат.ПолучитьСтроку(C);
			КонецЦикла;
			
			Возврат СтрокаРезультата;
			
		Иначе  
			
			Возврат ИмяФайлаРезультата;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ответ.КодСостояния;	
		
	КонецЕсли	
	
КонецФункции

Функция ГУИДИзЗначенияПеречисления(Значение) Экспорт 
	
	ГУИД = Сред(ЗначениеВСтрокуВнутр(Значение), СтрДлина(ЗначениеВСтрокуВнутр(Значение))-32,32);
	ГУИД = Лев(ГУИД,8) + "-" + Сред(ГУИД,9,4) + "-" + Сред(ГУИД,13,4) + "-" + Сред(ГУИД,17,4) + "-" + Прав(ГУИД,12);
	
	Возврат ГУИД;	
	
КонецФункции

//////////////////////////////////////////////
// Выгрузка данных

Процедура ОчиститьРегистрОшибок() Экспорт
	
	Набор = РегистрыСведений.bitmobile_ОбъектыСОшибками.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

Процедура ВыгрузитьДанные(ВсеДанные = Ложь, ВФайл = Ложь, АдресВХ = "", ВыбраннаяНастройка = Неопределено, ТекстВидОбъекта = "") Экспорт 
	
	НачалоРаботы = ТекущаяДата();
	
	НаборОшибок = РегистрыСведений.bitmobile_ОбъектыСОшибками.СоздатьНаборЗаписей();
	НаборОшибок.Прочитать();
	
	Если Не НаборОшибок.Количество() = 0 Тогда  
		
		Константы.bitmobile_СинхронизацияЗапущена.Установить("");
		Константы.bitmobile_IDВыгрузки.Установить("");
		
		ТекстОшибки = "Регистр ""Объекты с ошибками"" заполнен.";
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: " + ТекстОшибки);
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: " + ТекстОшибки);
		
		СохранитьСтатусВыгрузки(Ложь);
		
		ОтправкаОтчетаОбОшибке("Выгрузка данных", ТекстОшибки);	
				
		Возврат;
		
	Иначе  
		
		ТаблицаОшибок = НаборОшибок.Выгрузить();
		
	КонецЕсли;
		
	Сервер 		= Константы.bitmobile_Сервер.Получить();
	Порт		= Константы.bitmobile_Порт.Получить();
	Путь	 	= Константы.bitmobile_ПутьНаСервере.Получить();
	Пароль 		= Константы.bitmobile_Пароль.Получить();
		
	// Получить таблицу актуальных настроек
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
	    |	ВЫРАЗИТЬ(bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile + ""."" + bitmobile_НастройкиСинхронизации.Наименование КАК СТРОКА) КАК ОбъектBitmobile,
	    |	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile КАК ВидОбъектаBitmobile,
		|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации,
	    |	bitmobile_НастройкиСинхронизации.ПозицияВВыгрузке КАК ПозицияВВыгрузке
	    |ИЗ
	    |	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
	    |ГДЕ
	    |	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
	    |	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ПозицияВВыгрузке";
		
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНастроек.Индексы.Добавить("ОбъектКонфигурации"); 
	ТаблицаНастроек.Индексы.Добавить("ОбъектBitmobile"); 
	
	Если Не ТаблицаНастроек.Найти(0, "ПозицияВВыгрузке") = Неопределено Тогда 
		
		Константы.bitmobile_СинхронизацияЗапущена.Установить("");
		Константы.bitmobile_IDВыгрузки.Установить("");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: Не рассчитан порядок выгрузки.");
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: Не рассчитан порядок выгрузки");
		
		СохранитьСтатусВыгрузки(Ложь);
		
		ОтправкаОтчетаОбОшибке("Выгрузка данных", "Не рассчитан порядок выгрузки");
		
		Возврат;
		
	КонецЕсли;	
	
	Если Не ТаблицаНастроек.Количество() = 0 Тогда 
		
		ТаблицаСвязанныхДанных = Новый ТаблицаЗначений;
		ТаблицаСвязанныхДанных.Колонки.Добавить("Ссылка");
		ТаблицаСвязанныхДанных.Колонки.Добавить("ТипСсылки");
		ТаблицаСвязанныхДанных.Колонки.Добавить("ПозицияВВыгрузке");
		
		Если Не ВсеДанные Тогда  
			
			ДатаВыгрузки = Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Получить();
			
			// Получить копию регистра
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	bitmobile_ИзмененныеДанныеСрезПоследних.Ссылка КАК Ссылка,
				|	ТИПЗНАЧЕНИЯ(bitmobile_ИзмененныеДанныеСрезПоследних.Ссылка) КАК ТипСсылки
				|ИЗ
				|	РегистрСведений.bitmobile_ИзмененныеДанные.СрезПоследних(, Период >= &ДатаВыгрузки) КАК bitmobile_ИзмененныеДанныеСрезПоследних";
				
			Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
				
			Константы.bitmobile_НеподтвержденнаяДатаВыгрузки.Установить(ТекущаяДата());	
				
			КопияРегистра = Запрос.Выполнить().Выгрузить();
			
			Если КопияРегистра.Количество() = 0 Тогда  
			
				Константы.bitmobile_СинхронизацияЗапущена.Установить("");
				Константы.bitmobile_IDВыгрузки.Установить("");
				Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Установить(Константы.bitmobile_НеподтвержденнаяДатаВыгрузки.Получить());
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Строка("Нет объектов для выгрузки, выгрузка данных не выполнена.");
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации("Синхронизация", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация данных выполнена");
								
				Возврат;
				
			КонецЕсли;		
			
			КопияРегистра.Индексы.Добавить("ТипСсылки");
			
			ТаблицаОбъектов = Новый ТаблицаЗначений;
			ТаблицаОбъектов.Колонки.Добавить("Ссылка");
			ТаблицаОбъектов.Колонки.Добавить("ТипСсылки");
			ТаблицаОбъектов.Колонки.Добавить("ПозицияВВыгрузке");
			
			Для Каждого СтрокаНастройки Из ТаблицаНастроек Цикл 
				
				ТаблицаСсылокПоТипу 	= КопияРегистра.Скопировать(Новый Структура("ТипСсылки", Метаданные.НайтиПоПолномуИмени(СтрокаНастройки.ОбъектКонфигурации).СтандартныеРеквизиты.Ссылка.Тип.Типы().Получить(0))); 
				ПараметрМассивСсылок 	= ТаблицаСсылокПоТипу.ВыгрузитьКолонку("Ссылка");
				
				ПроверитьСтрокуСогласноНастройки(ПараметрМассивСсылок, СтрокаНастройки.Ссылка, ТаблицаНастроек, ТаблицаОбъектов, ТаблицаСвязанныхДанных);
				
			КонецЦикла;	
							
		Иначе  
			
			Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Установить(ТекущаяДата());
			
			ТаблицаОбъектов = ПолучитьВсеОбъектыСогласноНастроек(ТаблицаНастроек, ТаблицаСвязанныхДанных, ВыбраннаяНастройка, ТекстВидОбъекта);
					
		КонецЕсли;
		
		Если Не ТаблицаСвязанныхДанных.Количество() = 0 Тогда 
			
			Если Не ВсеДанные Тогда 
				
				ТаблицаСвязанныхДанных.Сортировать("ПозицияВВыгрузке Возр"); 
			
				ИмяФайлаЗапросаСД = ПолучитьИмяВременногоФайла(".xml");
				
				XMLЗаписьСД = Новый ЗаписьXML;
				XMLЗаписьСД.ОткрытьФайл(ИмяФайлаЗапросаСД, "UTF-8");
				XMLЗаписьСД.ЗаписатьОбъявлениеXML();
				
				XMLЗаписьСД.ЗаписатьНачалоЭлемента("Request");
				
				ИмяОбъекта = Неопределено;
				
				Для Каждого СтокаСД Из ТаблицаСвязанныхДанных Цикл 
					
					Если Не ИмяОбъекта = СтокаСД.ТипСсылки Тогда  	
						
						НайденнаяНастройка = ТаблицаНастроек.Найти(СтокаСД.ТипСсылки, "ОбъектКонфигурации");
						
						Если Не НайденнаяНастройка = Неопределено Тогда
						
							Если Не ИмяОбъекта = Неопределено Тогда 
							
								XMLЗаписьСД.ЗаписатьКонецЭлемента();
								
							КонецЕсли;	
							
							ИмяОбъекта = СтокаСД.ТипСсылки;
							
							XMLЗаписьСД.ЗаписатьНачалоЭлемента("Entity");
												
							XMLЗаписьСД.ЗаписатьАтрибут("Name", НайденнаяНастройка.ОбъектBitmobile);
													
						КонецЕсли;
											
					КонецЕсли;		
					
					Если Не НайденнаяНастройка = Неопределено Тогда
				
			      		XMLЗаписьСД.ЗаписатьНачалоЭлемента("Row");		
						
						XMLЗаписьСД.ЗаписатьАтрибут("Id", Строка(СтокаСД.Ссылка.УникальныйИдентификатор()));	
						
			            XMLЗаписьСД.ЗаписатьКонецЭлемента();
						
					КонецЕсли;	
													
				КонецЦикла;
				
				Если Не ИмяОбъекта = Неопределено Тогда 
						
					XMLЗаписьСД.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
									
				XMLЗаписьСД.ЗаписатьКонецЭлемента();
				
				XMLЗаписьСД.Закрыть();
				
				Ответ = ОтправитьНаСерверBitmobile("CheckIfExists", Сервер, Порт, Путь, Пароль, ИмяФайлаЗапросаСД, Ложь);
				
				Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
					ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"", выгрузка данных не выполнена. Код ответа ") + Строка(Ответ);
					
					Константы.bitmobile_СинхронизацияЗапущена.Установить("");
					Константы.bitmobile_IDВыгрузки.Установить("");
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстОшибки;
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ТекстОшибки);
					
					СохранитьСтатусВыгрузки(Ложь);
					
					ОтправкаОтчетаОбОшибке("Выгрузка данных", ТекстОшибки);
					
					Возврат;
										
				КонецЕсли;				
				
				XMLФайлСД = Новый ЧтениеXML; 
				XMLФайлСД.ОткрытьФайл(Ответ, Неопределено, Неопределено, "UTF-8");
					 
				Пока XMLФайлСД.Прочитать() Цикл 

					Если XMLФайлСД.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайлСД.Имя = "Entity" Тогда 

						XMLФайлСД.ПрочитатьАтрибут();
		
						ИмяОбъектаBitmobile = XMLФайлСД.Значение; 
						
						НайденнаяНастройка = ТаблицаНастроек.Найти(ИмяОбъектаBitmobile, "ОбъектBitmobile"); 
						
						Если Не НайденнаяНастройка = Неопределено Тогда 
							
							Менеджер = Неопределено;
							
							Если НайденнаяНастройка.ВидОбъектаBitmobile = "Catalog" Тогда 
								Менеджер = Справочники[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Справочник.", ""), "Catalog.", "")];
						    КонецЕсли;
							
							Если НайденнаяНастройка.ВидОбъектаBitmobile = "Document" Тогда
								Менеджер = Документы[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Документ.", ""), "Document.", "")];
						    КонецЕсли;
							
							Если НЕ Менеджер = Неопределено Тогда 
										
							    Пока XMLФайлСД.Прочитать() Цикл 
									
									Если XMLФайлСД.ТипУзла = ТипУзлаXML.КонецЭлемента И Не XMLФайлСД.Имя = "Row" Тогда 
										Прервать;
									КонецЕсли;

									Если XMLФайлСД.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайлСД.Имя = "Row" Тогда 
										
										XMLФайлСД.ПрочитатьАтрибут();
										
										СсылкаОбъекта = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(XMLФайлСД.Значение));
										
										Вставка 					= ТаблицаОбъектов.Добавить();
										Вставка.Ссылка 				= СсылкаОбъекта; 
							            Вставка.ТипСсылки 			= НайденнаяНастройка.ОбъектКонфигурации;
										Вставка.ПозицияВВыгрузке 	= НайденнаяНастройка.ПозицияВВыгрузке;
										
									КонецЕсли;;

								КонецЦикла;
								
							КонецЕсли;
									
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;
				
				ТаблицаОбъектов.Свернуть("Ссылка, ТипСсылки, ПозицияВВыгрузке"); 	
				
				ТаблицаОбъектов.Сортировать("ПозицияВВыгрузке Возр");
				
			Иначе 
				
				Для Каждого СтрокаСД Из ТаблицаСвязанныхДанных Цикл 
					
					ЗаполнитьЗначенияСвойств(ТаблицаОбъектов.Добавить(), СтрокаСД);
					
				КонецЦикла;
				
				ТаблицаОбъектов.Свернуть("Ссылка, ТипСсылки, ПозицияВВыгрузке"); 	
				
				ТаблицаОбъектов.Сортировать("ПозицияВВыгрузке Возр");
								
			КонецЕсли;
							
		КонецЕсли;		
		
		Если Не ТаблицаОбъектов.Количество() = 0 Тогда 
		
			ТаблицаОбъектов.Индексы.Добавить("ТипСсылки");
			
			Если bitmobile_ОбработчикиСинхронизацииИПодписок.ИспользуетсяАнглийскийЯзык() Тогда 
		
				ИмяПараметраМассивСсылок 	= "&RefArray";
				ИмяПараметраДата			= "&CurrentDate";
				ИмяПоляСсылка 				= "Ref";
				
			Иначе 
				
				ИмяПараметраМассивСсылок 	= "&МассивСсылок";
				ИмяПараметраДата			= "&ТекущаяДата";
				ИмяПоляСсылка 				= "Ссылка";
								
			КонецЕсли;
			
			
			// Подготовить результаты запросов для табличных частей
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
				|	bitmobile_НастройкиСинхронизацииТабличныеЧасти.ТекстЗапроса КАК ТекстЗапроса,
				|	bitmobile_НастройкиСинхронизацииТабличныеЧасти.ТабличнаяЧастьОбъектаКонфигурации КАК ТабличнаяЧастьОбъектаКонфигурации,
				|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации
				|ИЗ
				|	Справочник.bitmobile_НастройкиСинхронизации.ТабличныеЧасти КАК bitmobile_НастройкиСинхронизацииТабличныеЧасти
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
				|		ПО bitmobile_НастройкиСинхронизацииТабличныеЧасти.Ссылка = bitmobile_НастройкиСинхронизации.Ссылка
				|ГДЕ
				|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
				|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА
				|	И bitmobile_НастройкиСинхронизацииТабличныеЧасти.Запрос = ИСТИНА";

			ТаблицаНастроекДляЗапросов = Запрос.Выполнить().Выгрузить();
				
			Если Не ТаблицаНастроекДляЗапросов.Количество() = 0 Тогда 
				
				ТаблицаНастроекДляЗапросов.Колонки.Добавить("ТЗРезультат");
				ТаблицаНастроекДляЗапросов.Колонки.Добавить("НомерПакета");
				
				ТаблицаНастроекДляЗапросов.ЗаполнитьЗначения(Неопределено, "ТЗРезультат");
				ТаблицаНастроекДляЗапросов.ЗаполнитьЗначения(Неопределено, "НомерПакета");
				
				ЗапросДляТЧ = Новый Запрос;
				СчетчикПакетов = 0;
				
				Для Каждого СтрокаНастройки Из ТаблицаНастроекДляЗапросов Цикл 
					
					// Получить объекты настройки
					ОбъектыПоТипу = ТаблицаОбъектов.НайтиСтроки(Новый Структура("ТипСсылки", СтрокаНастройки.ОбъектКонфигурации));
					
					Если НЕ ОбъектыПоТипу.Количество() = 0 Тогда 
						
						СтрокаНастройки.НомерПакета = СчетчикПакетов;
						
						ИмяПараметра = ИмяПараметраМассивСсылок + Строка(СчетчикПакетов);
						
						ВременныйТекстЗапроса = СтрЗаменить(СтрокаНастройки.ТекстЗапроса, ИмяПараметраМассивСсылок, ИмяПараметра); 
									
						ЗапросДляТЧ.Текст = ЗапросДляТЧ.Текст + ВременныйТекстЗапроса + ";";
						ЗапросДляТЧ.УстановитьПараметр(Прав(ИмяПараметра, СтрДлина(ИмяПараметра) - 1), ОбъектыПоТипу); 
						
						СчетчикПакетов = СчетчикПакетов + 1;
						
					КонецЕсли;
							
				КонецЦикла;
				
				ЗапросДляТЧ.Текст = Лев(ЗапросДляТЧ.Текст, СтрДлина(ЗапросДляТЧ.Текст) - 1);
				       
				Если Найти(ЗапросДляТЧ.Текст, ИмяПараметраДата) > 0 Тогда
					
					ЗапросДляТЧ.УстановитьПараметр(Прав(ИмяПараметраДата, СтрДлина(ИмяПараметраДата) - 1), ТекущаяДата());
					
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ЗапросДляТЧ.Текст) Тогда 
					
					МассивРезультатовЗапросов = ЗапросДляТЧ.ВыполнитьПакет();
					
					Для Каждого СтрокаНастройки Из ТаблицаНастроекДляЗапросов Цикл
						
						Если Не СтрокаНастройки.НомерПакета = Неопределено Тогда 
							
							СтрокаНастройки.ТЗРезультат = МассивРезультатовЗапросов.Получить(СтрокаНастройки.НомерПакета).Выгрузить();
							
							СтрокаНастройки.ТЗРезультат.Индексы.Добавить(ИмяПоляСсылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаНастроекДляЗапросов.Индексы.Добавить("Ссылка, ТабличнаяЧастьОбъектаКонфигурации");
			
			ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".xml");
					
			XMLЗапись = Новый ЗаписьXML;
			XMLЗапись.ОткрытьФайл(ИмяФайлаЗапроса, "UTF-8");
			XMLЗапись.ЗаписатьОбъявлениеXML();
			
			XMLЗапись.ЗаписатьНачалоЭлемента("Root");
			
				XMLЗапись.ЗаписатьНачалоЭлемента("Rows");
				
					Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
						
						ТипОбъектаBitmobile = "";
						
						// Получить настройку для объекта
						НайденнаяНастройка = ТаблицаНастроек.Найти(СтрокаОбъекта.ТипСсылки, "ОбъектКонфигурации");
						
						Если НайденнаяНастройка = Неопределено Тогда 
							Продолжить;
						Иначе 
							ТипОбъектаBitmobile = НайденнаяНастройка.ОбъектBitmobile;
						КонецЕсли;
											
						XMLЗапись.ЗаписатьНачалоЭлемента("Row");
						
						    // Записать атрибут _Type
							XMLЗапись.ЗаписатьАтрибут("_Type", ТипОбъектаBitmobile);
							
							// Записать атрибут _RS
							Если СтрокаОбъекта.Ссылка.ПометкаУдаления Тогда
								RS = "3";									
							Иначе 
								RS = "0";
							КонецЕсли;	
													
							XMLЗапись.ЗаписатьАтрибут("_RS", RS);
					        						
							// Записать реквизиты шапки согласно настройки
							Для Каждого СтрокаРеквизита Из НайденнаяНастройка.Ссылка.РеквизитыШапки Цикл
								
								Если ЗначениеЗаполнено(СтрокаРеквизита.РеквизитОбъектаBitmobile) Тогда 
									
									// Обработка удаленных реквизитов
									Попытка
										ЗначениеРеквизита = СтрокаОбъекта.Ссылка[СтрокаРеквизита.РеквизитОбъектаКонфигурации];
									Исключение
										Продолжить;
									КонецПопытки;
																		
									ЗаполнитьRow(XMLЗапись, СтрокаОбъекта, СтрокаРеквизита, ЗначениеРеквизита, Ложь, ТаблицаОшибок);   
									
								КонецЕсли;
														
							КонецЦикла;
							
							// Записать табличные части
							Для Каждого ТабличнаяЧасть Из НайденнаяНастройка.Ссылка.ТабличныеЧасти Цикл
								
								Если ЗначениеЗаполнено(ТабличнаяЧасть.ТабличнаяЧастьОбъектаBitmobile) Тогда 
								
									XMLЗапись.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.ТабличнаяЧастьОбъектаBitmobile);
									
										Если ЗначениеЗаполнено(ТабличнаяЧасть.Ключ) Тогда 
									
											XMLЗапись.ЗаписатьАтрибут("Key", ТабличнаяЧасть.Ключ);
											
										КонецЕсли;
																			
									 	ДанныеДляТабличнойЧасти = Неопределено;
									
										Если ТабличнаяЧасть.Запрос Тогда 
											
											СтруктураПоискаДанных = Новый Структура("Ссылка, ТабличнаяЧастьОбъектаКонфигурации", НайденнаяНастройка.Ссылка, ТабличнаяЧасть.ТабличнаяЧастьОбъектаКонфигурации);
											
											НайденныеДанные = ТаблицаНастроекДляЗапросов.НайтиСтроки(СтруктураПоискаДанных);
											
											Если Не НайденныеДанные.Количество() = 0 Тогда 
											
												ТаблицаДанныхДляТЧ = НайденныеДанные.Получить(0).ТЗРезультат;
												
												Если Не ТаблицаДанныхДляТЧ = Неопределено Тогда 
													
													ДанныеДляТабличнойЧасти = ТаблицаДанныхДляТЧ.Скопировать(Новый Структура(ИмяПоляСсылка, СтрокаОбъекта.Ссылка));
													
												КонецЕсли;
												
											КонецЕсли;
																													
										Иначе
											
											// Обработка удаленных табличных частей
											Попытка
												ДанныеДляТабличнойЧасти = СтрокаОбъекта.Ссылка[ТабличнаяЧасть.ТабличнаяЧастьОбъектаКонфигурации];
											Исключение
												ДанныеДляТабличнойЧасти = Неопределено;
											КонецПопытки;
											
										КонецЕсли;
										
										Если Не ДанныеДляТабличнойЧасти = Неопределено Тогда 
											
										    Для Каждого СтрокаТЧ Из ДанныеДляТабличнойЧасти Цикл 
												
												XMLЗапись.ЗаписатьНачалоЭлемента("Row");
												
													XMLЗапись.ЗаписатьАтрибут("Id", Строка(Новый УникальныйИдентификатор()));
													
													Для Каждого СтрокаРеквизита Из НайденнаяНастройка.Ссылка.РеквизитыТабличныхЧастей Цикл 
														
														Если Не СтрокаРеквизита.ТабличнаяЧастьОбъектаКонфигурации = ТабличнаяЧасть.ТабличнаяЧастьОбъектаКонфигурации Тогда
															Продолжить;
														КонецЕсли;
																											
														Если ЗначениеЗаполнено(СтрокаРеквизита.РеквизитОбъектаBitmobile) Тогда
														
															Если СтрокаРеквизита.РеквизитОбъектаBitmobile = "Ref" И СтрокаРеквизита.СтандартныйРеквизит Тогда
																
																XMLЗапись.ЗаписатьАтрибут(СтрокаРеквизита.РеквизитОбъектаBitmobile, Строка(СтрокаОбъекта.Ссылка.УникальныйИдентификатор()));
																
															Иначе 
																
																// Обработка удаленных реквизитов табличных частей
																Попытка
																	ЗначениеРеквизита = СтрокаТЧ[СтрокаРеквизита.РеквизитОбъектаКонфигурации];
																Исключение
																	Продолжить;	
																КонецПопытки;
																
																ЗаполнитьRow(XMLЗапись, СтрокаОбъекта, СтрокаРеквизита, ЗначениеРеквизита, Истина, ТаблицаОшибок);
																																															
															КонецЕсли;
															
														КонецЕсли;
																																				
													КонецЦикла;
																						
												XMLЗапись.ЗаписатьКонецЭлемента();	
												
											КонецЦикла;
											
										КонецЕсли;
																																	
									XMLЗапись.ЗаписатьКонецЭлемента();	
								
								КонецЕсли;
								
							КонецЦикла;
																		
						XMLЗапись.ЗаписатьКонецЭлемента(); 
						 
					КонецЦикла;
					
				XMLЗапись.ЗаписатьКонецЭлемента();
			
			XMLЗапись.ЗаписатьКонецЭлемента();
			
			XMLЗапись.Закрыть(); 
			
			Если Не ТаблицаОшибок.Количество() = 0 Тогда  
			
				Константы.bitmobile_СинхронизацияЗапущена.Установить("");
				Константы.bitmobile_IDВыгрузки.Установить("");
				
				ТаблицаОшибок.Свернуть("Объект, Описание");
				
				НаборОшибок = РегистрыСведений.bitmobile_ОбъектыСОшибками.СоздатьНаборЗаписей();
				НаборОшибок.Загрузить(ТаблицаОшибок);
				НаборОшибок.Записать();	
				
				ТекстОшибки = "Найдены объекты с ошибками (см. регистр ""Объекты с ошибками"").";
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: " + ТекстОшибки);
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: " + ТекстОшибки);
				
				СохранитьСтатусВыгрузки(Ложь);
				
				ОтправкаОтчетаОбОшибке("Выгрузка данных", ТекстОшибки);
								
			Иначе 
			
				Если Не ВФайл Тогда 		
					
					ИмяZipФайла = ПолучитьИмяВременногоФайла(".zip");
				
					ZipФайл = Новый ЗаписьZipФайла(ИмяZipФайла, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный);
					
					ZipФайл.Добавить(ИмяФайлаЗапроса, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
					
					ZipФайл.Записать();
					
					// Отправка полученного файла на сервер
					Попытка
						
						Ответ = ОтправитьНаСерверBitmobile("UploadData3Async", Сервер, Порт, Путь, Пароль, ИмяZipФайла, Истина, Истина, Истина);
												
						Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
							ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"", выгрузка данных не выполнена. Код ответа ") + Строка(Ответ);
							
							Константы.bitmobile_СинхронизацияЗапущена.Установить("");
							Константы.bitmobile_IDВыгрузки.Установить("");
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ТекстОшибки;
							Сообщение.Сообщить();
							
							ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , ТекстОшибки);
							
							СохранитьСтатусВыгрузки(Ложь);
							
							ОтправкаОтчетаОбОшибке("Выгрузка данных", ТекстОшибки);
							
							Возврат;
												
						КонецЕсли;
												
					Исключение
						
						Константы.bitmobile_СинхронизацияЗапущена.Установить("");
						Константы.bitmobile_IDВыгрузки.Установить("");
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: " + ОписаниеОшибки());
						Сообщение.Сообщить();
						
						ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: " + ОписаниеОшибки());
						
						СохранитьСтатусВыгрузки(Ложь);
						
						ОтправкаОтчетаОбОшибке("Выгрузка данных", ОписаниеОшибки(), ИмяФайлаЗапроса);
						
						Возврат;
						
					КонецПопытки;
					
					Попытка
						
						ПроверкаID = Новый УникальныйИдентификатор(Ответ);
						
						Константы.bitmobile_IDВыгрузки.Установить(Ответ);
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = Строка("Выгрузка данных начата, ID выгрузки: " + Ответ);
						Сообщение.Сообщить();
						
						ЗаписьЖурналаРегистрации("Синхронизация", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных начата, ID выгрузки: " + Ответ);
						
					Исключение
						
						Константы.bitmobile_СинхронизацияЗапущена.Установить("");
						Константы.bitmobile_IDВыгрузки.Установить("");
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: " + ОписаниеОшибки());
						Сообщение.Сообщить();
						
						ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: " + ОписаниеОшибки());
						
						СохранитьСтатусВыгрузки(Ложь);
						
						ОтправкаОтчетаОбОшибке("Выгрузка данных", ОписаниеОшибки(), ИмяФайлаЗапроса);
											
					КонецПопытки;
										
				Иначе  
					
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаЗапроса));
								
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = Строка("Выгрузка данных завершена. Время выполнения - " + Строка(Окр((ТекущаяДата() - НачалоРаботы) / 60, 1)) + " мин.");
					Сообщение.Сообщить();
					
					ЗаписьЖурналаРегистрации("Синхронизация", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных завершена");	
				    									
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			
			Константы.bitmobile_СинхронизацияЗапущена.Установить("");
			Константы.bitmobile_IDВыгрузки.Установить("");
			Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Установить(Константы.bitmobile_НеподтвержденнаяДатаВыгрузки.Получить());
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Нет объектов для выгрузки, выгрузка данных не выполнена.");
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Синхронизация", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация данных выполнена");
						
		КонецЕсли;
		
	Иначе
		
		Константы.bitmobile_СинхронизацияЗапущена.Установить("");
		Константы.bitmobile_IDВыгрузки.Установить("");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка("Выгрузка данных прервана с ошибкой: Нет настроек синхронизации.");
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: Нет настроек для синхронизации");
		
		СохранитьСтатусВыгрузки(Ложь);
		
		ОтправкаОтчетаОбОшибке("Выгрузка данных", "Нет настроек синхронизации");
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьСтрокуСогласноНастройки(ПараметрМассивСсылок, Настройка, ТаблицаНастроек, ТаблицаОбъектов, ТаблицаСвязанныхДанных)
	
	НастройкиКомпоновщика = Настройка.ФильтрВКонфигурации.Получить();
	
	// Объявляем схему
	СКДОбъекта = Новый СхемаКомпоновкиДанных;
      
	ИсточникДанных 						= СКДОбъекта.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных 	= "Local";
	ИсточникДанных.СтрокаСоединения  	= "";
	
	НаборДанных 								= СКДОбъекта.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя 							= "НаборДанных1";
	НаборДанных.Запрос							= "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ " + Настройка.ОбъектКонфигурации + " ГДЕ Ссылка В (&МассивСсылок)";
	НаборДанных.ИсточникДанных 					= "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей 	= Истина;
	
	ПолеСсылка 				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеСсылка.Поле 		= "Ссылка";
	ПолеСсылка.ПутьКДанным 	= "Ссылка";
	ПолеСсылка.Заголовок 	= "Ссылка";
	
	ГруппировкаКомпоновки = СКДОбъекта.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновки.Использование = Истина;
	
	ПолеВыбора = СКДОбъекта.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;	
	
	// Объявляем компоновщик
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДОбъекта));
	
	// Проверка на битый объект метаданных, СКД по непонятным причинам не заполняет доступные поля, отбора по этому объекту нет
	Если Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Количество() > 1 Тогда
	
		Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновщика);
				
		// Установить параметр ссылка
		ПараметрМассив = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МассивСсылок"));
        ПараметрМассив.Использование = Истина;
		ПараметрМассив.Значение = ПараметрМассивСсылок;
				
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКДОбъекта, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	    ВременнаяТаблица = Новый ТаблицаЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	    ПроцессорВывода.УстановитьОбъект(ВременнаяТаблица);
	    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Для Каждого Стр Из ВременнаяТаблица Цикл 

			Вставка 					= ТаблицаОбъектов.Добавить();
			Вставка.Ссылка 				= Стр.Ссылка; 
            Вставка.ТипСсылки 			= Настройка.ОбъектКонфигурации;
			Вставка.ПозицияВВыгрузке 	= Настройка.ПозицияВВыгрузке;
			
			ЗаполнитьСвязанныеДанные(Стр.Ссылка, Настройка, ТаблицаСвязанныхДанных);  	
			
		КонецЦикла;
		
	Иначе 
		
		Для Каждого Стр Из ПараметрМассивСсылок Цикл 

			Вставка 					= ТаблицаОбъектов.Добавить();
			Вставка.Ссылка 				= Стр; 
            Вставка.ТипСсылки 			= Настройка.ОбъектКонфигурации;
			Вставка.ПозицияВВыгрузке 	= Настройка.ПозицияВВыгрузке;
			
			ЗаполнитьСвязанныеДанные(Стр, Настройка, ТаблицаСвязанныхДанных);
			
		КонецЦикла;
		
	КонецЕсли;	
				
КонецПроцедуры

Процедура ЗаполнитьСвязанныеДанные(Ссылка, Настройка, ТаблицаСвязанныхДанных)
	
	Для Каждого СтрокаСвязанныхДанных Из Настройка.СвязанныеДанные Цикл 
		
		Если ЗначениеЗаполнено(СтрокаСвязанныхДанных.ИмяРеквизита) Тогда 
		
			Если ЗначениеЗаполнено(СтрокаСвязанныхДанных.ИмяТЧ) Тогда 
				
				Для Каждого СтрокаТЧ Из Ссылка[СтрокаСвязанныхДанных.ИмяТЧ] Цикл 
					
					СвязаннаяСсылка = СтрокаТЧ[СтрокаСвязанныхДанных.ИмяРеквизита];
					
					Если ЗначениеЗаполнено(СвязаннаяСсылка) Тогда 
						
						НайденныйЭлемент = ТаблицаСвязанныхДанных.Найти(СвязаннаяСсылка, "Ссылка");
						
						Если НайденныйЭлемент = Неопределено Тогда 
						
							ВставкаСД 					= ТаблицаСвязанныхДанных.Добавить();
							ВставкаСД.Ссылка 			= СвязаннаяСсылка; 
				            ВставкаСД.ТипСсылки 		= СтрокаСвязанныхДанных.Настройка.ОбъектКонфигурации;
							ВставкаСД.ПозицияВВыгрузке 	= СтрокаСвязанныхДанных.Настройка.ПозицияВВыгрузке;
							
							ЗаполнитьСвязанныеДанные(СтрокаТЧ[СтрокаСвязанныхДанных.ИмяРеквизита], СтрокаСвязанныхДанных.Настройка, ТаблицаСвязанныхДанных);
							
						КонецЕсли;	
							
					КонецЕсли;
					
				КонецЦикла;
							
			Иначе 
				
				СвязаннаяСсылка = Ссылка[СтрокаСвязанныхДанных.ИмяРеквизита];
					
				Если ЗначениеЗаполнено(СвязаннаяСсылка) Тогда
					
					НайденныйЭлемент = ТаблицаСвязанныхДанных.Найти(СвязаннаяСсылка, "Ссылка");
						
					Если НайденныйЭлемент = Неопределено Тогда
					
						ВставкаСД 					= ТаблицаСвязанныхДанных.Добавить();
						ВставкаСД.Ссылка 			= СвязаннаяСсылка; 
			            ВставкаСД.ТипСсылки 		= СтрокаСвязанныхДанных.Настройка.ОбъектКонфигурации;
						ВставкаСД.ПозицияВВыгрузке 	= СтрокаСвязанныхДанных.Настройка.ПозицияВВыгрузке;
						
						ЗаполнитьСвязанныеДанные(Ссылка[СтрокаСвязанныхДанных.ИмяРеквизита], СтрокаСвязанныхДанных.Настройка, ТаблицаСвязанныхДанных);
						
					КонецЕсли;
					
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;	
						
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьRow(XMLЗапись, СтрокаОбъекта, ДанныеРеквизита, ЗначениеРеквизита, ЭтоРеквизитыТЧ = Ложь, ТаблицаОшибок = Неопределено)
	
	Если Не ТаблицаОшибок = Неопределено Тогда 
	
		Если ДанныеРеквизита.ПроверятьЗаполнение И Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
			
			ВставкаОшибки 				= ТаблицаОшибок.Добавить();
			ВставкаОшибки.Объект 		= СтрокаОбъекта.Ссылка;
			
			Если ЭтоРеквизитыТЧ Тогда 
				
				ВставкаОшибки.Описание	= "Не заполнен реквизит " + ДанныеРеквизита.ТабличнаяЧастьОбъектаКонфигурации + "." + ДанныеРеквизита.РеквизитОбъектаКонфигурации + " ";
				
			Иначе 
				
				ВставкаОшибки.Описание	= "Не заполнен реквизит " + ДанныеРеквизита.РеквизитОбъектаКонфигурации + " ";
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДанныеРеквизита.ПриводитьКСтроке Тогда 
	
		ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
		
		Если ТипЗначенияРеквизита = Тип("Булево") Тогда 
				
			Если ЗначениеРеквизита Тогда
					
		    	XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "True");
					
			Иначе  
					
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "False");
					
			КонецЕсли;
					
		ИначеЕсли ТипЗначенияРеквизита = Тип("Дата") Тогда 
					
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, Строка(ЗначениеРеквизита));
							
		ИначеЕсли ТипЗначенияРеквизита = Тип("Число") Тогда 
					
		    ЗначениеРеквизита = Строка(ЗначениеРеквизита);
	        ЗначениеРеквизита =  СтрЗаменить(ЗначениеРеквизита, " ", "");
	        ЗначениеРеквизита =  СтрЗаменить(ЗначениеРеквизита, Символы.НПП, "");
	        XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, ЗначениеРеквизита);
					
		ИначеЕсли ТипЗначенияРеквизита = Тип("Null") Тогда  
				
			Если ДанныеРеквизита.ТипРеквизита = "Булево" Тогда 
				
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "False");
				
			ИначеЕсли ДанныеРеквизита.ТипРеквизита = "Дата" Тогда 
				
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, Строка(Дата(1,1,1)));
				
			ИначеЕсли ДанныеРеквизита.ТипРеквизита = "Число" Тогда
				
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "0");
				
			ИначеЕсли ДанныеРеквизита.ТипРеквизита = "Строка" Тогда
				
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "");
				
			Иначе 
				
				XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "00000000-0000-0000-0000-000000000000");
				
			КонецЕсли;
				
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначенияРеквизита) Тогда
				
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, ГУИДИзЗначенияПеречисления(ЗначениеРеквизита));
				
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначенияРеквизита) Или Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияРеквизита) Тогда 
			
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, Строка(ЗначениеРеквизита.УникальныйИдентификатор()));
							
		Иначе  
				
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, Строка(ЗначениеРеквизита));	
					
		КонецЕсли;
		
	Иначе 
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, "");
			
		Иначе 
			
			XMLЗапись.ЗаписатьАтрибут(ДанныеРеквизита.РеквизитОбъектаBitmobile, Лев(Строка(ЗначениеРеквизита), 500));
						
		КонецЕсли;	
		
	КонецЕсли;	
			
КонецПроцедуры

Функция ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, IDОкна = Неопределено, ОшибкаСоединения = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(IDВыгрузки) Тогда 
		
		Возврат "Не указан ID выгрузки";
		
	КонецЕсли;

	Попытка
				
	    Сервер 		= Константы.bitmobile_Сервер.Получить();
		Порт		= Константы.bitmobile_Порт.Получить();
		Путь	 	= Константы.bitmobile_ПутьНаСервере.Получить();
		Пароль 		= Константы.bitmobile_Пароль.Получить();
		IDВыгрузки 	= ВРег(IDВыгрузки);
		
		Ответ = ОтправитьНаСерверBitmobile("AsyncTaskStatus/" + IDВыгрузки, Сервер, Порт, Путь, Пароль, Неопределено, Истина, Ложь);
		
		Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
			ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"". Код ответа ") + Строка(Ответ);
			
			Константы.bitmobile_СинхронизацияЗапущена.Установить("");
			Константы.bitmobile_IDВыгрузки.Установить("");
			
			Если Не IDОкна = Неопределено Тогда 
		
				Сообщение = Новый СообщениеПользователю;
				Сообщение.ИдентификаторНазначения = IDОкна;
				Сообщение.Текст = "Проверка статуса выгрузки данных прервана с ошибкой: " + ТекстОшибки;
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Проверка статуса выгрузки данных прервана с ошибкой: " + ТекстОшибки);
			
			Ответ = Строка(Ответ);
			
			ОшибкаСоединения = Истина;
			
		Иначе
				
			Если Ответ = "ok" Тогда 
				
				Константы.bitmobile_СинхронизацияЗапущена.Установить("");
				Константы.bitmobile_IDВыгрузки.Установить("");
				Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Установить(Константы.bitmobile_НеподтвержденнаяДатаВыгрузки.Получить());
				
				Если Не IDОкна = Неопределено Тогда 
				
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ИдентификаторНазначения = IDОкна;
					Сообщение.Текст = "Выгрузка данных завершена.";
					Сообщение.Сообщить();
					
				КонецЕсли;	
				
				ЗаписьЖурналаРегистрации("Синхронизация", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация данных выполнена");
				
				СохранитьСтатусВыгрузки(Истина);
										
			Иначе 
						
				Если Не Ответ = "processing" Тогда
				
					Константы.bitmobile_СинхронизацияЗапущена.Установить("");
					Константы.bitmobile_IDВыгрузки.Установить("");
					
					Если Не IDОкна = Неопределено Тогда 
				
						Сообщение = Новый СообщениеПользователю;
						Сообщение.ИдентификаторНазначения = IDОкна;
						Сообщение.Текст = "Выгрузка данных прервана с ошибкой: " + Ответ;
						Сообщение.Сообщить();
						
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Выгрузка данных прервана с ошибкой: " + Ответ);
					
					СохранитьСтатусВыгрузки(Ложь);
					
				Иначе 
					
					Если Не IDОкна = Неопределено Тогда 
				
						Сообщение = Новый СообщениеПользователю;
						Сообщение.ИдентификаторНазначения = IDОкна;
						Сообщение.Текст = "Выгрузка данных выполняется.";
						Сообщение.Сообщить();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	Исключение
			
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Проверка статуса выгрузки данных прервана с ошибкой: " + ОписаниеОшибки());
				
		Ответ = ОписаниеОшибки();
		
		ОшибкаСоединения = Истина;
		
	КонецПопытки;	
	
	Возврат Ответ;
		
КонецФункции

Функция ПолучитьВсеОбъектыСогласноНастроек(ТаблицаНастроек, ТаблицаСвязанныхДанных, ВыбраннаяНастройка, ТекстВидОбъекта)
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаОбъектов.Колонки.Добавить("ТипСсылки");
	ТаблицаОбъектов.Колонки.Добавить("ПозицияВВыгрузке");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл 
		
		Если СтрокаТаблицы.Ссылка.БлокироватьПриПолнойВыгрузкеДанных Тогда 
			Продолжить;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекстВидОбъекта) Тогда
			Если Не ТекстВидОбъекта = СтрокаТаблицы.ВидОбъектаBitmobile Тогда 
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыбраннаяНастройка) Тогда
			Если Не ВыбраннаяНастройка = СтрокаТаблицы.Ссылка Тогда 
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		НастройкиКомпоновщика = СтрокаТаблицы.Ссылка.ФильтрВКонфигурации.Получить();
		
		// Объявляем схему
		СКДОбъекта = Новый СхемаКомпоновкиДанных;
	      
		ИсточникДанных 						= СКДОбъекта.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя 					= "ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных 	= "Local";
		ИсточникДанных.СтрокаСоединения  	= "";
		
		НаборДанных 								= СКДОбъекта.НаборыДанных.Добавить(ТИП("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Имя 							= "НаборДанных1";
		НаборДанных.Запрос							= "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ " + СтрокаТаблицы.ОбъектКонфигурации;
		НаборДанных.ИсточникДанных 					= "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей 	= Истина;
		
		ПолеСсылка 				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеСсылка.Поле 		= "Ссылка";
		ПолеСсылка.ПутьКДанным 	= "Ссылка";
		ПолеСсылка.Заголовок 	= "Ссылка";
		
		ГруппировкаКомпоновки = СКДОбъекта.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаКомпоновки.Использование = Истина;
		
		ПолеВыбора = СКДОбъекта.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеВыбора.Использование = Истина;	
		
		// Объявляем компоновщик
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДОбъекта));
		
		// Проверка на битый объект метаданных, СКД по непонятным причинам не заполняет доступные поля, отбора по этому объекту нет
		Если Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Количество() > 1 Тогда 
		
			Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновщика);
					
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКДОбъекта, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

		    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

		    ВременнаяТаблица = Новый ТаблицаЗначений;
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

		    ПроцессорВывода.УстановитьОбъект(ВременнаяТаблица);
		    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Для Каждого Стр Из ВременнаяТаблица Цикл 

				Вставка 					= ТаблицаОбъектов.Добавить();
				Вставка.Ссылка 				= Стр.Ссылка; 
	            Вставка.ТипСсылки 			= СтрокаТаблицы.ОбъектКонфигурации;
				Вставка.ПозицияВВыгрузке 	= СтрокаТаблицы.ПозицияВВыгрузке;
				
				ЗаполнитьСвязанныеДанные(Стр.Ссылка, СтрокаТаблицы.Ссылка, ТаблицаСвязанныхДанных);
				
			КонецЦикла;
			
		Иначе 
			
			ЗапросНаВсеОбъекты = Новый Запрос;
			ЗапросНаВсеОбъекты.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ " + СтрокаТаблицы.ОбъектКонфигурации;
			
			ВременнаяТаблица = ЗапросНаВсеОбъекты.Выполнить().Выгрузить();
			
			Для Каждого Стр Из ВременнаяТаблица Цикл 

				Вставка 					= ТаблицаОбъектов.Добавить();
				Вставка.Ссылка 				= Стр.Ссылка; 
	            Вставка.ТипСсылки 			= СтрокаТаблицы.ОбъектКонфигурации;
				Вставка.ПозицияВВыгрузке 	= СтрокаТаблицы.ПозицияВВыгрузке;
				
				ЗаполнитьСвязанныеДанные(Стр.Ссылка, СтрокаТаблицы.Ссылка, ТаблицаСвязанныхДанных);
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;
		
	Возврат ТаблицаОбъектов;	
		
КонецФункции

//////////////////////////////////////////////
// Загрузка данных

Процедура ЗагрузитьДанные() Экспорт 
 
    // Новая сессия
	IDСессии = Строка(Новый УникальныйИдентификатор);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(); 

	XMLФайл = Новый ЗаписьXML;
	XMLФайл.ОткрытьФайл(ИмяФайлаЗапроса, "UTF-8");
	XMLФайл.ЗаписатьОбъявлениеXML();
		XMLФайл.ЗаписатьНачалоЭлемента("Request");
			XMLФайл.ЗаписатьАтрибут("Session", IDСессии);
       
			// Получить таблицу актуальных настроек
			Запрос = Новый Запрос;
			Запрос.Текст = 
			    "ВЫБРАТЬ
			    |	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
			    |	ВЫРАЗИТЬ(bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile + ""."" + bitmobile_НастройкиСинхронизации.Наименование КАК СТРОКА) КАК ОбъектBitmobile,
			    |	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации,
			    |	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile КАК ВидОбъектаBitmobile
			    |ИЗ
			    |	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
			    |ГДЕ
			    |	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
			    |	И bitmobile_НастройкиСинхронизации.ЗагрузкаДанных = ИСТИНА
			    |
			    |УПОРЯДОЧИТЬ ПО
			    |	bitmobile_НастройкиСинхронизации.ПозицияВВыгрузке";
				
			ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		
			Для Каждого СтрокаНастройки Из ТаблицаНастроек Цикл 
			    XMLФайл.ЗаписатьНачалоЭлемента("Entity");
			        XMLФайл.ЗаписатьАтрибут("Name", СтрокаНастройки.ОбъектBitmobile);
			    XMLФайл.ЗаписатьКонецЭлемента();
			КонецЦикла;
       
		XMLФайл.ЗаписатьКонецЭлемента();
	XMLФайл.Закрыть();
	 
	Сервер 		= Константы.bitmobile_Сервер.Получить();
	Порт		= Константы.bitmobile_Порт.Получить();
	Путь	 	= Константы.bitmobile_ПутьНаСервере.Получить();
	Пароль 		= Константы.bitmobile_Пароль.Получить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = ОтправитьНаСерверBitmobile("DownloadData", Сервер, Порт, Путь, Пароль, ИмяФайлаЗапроса, Ложь);
		
		Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
			ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"". Код ответа ") + Строка(Ответ);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Загрузка данных прервана с ошибкой: " + ТекстОшибки);
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Загрузка данных прервана с ошибкой: " + ТекстОшибки);
			
			ОтправкаОтчетаОбОшибке("Загрузка данных", ТекстОшибки);
			
			ОтменитьТранзакцию();
			
			СохранитьСтатусЗагрузки(Ложь);
			
			Возврат;
			
		КонецЕсли;	
				
		XMLФайл = Новый ЧтениеXML; 
		XMLФайл.ОткрытьФайл(Ответ, Неопределено, Неопределено, "UTF-8");
			 
		ТаблицаIDПеречислений = СоздатьТаблицуIDПеречислений();  
				
		ДатаВыгрузки = Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Получить();
			
		// Получить копию регистра
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	bitmobile_ИзмененныеДанныеСрезПоследних.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.bitmobile_ИзмененныеДанные.СрезПоследних(, Период >= &ДатаВыгрузки) КАК bitmobile_ИзмененныеДанныеСрезПоследних";
			
		Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
			
		ТаблицаИзмененныхОбъектов = Запрос.Выполнить().Выгрузить();
		
		// Очистить регистр измененных данных при загрузке
		Набор = РегистрыСведений.bitmobile_ИзмененныеДанныеПриЗагрузке.СоздатьНаборЗаписей();
		Набор.Записать();
		
		МенеджерЗаписиПриЗагрузке = РегистрыСведений.bitmobile_ИзмененныеДанныеПриЗагрузке.СоздатьМенеджерЗаписи();
		
		Пока XMLФайл.Прочитать() Цикл 

			Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайл.Имя = "Entity" Тогда 

				ПрочитатьЭлементы(XMLФайл, ТаблицаIDПеречислений, ТаблицаНастроек, ТаблицаИзмененныхОбъектов, МенеджерЗаписиПриЗагрузке);

			КонецЕсли;

		КонецЦикла;
		
		// Очистить регистр измененных данных при загрузке
		Набор = РегистрыСведений.bitmobile_ИзмененныеДанныеПриЗагрузке.СоздатьНаборЗаписей();
		Набор.Записать();
					     
		// Завершить сессию
		XMLФайл = New ЗаписьXML;
		XMLФайл.ОткрытьФайл(ИмяФайлаЗапроса, "UTF-8");
		XMLФайл.ЗаписатьОбъявлениеXML();
			XMLФайл.ЗаписатьНачалоЭлемента("Request");
				XMLФайл.ЗаписатьАтрибут("Session", IDСессии);
			XMLФайл.ЗаписатьКонецЭлемента();
		XMLФайл.Закрыть();

		Ответ = ОтправитьНаСерверBitmobile("DownloadDataCommit", Сервер, Порт, Путь, Пароль, ИмяФайлаЗапроса);
		
		Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
			ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"". Код ответа ") + Строка(Ответ);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Загрузка данных прервана с ошибкой: " + ТекстОшибки);
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Загрузка данных прервана с ошибкой: " + ТекстОшибки);
			
			ОтправкаОтчетаОбОшибке("Загрузка данных", ТекстОшибки);
			
			ОтменитьТранзакцию();
			
			СохранитьСтатусЗагрузки(Ложь);
			
			Возврат;
			
		КонецЕсли;
		
		Если Не Ответ = "ok" Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Загрузка данных прервана с ошибкой: " + Ответ);
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Загрузка данных прервана с ошибкой: " + Ответ);
			
			ОтправкаОтчетаОбОшибке("Загрузка данных", Ответ, ИмяФайлаЗапроса);
			
			ОтменитьТранзакцию();
			
			СохранитьСтатусЗагрузки(Ложь);
			
		Иначе 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Загрузка данных завершена.");
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Синхронизации", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Загрузка данных завершена");
			
			ЗафиксироватьТранзакцию();
			
			СохранитьСтатусЗагрузки(Истина);
			
		КонецЕсли;
				
	Исключение	

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка("Загрузка данных прервана с ошибкой: " + ОписаниеОшибки());
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Загрузка данных прервана с ошибкой: " + ОписаниеОшибки());
		
		ОтправкаОтчетаОбОшибке("Загрузка данных", ОписаниеОшибки(), ИмяФайлаЗапроса);
		
		ОтменитьТранзакцию();
		
		СохранитьСтатусЗагрузки(Ложь);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьЭлементы(XMLФайл, ТаблицаIDПеречислений, ТаблицаНастроек, ТаблицаИзмененныхОбъектов, МенеджерЗаписиПриЗагрузке)
	
	XMLФайл.ПрочитатьАтрибут();
	
	ИмяОбъектаBitmobile = XMLФайл.Значение; 
	
	НайденнаяНастройка = ТаблицаНастроек.Найти(ИмяОбъектаBitmobile, "ОбъектBitmobile"); 
	
	Если Не НайденнаяНастройка = Неопределено Тогда 
		
		Менеджер = Неопределено;
		
		Если НайденнаяНастройка.ВидОбъектаBitmobile = "Catalog" Тогда 
			Менеджер = Справочники[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Справочник.", ""), "Catalog.", "")];
	    КонецЕсли;
		
		Если НайденнаяНастройка.ВидОбъектаBitmobile = "Document" Тогда
			Менеджер = Документы[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Документ.", ""), "Document.", "")];
	    КонецЕсли;
			
		Если НЕ Менеджер = Неопределено Тогда 
					
		    Пока XMLФайл.Прочитать() Цикл 
				
				Если XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
					Прервать;
				КонецЕсли;

				Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайл.Имя = "Row" Тогда 
					ПрочитатьЭлемент(XMLФайл, НайденнаяНастройка, Менеджер, НайденнаяНастройка.ВидОбъектаBitmobile, ТаблицаIDПеречислений, ТаблицаИзмененныхОбъектов, МенеджерЗаписиПриЗагрузке);
				КонецЕсли;;

			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьЭлемент(XMLФайл, НайденнаяНастройка, Менеджер, ВидОбъекта, ТаблицаIDПеречислений, ТаблицаИзмененныхОбъектов, МенеджерЗаписиПриЗагрузке)
	
	НеобходимаЗапись = Ложь;
	
	Поля = Новый СписокЗначений;	
	
	Пока XMLФайл.ПрочитатьАтрибут() Цикл 
		Поля.Добавить(XMLФайл.Имя, XMLФайл.Значение);
	КонецЦикла;
	
	СсылкаОбъекта = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Поля.НайтиПоЗначению("Id").Представление));
    ОбъектДляОбработки = СсылкаОбъекта.ПолучитьОбъект();
	
	Если ОбъектДляОбработки = Неопределено Тогда 
		
       Если ВидОбъекта = "Catalog" Тогда  
           ОбъектДляОбработки = Менеджер.СоздатьЭлемент();
           ОбъектДляОбработки.УстановитьСсылкуНового(СсылкаОбъекта);
       ИначеЕсли ВидОбъекта = "Document" Тогда  
           ОбъектДляОбработки = Менеджер.СоздатьДокумент();
           ОбъектДляОбработки.УстановитьСсылкуНового(СсылкаОбъекта);
       КонецЕсли;
	   
	КонецЕсли;
	
    // Сформировать таблицу полей настройки
	ТаблицаПолейНастройки = НайденнаяНастройка.Ссылка.РеквизитыШапки.Выгрузить();
		
    ПрименитьЗначения(НеобходимаЗапись, НайденнаяНастройка, ОбъектДляОбработки, Поля, ТаблицаIDПеречислений, ВидОбъекта, ТаблицаПолейНастройки);
    
    Пока XMLФайл.Прочитать() Цикл 
  
        Если XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
            Прервать;
        КонецЕсли;
    
	    Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			
			// Сформировать таблицу полей настройки ТЧ
			ТабличнаяЧастьНастройки = НайденнаяНастройка.Ссылка.ТабличныеЧасти.Найти(XMLФайл.Имя, "ТабличнаяЧастьОбъектаBitmobile");
			
			ИмяТЧОбъектаКонфигурации = ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаКонфигурации;
								
			ТаблицаПолейНастройкиТЧ = НайденнаяНастройка.Ссылка.РеквизитыТабличныхЧастей.Выгрузить(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", ИмяТЧОбъектаКонфигурации));
					        
	        Пока XMLФайл.Прочитать() Цикл
	            
	            Если XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента И XMLФайл.Имя = ТабличнаяЧастьНастройки.ТабличнаяЧастьОбъектаBitmobile Тогда 
	                Прервать;
	            КонецЕсли;
	            
	            Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайл.Имя = "Row" Тогда 
	    				
					Если Не ТабличнаяЧастьНастройки.Запрос Тогда
					
						ПоляТЧ = Новый СписокЗначений;	
						
						Пока XMLФайл.ПрочитатьАтрибут() Цикл 
	    					ПоляТЧ.Добавить(XMLФайл.Имя, XMLФайл.Значение);
						КонецЦикла;
						
						Попытка
							НомерСтр = ПоляТЧ.НайтиПоЗначению("LineNumber");
							Если Не НомерСтр = Неопределено Тогда  
								СтрТЧ = ОбъектДляОбработки[ИмяТЧОбъектаКонфигурации].Получить(Число(НомерСтр.Представление) - 1);
							Иначе  
								СтрТЧ = ОбъектДляОбработки[ИмяТЧОбъектаКонфигурации].Добавить();
								НеобходимаЗапись = Истина;
							КонецЕсли;
						Исключение
							СтрТЧ = ОбъектДляОбработки[ИмяТЧОбъектаКонфигурации].Добавить();
							НеобходимаЗапись = Истина;
						КонецПопытки;
											
	    				ПрименитьЗначения(НеобходимаЗапись, НайденнаяНастройка, СтрТЧ, ПоляТЧ, ТаблицаIDПеречислений, ВидОбъекта, ТаблицаПолейНастройкиТЧ, Истина);
						
					КонецЕсли;	
						
    				XMLФайл.Прочитать();
    				
    			КонецЕсли;
    			
    		КонецЦикла;
    		
    	КонецЕсли;

	КонецЦикла;
	
	Если НеобходимаЗапись Тогда 

		// Блок обработчиков выполняемых перед записью объекта 
		ОбъектДляОбработки = SyncSuperAgent.CheckEntity(ОбъектДляОбработки);
		// Конец блока обработчиков выполняемых перед записью объекта
		
		Если Не ОбъектДляОбработки.ЭтоНовый() Тогда 
			
			// Проверить на наличие ссылки в регистре измененных данных
			ИзмененнаяЗапись = ТаблицаИзмененныхОбъектов.Найти(СсылкаОбъекта, "Ссылка");
			
			// Проверить что запись не менялась во время загрузки данных 
			МенеджерЗаписиПриЗагрузке.Ссылка = СсылкаОбъекта;
			МенеджерЗаписиПриЗагрузке.Прочитать();
			
			Если ИзмененнаяЗапись = Неопределено И Не МенеджерЗаписиПриЗагрузке.Выбран() Тогда 
				
				ОбъектДляОбработки.ДополнительныеСвойства.Вставить("ЗагрузкаBitmobile", Истина);
							
			Иначе 
				
				НеобходимаЗапись = Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если НеобходимаЗапись Тогда
		
			ОбъектДляОбработки.Записать();
			
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрименитьЗначения(НеобходимаЗапись, НайденнаяНастройка, ОбъектДляОбработки, Поля, ТаблицаIDПеречислений, ВидОбъекта, ТаблицаПолейНастройки, ЭтоТЧ = Ложь)
	
	ЭтоПапка = Ложь; 
	
	Если Не ЭтоТЧ Тогда 
		
		Если ВидОбъекта = "Catalog" И ОбъектДляОбработки.Метаданные().Иерархический Тогда 
			
			ЭтоПапка = ОбъектДляОбработки.ЭтоГруппа;
									
		КонецЕсли;
		
	КонецЕсли;	
	
	Для Каждого ПолеНастройки Из ТаблицаПолейНастройки Цикл 
		
		Если Не ЗначениеЗаполнено(ПолеНастройки.РеквизитОбъектаBitmobile) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолеНастройки.ПриводитьКСтроке Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолеНастройки.РеквизитОбъектаBitmobile = "Id" 
		 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Ref" 
		 Или ПолеНастройки.РеквизитОбъектаBitmobile = "LineNumber" 
		 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Code" 
		 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Number" Тогда
		 
		 	Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			ТестОшибки = ОбъектДляОбработки[ПолеНастройки.РеквизитОбъектаКонфигурации];
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
		Если ЭтоПапка Тогда  
			
			Если Не (ПолеНастройки.РеквизитОбъектаBitmobile = "Description" 
				 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Parent" 
				 Или ПолеНастройки.РеквизитОбъектаBitmobile = "IsFolder" 
				 Или ПолеНастройки.РеквизитОбъектаBitmobile = "DeletionMark" 
				 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Owner"
				 Или ПолеНастройки.РеквизитОбъектаBitmobile = "Predefined") Тогда 
					
				Продолжить;
				
			КонецЕсли;
						
		КонецЕсли;
		
		Поле = Поля.НайтиПоЗначению(ПолеНастройки.РеквизитОбъектаBitmobile);
		
		Если Поле = Неопределено Тогда
					
			Продолжить;
			
		КонецЕсли;
				
		Если ПолеНастройки.ТипРеквизита = "Дата" Тогда 
			
			Если СтрДлина(Поле.Представление) = 23 Тогда 
				
				Поле.Представление = Сред(Поле.Представление, 1, 19);
				
			КонецЕсли;
			
			ВременноеЗначение = Дата(Лев(СтрЗаменить(СтрЗаменить(СтрЗаменить(Поле.Представление, "-", ""), ":", ""), "T", ""), 14)); 
						
		ИначеЕсли ПолеНастройки.ТипРеквизита = "Булево" Тогда 
			
			Если Поле.Представление = "1" Тогда
				
				ВременноеЗначение = Истина;
				
			Иначе 
				
				ВременноеЗначение = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ПолеНастройки.ТипРеквизита = "УникальныйИдентификатор" Тогда 
			
		    ВременноеЗначение = Новый УникальныйИдентификатор(Поле.Представление);
			
		ИначеЕсли ПолеНастройки.ТипРеквизита = "Число" Тогда 
			
			ВременноеЗначение = Число(Поле.Представление);
			
		Иначе 				
			
			Если Лев(ПолеНастройки.ТипРеквизита, 13) = "Перечисление." Или Лев(ПолеНастройки.ТипРеквизита, 5) = "Enum." Тогда
			
				Менеджер = Перечисления[СтрЗаменить(СтрЗаменить(ПолеНастройки.ТипРеквизита, "Перечисление.", ""), "Enum.", "")];
				
				ВременноеЗначение = ТаблицаIDПеречислений.Найти(НРег(Поле.Представление), "ID").Ссылка;
    							
			ИначеЕсли Лев(ПолеНастройки.ТипРеквизита, 11) = "Справочник." Или Лев(ПолеНастройки.ТипРеквизита, 8) = "Catalog." Тогда
				
				Менеджер = Справочники[СтрЗаменить(СтрЗаменить(ПолеНастройки.ТипРеквизита, "Справочник.", ""), "Catalog.", "")];
				
				ВременноеЗначение = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Поле.Представление));
				
			ИначеЕсли Лев(ПолеНастройки.ТипРеквизита, 9) = "Документ." Или Лев(ПолеНастройки.ТипРеквизита, 9) = "Document." Тогда	
				
				Менеджер = Документы[СтрЗаменить(СтрЗаменить(ПолеНастройки.ТипРеквизита, "Документ.", ""), "Document.", "")];
				
				ВременноеЗначение = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Поле.Представление));
			
			Иначе 
			
				ВременноеЗначение = Поле.Представление;
				
			КонецЕсли;	
						
		КонецЕсли;
					
		Если Не ОбъектДляОбработки[ПолеНастройки.РеквизитОбъектаКонфигурации] = ВременноеЗначение Тогда 
			
			ОбъектДляОбработки[ПолеНастройки.РеквизитОбъектаКонфигурации] = ВременноеЗначение;
			НеобходимаЗапись = Истина;
			
		КонецЕсли;
        	
	КонецЦикла;
		
КонецПроцедуры

Функция СоздатьТаблицуIDПеречислений()  

    ТаблицаIDПеречислений = Новый ТаблицаЗначений;
    ТаблицаIDПеречислений.Колонки.Добавить("Ссылка");
    ТаблицаIDПеречислений.Колонки.Добавить("ID");
   
	// Получить перечисления используемые в настройках
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_СоответствиеПеречислений.ИмяВКонфигурации,
		|	bitmobile_СоответствиеПеречислений.ИмяВBitmobile
		|ИЗ
		|	РегистрСведений.bitmobile_СоответствиеПеречислений КАК bitmobile_СоответствиеПеречислений";

	ТаблицаСоостветствийПеречислений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПеречисления Из ТаблицаСоостветствийПеречислений Цикл 
		                                                 
		Для Каждого ЗначениеПеречисления Из Перечисления[СтрЗаменить(СтрЗаменить(СтрокаПеречисления.ИмяВКонфигурации, "Перечисление.", ""), "Enum.", "")] Цикл 
			
			Вставка 		= ТаблицаIDПеречислений.Добавить();
			Вставка.Ссылка 	= ЗначениеПеречисления;
			Вставка.ID 		= ГУИДИзЗначенияПеречисления(ЗначениеПеречисления);
			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат ТаблицаIDПеречислений;

КонецФункции

//////////////////////////////////////////////
// Синхронизация удаленных данных

Процедура СинхронизироватьУдаленныеДанные(СинхронизацияВыполнена) Экспорт  
	
	Сервер 	= Константы.bitmobile_Сервер.Получить();
	Порт	= Константы.bitmobile_Порт.Получить();
	Путь 	= Константы.bitmobile_ПутьНаСервере.Получить();
	Пароль 	= Константы.bitmobile_Пароль.Получить();
	
	// Получить таблицу актуальных настроек
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка,
	    |	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile КАК ВидОбъектаBitmobile,
	    |	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации,
	    |	ВЫРАЗИТЬ(bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile + ""."" + bitmobile_НастройкиСинхронизации.Наименование КАК СТРОКА) КАК ОбъектBitmobile
	    |ИЗ
	    |	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
	    |ГДЕ
	    |	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
	    |	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА";
		
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	Попытка
				
		Ответ = ОтправитьНаСерверBitmobile("DownloadDeleted", Сервер, Порт, Путь, Пароль, Неопределено, Ложь, Ложь);
		
		Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
			ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"". Код ответа ") + Строка(Ответ);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка("Синхронизация удаленных данных прервана с ошибкой: " + ТекстОшибки);
			Сообщение.Сообщить();
			
			ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация удаленных данных прервана с ошибкой: " + ТекстОшибки);
		    			
			Возврат;
			
		КонецЕсли;
				
		XMLФайл = Новый ЧтениеXML; 
		XMLФайл.ОткрытьФайл(Ответ, Неопределено, Неопределено, "UTF-8");
		
		ТаблицаДляУдаления = Новый ТаблицаЗначений;
		ТаблицаДляУдаления.Колонки.Добавить("Тип");
		ТаблицаДляУдаления.Колонки.Добавить("ID");
				
		Пока XMLФайл.Прочитать() Цикл 

			Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайл.Имя = "Entity" Тогда 

				ПрочитатьЭлементыДляУдаления(XMLФайл, ТаблицаДляУдаления, ТаблицаНастроек);

			КонецЕсли;

		КонецЦикла;
		
		Если Не ТаблицаДляУдаления.Количество() = 0 Тогда 
			
			ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
			
			XMLЗапись = Новый ЗаписьXML;
			XMLЗапись.ОткрытьФайл(ИмяФайлаЗапроса, "UTF-8");
			XMLЗапись.ЗаписатьОбъявлениеXML();
			
			XMLЗапись.ЗаписатьНачалоЭлемента("Root");
			
				XMLЗапись.ЗаписатьНачалоЭлемента("Rows");
				
					Для Каждого ЭлементДляУдаления Из ТаблицаДляУдаления Цикл 
						
						XMLЗапись.ЗаписатьНачалоЭлемента("Row");
						
						    XMLЗапись.ЗаписатьАтрибут("_Type", ЭлементДляУдаления.Тип);
							
							XMLЗапись.ЗаписатьАтрибут("_RS", "2");
								
							XMLЗапись.ЗаписатьАтрибут("Id", ЭлементДляУдаления.ID);
							
						XMLЗапись.ЗаписатьКонецЭлемента();
						
					КонецЦикла;
					
				XMLЗапись.ЗаписатьКонецЭлемента();
				
			XMLЗапись.ЗаписатьКонецЭлемента();	
			
			XMLЗапись.Закрыть();
			
			Ответ = ОтправитьНаСерверBitmobile("UploadData2", Сервер, Порт, Путь, Пароль, ИмяФайлаЗапроса);
			
			Если ТипЗнч(Ответ) = Тип("Число") Тогда
				
				ТекстОшибки = Строка("Некорректный ответ от сервера ""bitmobile"". Код ответа ") + Строка(Ответ);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Строка("Синхронизация удаленных данных прервана с ошибкой: " + ТекстОшибки);
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация удаленных данных прервана с ошибкой: " + ТекстОшибки);
			    			
				Возврат;
				
			КонецЕсли;
						
			Если Не Ответ = "ok" Тогда 
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Строка("Синхронизация удаленных данных прервана с ошибкой: " + Ответ);
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация удаленных данных прервана с ошибкой: " + Ответ);
								
			Иначе
				
				СинхронизацияВыполнена = Истина;
				
			КонецЕсли;
			
		Иначе  
			
			СинхронизацияВыполнена = Истина;
			
		КонецЕсли;
						
	Исключение	

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка("Синхронизация удаленных данных прервана с ошибкой: " + ОписаниеОшибки());
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Ошибка синхронизации", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.bitmobile_СинхронизацияИНастройки, , "Синхронизация удаленных данных прервана с ошибкой: " + ОписаниеОшибки());
				
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьЭлементыДляУдаления(XMLФайл, ТаблицаДляУдаления, ТаблицаНастроек)
	
	XMLФайл.ПрочитатьАтрибут();
	
	ИмяОбъектаBitmobile = XMLФайл.Значение; 
	
	НайденнаяНастройка = ТаблицаНастроек.Найти(ИмяОбъектаBitmobile, "ОбъектBitmobile"); 
	
	Если Не НайденнаяНастройка = Неопределено Тогда 
		
		Менеджер = Неопределено;
		
		Если НайденнаяНастройка.ВидОбъектаBitmobile = "Catalog" Тогда 
			Менеджер = Справочники[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Справочник.", ""), "Catalog.", "")];
	    КонецЕсли;
		
		Если НайденнаяНастройка.ВидОбъектаBitmobile = "Document" Тогда
			Менеджер = Документы[СтрЗаменить(СтрЗаменить(НайденнаяНастройка.ОбъектКонфигурации, "Документ.", ""), "Document.", "")];
	    КонецЕсли;
		
		Если НЕ Менеджер = Неопределено Тогда 
					
		    Пока XMLФайл.Прочитать() Цикл 
				
				Если XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента И XMLФайл.Имя = "Entity" Тогда 
					Прервать;
				КонецЕсли;

				Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента И XMLФайл.Имя = "Row" Тогда 
					ПрочитатьЭлементДляУдаления(XMLФайл, Менеджер, НайденнаяНастройка, ТаблицаДляУдаления);
				КонецЕсли;;

			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ПрочитатьЭлементДляУдаления(XMLФайл, Менеджер, НайденнаяНастройка, ТаблицаДляУдаления)
	
	Поля = Новый СписокЗначений;	
	
	Пока XMLФайл.ПрочитатьАтрибут() Цикл
		Поля.Добавить(XMLФайл.Имя, XMLФайл.Значение);
	КонецЦикла;
	
	ID = Поля.НайтиПоЗначению("Id").Представление;
	
	СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
    ОбъектПоСсылке = СсылкаНаОбъект.ПолучитьОбъект();
	
	Если ОбъектПоСсылке = Неопределено Тогда 
		
       Вставка 		= ТаблицаДляУдаления.Добавить();
	   Вставка.Тип	= НайденнаяНастройка.ОбъектBitmobile;
	   Вставка.ID 	= ID;
	   
	КонецЕсли;
			
КонецПроцедуры

//////////////////////////////////////////////
// Сохранение и восстановление настроек

Процедура СохранитьНастройкиВФайл(АдресВХ) Экспорт

	ИмяФайла = ПолучитьИмяВременногоФайла(".xml"); // FileName
	
	XML = Новый ЗаписьXML;
	XML.ОткрытьФайл(ИмяФайла, "UTF-8");
		
	XML.ЗаписатьОбъявлениеXML();	
	XML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	XML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	XML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	XML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	XML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации";

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаписатьXML(XML, ОбъектСсылки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиМобильныхПриложений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.bitmobile_НастройкиМобильныхПриложений КАК bitmobile_НастройкиМобильныхПриложений";

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаписатьXML(XML, ОбъектСсылки);
		
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.bitmobile_КонтролируемыеИзмеренияРегистров.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписатьXML(XML, НаборЗаписей);
	
	НаборЗаписей = РегистрыСведений.bitmobile_СоответствиеПеречислений.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписатьXML(XML, НаборЗаписей);	
	
	XML.ЗаписатьКонецЭлемента();
	XML.ЗаписатьКонецЭлемента();
	
	XML.Закрыть();
                  
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	
КонецПроцедуры

Процедура ВосстановитьНастройкиИзФайла(АдресВХ, НастройкиПоУмолчанию, БезСообщений = Ложь) Экспорт
	
	Попытка
	
		НачатьТранзакцию();
		
		ИмяФайлаXML = ПолучитьИмяВременногоФайла(".xml");
		
		Если НастройкиПоУмолчанию Тогда 
			
			Попытка
				
				ДанныеXML = Обработки.bitmobile_СинхронизацияИНастройки.ПолучитьМакет("НастройкиПоУмолчанию");
				
			Исключение
				
				ОтменитьТранзакцию();
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В системе нет настроек по умолчанию.";
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецПопытки;	
			
			Если Не ТипЗнч(ДанныеXML) = Тип("ДвоичныеДанные") Тогда 
				
				ОтменитьТранзакцию();
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В системе нет настроек по умолчанию.";
				Сообщение.Сообщить();
				
				Возврат;				
				
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ДанныеXML) Тогда 
				
				ДанныеXML.Записать(ИмяФайлаXML);
				
			Иначе 
				
				ОтменитьТранзакцию();
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В системе нет настроек по умолчанию.";
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
					
		Иначе 	
		
			ДанныеXML = ПолучитьИзВременногоХранилища(АдресВХ);
			ДанныеXML.Записать(ИмяФайлаXML);
			
		КонецЕсли;	
		
		// Очистить справочники настроек
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации";

		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектСсылки.Удалить();
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	bitmobile_НастройкиМобильныхПриложений.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.bitmobile_НастройкиМобильныхПриложений КАК bitmobile_НастройкиМобильныхПриложений";

		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектСсылки.Удалить();
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.bitmobile_КонтролируемыеИзмеренияРегистров.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.bitmobile_СоответствиеПеречислений.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();		
			
		УстановитьПривилегированныйРежим(Ложь);
		
		XML = Новый ЧтениеXML;
		XML.ОткрытьФайл(ИмяФайлаXML);
		
		Если Не XML.Прочитать() Или XML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или XML.ЛокальноеИмя <> "_1CV8DtUD" Или XML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 
			
			ОтменитьТранзакцию();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек не выполнено. Неверный формат файла выгрузки.";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		Если Не XML.Прочитать() Или XML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или XML.ЛокальноеИмя <> "Data" Или XML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 
			
			ОтменитьТранзакцию();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек не выполнено. Неверный формат файла выгрузки.";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		Если Не XML.Прочитать() Тогда 
			
			ОтменитьТранзакцию();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек не выполнено. Неверный формат файла выгрузки.";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		Пока ВозможностьЧтенияXML(XML) Цикл
			
			ЗаписанноеЗначение = ПрочитатьXML(XML);
			
			ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
			
			ЗаписанноеЗначение.Записать();
			
		КонецЦикла;	
		
		Если XML.ТипУзла <> ТипУзлаXML.КонецЭлемента Или XML.ЛокальноеИмя <> "Data" Или	XML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 
			
			ОтменитьТранзакцию();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек не выполнено. Неверный формат файла выгрузки.";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		Если Не XML.Прочитать() Или XML.ТипУзла <> ТипУзлаXML.КонецЭлемента Или XML.ЛокальноеИмя <> "_1CV8DtUD" Или XML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 
			
			ОтменитьТранзакцию();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек не выполнено. Неверный формат файла выгрузки.";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		XML.Закрыть();
		
		ЗафиксироватьТранзакцию();
		
		Если Не БезСообщений Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление настроек завершено.";
			Сообщение.Сообщить();
			
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
			
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Восстановление настроек не выполнено. " + ОписаниеОшибки();
		Сообщение.Сообщить();
					
	КонецПопытки;
	
КонецПроцедуры

