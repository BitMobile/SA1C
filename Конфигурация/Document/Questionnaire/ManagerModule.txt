
Function SelectOutlets(sourceTable) Export 
	
	outletParametersMap = CreateOutletParametersMap();
	
	query = New Query();
		
	//clearPositions
	rowsToDelete = sourceTable.FindRows(new Structure("Selector", "Catalog_Positions"));
	For Each r In rowsToDelete Do
		sourceTable.Delete(r);    	    
	EndDo;    
		
	//sort out sourceTable
	newSourseTable = sourceTable.Copy();
	
	f = new Structure("Selector", "Catalog_OutletParameter");
	outletParametersTable = sourceTable.Copy(f);
	
	rowsToDelete = newSourseTable.FindRows(new Structure("Selector", "Catalog_OutletParameter"));
	For Each r In rowsToDelete Do
		newSourseTable.Delete(r);			
	EndDo;
		
	f2 = new Structure("Selector", "Catalog_Territory");
	f3 = new Structure("Selector", "Catalog_Region");
	territoryTable = newSourseTable.Copy(f2);
	regionTable = newSourseTable.Copy(f3);
	For Each r In regionTable Do
		n = territoryTable.Add();
		n.Selector = r.Selector;    
		n.ComparisonType = r.ComparisonType;
		n.Value = r.Value
	EndDo;
	
	rowsToDelete = newSourseTable.FindRows(new Structure("Selector", "Catalog_Territory"));
	For Each r In rowsToDelete Do
		newSourseTable.Delete(r);			
	EndDo;
	rowsToDelete = newSourseTable.FindRows(new Structure("Selector", "Catalog_Region"));
	For Each r In rowsToDelete Do
		newSourseTable.Delete(r);			
	EndDo;
	
	sourceTable = newSourseTable;
	 	
	//upgrade query string with Outlet_Parameters
	parametersString = "";
	i = 0;
	skip = False;
	For Each selector In outletParametersTable Do
		If NOT skip Then
			parametersString = parametersString + CreateQueryString(i);
			query.SetParameter(String("Parameter"+i), selector.AdditionalParameter);
			If selector.ComparisonType <> Enums.ComparisonType.InList Then
				parametersString = parametersString + "= &Value"+i+" ";                
				query.SetParameter(String("Value"+i), selector.Value);                                 
			Else 
				parametersString = parametersString + " IN(";
				filter = new Structure("AdditionalParameter, ComparisonType", selector.AdditionalParameter, Enums.ComparisonType.InList);
				listTable = outletParametersTable.FindRows(filter);
				c = 1;
				For Each listItem In listTable Do
					parametersString = parametersString + String(" &Value" + String(i) + String(c)) + ?(c <> listTable.Count(), ", ", ") ");
					query.SetParameter(String("Value" + String(i) + String(c)), listItem.Value);                                    
					c = c+1;
				EndDo;
				endOfList = listItem;
				skip = True;
			EndIf;
		EndIf; 
		
		if selector = endOfList Then
			skip = False;
		EndIf;
		
		i = i + 1;
	EndDo;
	 	
	//upgrade query string with Territories
	territoriesString = "";
	skip = False;
	For Each selector In territoryTable Do
		If NOT skip Then
			territoriesString = territoriesString + " INNER JOIN Catalog.Territory.Outlets AS T"+ i + 
			" ON O.Ref = T"+i+".Outlet AND T"+i+".Ref";            
			If selector.ComparisonType <> Enums.ComparisonType.InList Then
				
				If selector.ComparisonType = Enums.ComparisonType.Equal Then  
					
					territoriesString = territoriesString + ?(selector.Selector = "Catalog_Territory", "=&parameter" + i,  ".Owner IN HIERARCHY(&parameter"+i+") ");                
					
				Else 
					
					territoriesString = territoriesString + ?(selector.Selector = "Catalog_Territory", "<>&parameter" + i,  ".Owner NOT IN HIERARCHY(&parameter"+i+") ");
					
				EndIf;	
				
				query.SetParameter(String("parameter"+i), selector.Value);
			Else 
				territoriesString = territoriesString + ?(selector.Selector = "Catalog_Territory", " IN(", ".Owner IN HIERARCHY(");
				filter = new Structure("Selector, ComparisonType", selector.Selector, Enums.ComparisonType.InList);
				listTable = territoryTable.FindRows(filter);
				c = 1;
				For Each listItem In listTable Do
					territoriesString = territoriesString + String(" &parameter" + String(i) + String(c)) + ?(c <> listTable.Count(), ", ", ") ");
					query.SetParameter(String("parameter" + String(i) + String(c)), listItem.Value);                                    
					c = c+1;
				EndDo;
				endOfList = listItem;
				skip = True;
			EndIf;
		EndIf; 
		
		if selector = endOfList Then
			skip = False;
		EndIf;
		
		i = i + 1;
	EndDo;
		
	//upgrade query string
	string = ?(sourceTable.Count()>0, " WHERE ", "");
	
	j = 1;
	skip = False;
	For Each selector In sourceTable Do
		If NOT skip Then
			string = string + " O." + outletParametersMap.Get(selector.Selector);
			If selector.ComparisonType <> Enums.ComparisonType.InList Then
				c = ?(selector.ComparisonType = Enums.ComparisonType.Equal, " = ", " <> ");
				string = string + c + String(" &parameter" + i);
				query.SetParameter(String("parameter" + i), selector.Value);       	        
			Else
				filter = new Structure("Selector, ComparisonType", selector.Selector, Enums.ComparisonType.InList);
				listTable = sourceTable.FindRows(filter);
				string = string + " IN( ";
				c = 1;
				For Each listItem In listTable Do
					string = string + String(" &parameter" + i + String(c)) + ?(c <> listTable.Count(), ", ", ") ");
					query.SetParameter(String("parameter" + i + String(c)), listItem.Value);                                    
					c = c+1;
				EndDo;
				
				endOfList = listItem;
				skip = True;
			EndIf;
		EndIf;
		
		if selector = endOfList Then
			skip = False;
		EndIf;
		
		If (j)<>sourceTable.Count() AND skip = False Then
			string = string + " AND "        	        
		EndIf;
		
		i = i + 1;
		j = j + 1;
		
	EndDo;
	
	Try
		
		query.Text="SELECT DISTINCT O.Ref FROM Catalog.Outlet AS O " + parametersString + territoriesString + string;
		
		result = query.Execute().Unload(); 
		
		Return result;
		
	Except
		
		result = New ValueTable;
		result.Columns.Add("Ref");
		
		Return result;
		
	EndTry;
	
EndFunction

Function CreateQueryString(sValue)
	
	String = " INNER JOIN Catalog.Outlet.Parameters AS OP" + sValue + "
	| ON O.Ref = OP" + sValue + ".Ref AND OP" + sValue + ".Parameter = &Parameter" + sValue + " AND OP" + sValue + ".Value ";          
	
	Return String;
	
EndFunction

Function CreateOutletParametersMap()
	
	sMap = new Map;
	
	For Each Item In Metadata.Enums.QuestionnaireSelectors.EnumValues Do
		
		sMap.Insert(Item.Name, Item.Comment);    	    
		
	EndDo;
	
	Return sMap;
	
EndFunction

Function SelectPositions(Positions) Export 

  	qPositions = new Query;
	
	String = ?(Positions.Count()=0, "", " WHERE ");
	
	Skip = False;
	
	i = 0;
	
	For Each Row In Positions Do
        
        If Skip = False Then
			
			If Not Row.ComparisonType = Enums.ComparisonType.InList Then
				
				c = ?(Row.ComparisonType = Enums.ComparisonType.Equal, " = ", " <> ");
				
				String = String + " Ref " + c +  " &Ref" + i;
				
				qPositions.SetParameter(String("Ref" + String(i)), Row.Value);        
				
			Else
				
				String = String + " Ref IN(";
				
				ListTable = positions.FindRows(New Structure("ComparisonType", Enums.ComparisonType.InList));
				
				cs = 1;
				
				For Each ListItem In ListTable Do
					
					String = String + "&Ref" + i + String(cs) + ?(cs = ListTable.Count(), ") ", ", ");
					
					qPositions.SetParameter(String("Ref" + i + String(cs)), ListItem.Value);
					
					cs = cs + 1;
					
				EndDo;
				
				
				EndOfList = ListItem;
				
				Skip = True;
				
			EndIf;
			
        EndIf;
        
        If Row = EndOfList Then
			
			Skip = False;
			
		EndIf;        
         
        i = i + 1;
            
    EndDo;
    	
	Try
		
		qPositions.Text = "SELECT Ref AS Position FROM Catalog.Positions " + string;

    	Return qPositions.Execute().Unload().UnloadColumn("Position");
		
	Except
		
		Return New Array;
		
	EndTry;
	
EndFunction

Function SelectSRs(SelectorsList, PositionList) Export 

	PositionsArray = SelectPositions(PositionList);
	
	Query = New Query;
	Query.Text = "SELECT
	             |	Territory.SR
	             |FROM
	             |	Catalog.Territory AS Territory
	             |		LEFT JOIN Catalog.User AS User
	             |			LEFT JOIN Catalog.Positions AS Positions
	             |			ON User.Position = Positions.Ref
	             |		ON Territory.SR = User.Ref
	             |WHERE
	             |	Positions.Ref IN(&PositionsArray)";
				 
	Query.SetParameter("PositionsArray", PositionsArray);			 
				 
	Ind = 0;			 
				 
	TableRegionOr = SelectorsList.Copy(New Structure("Selector, ComparisonType", "Catalog_Region", Enums.ComparisonType.InList)); 
	
	If Not TableRegionOr.Count() = 0 Then 
		
		Query.Text = Query.Text + " AND (";
		
		For Each TableRegionOrElement In TableRegionOr Do 
			
			Query.Text = Query.Text + "Territory.Owner IN HIERARCHY(&parameter" + String(Ind) + ") OR "; 
			Query.SetParameter("parameter" + String(Ind), TableRegionOrElement.Value);	
			
			Ind = Ind + 1;
			
		EndDo;	
		
		Query.Text = Left(Query.Text, StrLen(Query.Text) - 4);
		
		Query.Text = Query.Text + ") ";
		
	EndIf;	
	
	TableTerritoryOr = SelectorsList.Copy(New Structure("Selector, ComparisonType", "Catalog_Territory", Enums.ComparisonType.InList)); 
	
	If Not TableTerritoryOr.Count() = 0 Then 
		
		Query.Text = Query.Text + " AND (";
		
		For Each TableTerritoryOrElement In TableTerritoryOr Do 
			
			Query.Text = Query.Text + "Territory.Owner = &parameter" + String(Ind) + " OR "; 
			Query.SetParameter("parameter" + String(Ind), TableTerritoryOrElement.Value);	
			
			Ind = Ind + 1;
			
		EndDo;	
		
		Query.Text = Left(Query.Text, StrLen(Query.Text) - 4);
		
		Query.Text = Query.Text + ") ";
		
	EndIf;
	
	For Each SelectorElement In SelectorsList Do 
		
		If Not SelectorElement.ComparisonType = Enums.ComparisonType.InList Then 
		
			If SelectorElement.Selector = "Catalog_Region" Then 
				
				If SelectorElement.ComparisonType = Enums.ComparisonType.Equal Then 
				
					Query.Text = Query.Text + " AND Territory.Owner IN HIERARCHY(&parameter" + String(Ind) + ")"; 
				
				Else 
					
					Query.Text = Query.Text + " AND NOT Territory.Owner IN HIERARCHY(&parameter" + String(Ind) + ")";
					
				EndIf;	
					
				Query.SetParameter("parameter" + String(Ind), SelectorElement.Value);
				
				Ind = Ind + 1;
				
			EndIf;
			
			If SelectorElement.Selector = "Catalog_Territory" Then 
				
				If SelectorElement.ComparisonType = Enums.ComparisonType.Equal Then
				
					Query.Text = Query.Text + " AND Territory.Ref = &parameter" + String(Ind); 
					
				Else 
					
					Query.Text = Query.Text + " AND Territory.Ref <> &parameter" + String(Ind);
					
				EndIf;	
				
				Query.SetParameter("parameter" + String(Ind), SelectorElement.Value);
				
				Ind = Ind + 1;
				
			EndIf;
			
		EndIf;	
		
	EndDo;	
	
	ResultTable = Query.Execute().Unload();
			
	Return ResultTable;
			
EndFunction





