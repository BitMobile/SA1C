&AtClient
Var PrevTime;

#Region CommonProceduresAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	FillValueTableOutlets();
	
	ThisForm.YearNumber = Format(Year(Object.Year), "NG=");
	
EndProcedure

&AtServer
Procedure BeforeWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	Cancel = CheckVisitPlans();
	
EndProcedure

&AtServer
Procedure FillValueTableOutlets()
	
	Query = New Query(
	"SELECT ALLOWED DISTINCT
	|	TerritoryOutlets.Outlet
	|INTO SRsOutlets
	|FROM
	|	Catalog.Territory.Outlets AS TerritoryOutlets
	|		INNER JOIN Catalog.Territory.SRs AS TerritorySRs
	|		ON TerritoryOutlets.Ref = TerritorySRs.Ref
	|WHERE
	|	&SR IN (TerritorySRs.SR)
	|	AND NOT TerritoryOutlets.Outlet = VALUE(Catalog.Outlet.EmptyRef)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	VisitPlanOutlets.Outlet,
	|	VisitPlanOutlets.Date
	|INTO VisitPlanOutlets
	|FROM
	|	&VisitPlanOutlets AS VisitPlanOutlets
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	SRsOutlets.Outlet AS Outlet,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 1
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean1,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 2
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean2,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 3
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean3,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 4
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean4,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 5
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean5,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 6
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean6,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 7
	|				THEN TRUE
	|			ELSE FALSE
	|		END) AS DateBoolean7,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 1
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time1,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 2
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time2,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 3
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time3,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 4
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time4,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 5
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time5,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 6
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time6,
	|	MAX(CASE
	|			WHEN WEEKDAY(VisitPlanOutlets.Date) = 7
	|				THEN VisitPlanOutlets.Date
	|		END) AS Time7
	|FROM
	|	SRsOutlets AS SRsOutlets
	|		LEFT JOIN VisitPlanOutlets AS VisitPlanOutlets
	|		ON SRsOutlets.Outlet = VisitPlanOutlets.Outlet
	|
	|GROUP BY
	|	SRsOutlets.Outlet
	|AUTOORDER");
	
	Query.SetParameter("VisitPlanOutlets", Object.Outlets.Unload());
	Query.SetParameter("SR", Object.SR);
	
	Result = Query.Execute().Unload();
	
	ValueTableOutlets.Load(Result);
	
EndProcedure

&AtServer
Procedure FillOutletsUsing(VisitPlan)
	
	Query = New Query(
	"SELECT
	|	VisitPlanOutlets.Outlet,
	|	DATEADD(&DateFrom, SECOND, (WEEKDAY(VisitPlanOutlets.Date) - 1) * 60 * 60 * 24 + SECOND(VisitPlanOutlets.Date) + 60 * MINUTE(VisitPlanOutlets.Date) + 60 * 60 * HOUR(VisitPlanOutlets.Date)) AS Date
	|FROM
	|	Document.VisitPlan.Outlets AS VisitPlanOutlets
	|WHERE
	|	VisitPlanOutlets.Ref = &VisitPlan");
	
	Query.SetParameter("VisitPlan", VisitPlan);
	Query.SetParameter("DateFrom", Object.DateFrom);
	
	QueryResult = Query.Execute().Unload();
	
	Object.Outlets.Load(QueryResult);
	
	FillValueTableOutlets();
	
EndProcedure

&AtServer
Procedure RecountOutlets()
	
	Query = New Query(
	"SELECT
	|	Outlets.Outlet,
	|	DATEADD(&DateFrom, SECOND, (WEEKDAY(Outlets.Date) - 1) * 60 * 60 * 24 + HOUR(Outlets.Date) * 60 * 60 + MINUTE(Outlets.Date) * 60 + SECOND(Outlets.Date)) AS Date
	|INTO OutletsVT
	|FROM
	|	&Outlets AS Outlets
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	OutletsVT.Outlet,
	|	OutletsVT.Date
	|FROM
	|	OutletsVT AS OutletsVT");
	
	Query.SetParameter("Outlets", Object.Outlets.Unload());
	Query.SetParameter("DateFrom", Object.DateFrom);
	
	QueryResult = Query.Execute().Unload();
	
	Object.Outlets.Load(QueryResult);
	
EndProcedure

Function CheckVisitPlans()
	
	Query = New Query;
	Query.Text = "SELECT ALLOWED
	|	VisitPlan.SR,
	|	VisitPlan.Year,
	|	VisitPlan.WeekNumber
	|FROM
	|	Document.VisitPlan AS VisitPlan
	|WHERE
	|	VisitPlan.SR = &SR
	|	AND YEAR(VisitPlan.Year) = &Year
	|	AND VisitPlan.WeekNumber = &WeekNumber
	|	AND VisitPlan.Ref <> &Ref";
	
	Query.SetParameter("SR",Object.SR);
	Query.SetParameter("Year",Year(Object.Year));
	Query.SetParameter("WeekNumber",Object.WeekNumber);
	Query.SetParameter("Ref",Object.Ref);
	
	Result = Query.Execute().Select();
	
	if Result.Next() then
		Message(NStr("en = 'This SR is already have visit plan for this week'; ru = 'Для выбранного SR уже имеется план на выбранную неделю'"));	
		Return True;
	EndIf;
	
	Return False;
	
EndFunction // CheckVisitPlans()

// Забираем неделю года на сервере. потому что в зависимости от локали 
// алгоритм вычисления может варьироваться и мы считаем локаль сервера
// приоритетной
&AtServerNoContext
Function GetWeekOfYear(Value)
	
	Return WeekOfYear(Value);
	
EndFunction

// Функция возвращает дату первого дня недели по переданному в функцию номеру 
// недели в переданном в функцию году
&AtServerNoContext
Function BeginOfWeekInYear(WeekNumber, YearDate)
	
	YearFirstDay = BegOfYear(YearDate);
	DateInGivenWeek = YearFirstDay + 60 * 60 * 24 * 7 * (WeekNumber - 1);
	BeginOfGivenWeek = BegOfWeek(DateInGivenWeek);
	Return BeginOfGivenWeek;
	
EndFunction

#EndRegion

#Region UserInterface

&AtClient
Procedure OnOpen(Cancel)
	
	ChangeValueTableOutletsTitles();
	SetColumnsAvailability();
	
EndProcedure

&AtClient
Procedure ChoiceProcessing(SelectedValue, ChoiceSource)
	
	If ChoiceSource.FormName = "Document.VisitPlan.Form.ChoiceForm" Then
		
		FillOutletsUsing(SelectedValue);
		
	EndIf;
	
EndProcedure

#Region Header

&AtClient
Procedure YearTuning(Item, Direction, StandardProcessing)
	
	Object.Year = ?(Direction = 1, EndOfYear(Object.Year) + 1 , BegOfYear(Object.Year) - 1);
	
	// Планируемый год не может быть меньше чем текущий год
	If BegOfYear(Object.Year) < BegOfYear(CurrentDate()) Then
		
		Object.Year = BegOfYear(CurrentDate());
		
	EndIf;
	
	ThisForm.YearNumber = Format(Object.Year, "DF=yyyy");
	
	ProcessWeekNumberAndYearChange();
	
EndProcedure

&AtClient
Procedure WeekNumberOnChange(Item)
	
	ProcessWeekNumberAndYearChange();
	
EndProcedure

&AtClient
Procedure SRStartChoice(Item, ChoiceData, StandardProcessing)
	
	StandardProcessing = False;
	
	SelectionValue = New Structure("Role", "SR");
	SelectionParameters = New Structure("Filter", SelectionValue);
	OpenForm("Catalog.User.ChoiceForm", SelectionParameters, ThisForm.Items.SR);
	
EndProcedure

&AtClient
Procedure SROnChange(Item)
	
	FillValueTableOutlets();
	ClearOutlets();
	
EndProcedure

#EndRegion

#Region ValueTable

&AtClient
Procedure ValueTableOnChange(Item)
	
	CurrentData = Items.ValueTableOutlets.CurrentData;
	
	DayOfWeek = Right(Item.Name, 1);
	
	CurrentDate = BegOfDay(Object.DateFrom) + 60 * 60 * 24 * (DayOfWeek - 1);
	
	PrevTime = ?(PrevTime = Undefined, Date(1, 1, 1), PrevTime);
	PrevDateTime = CurrentDate + Second(PrevTime) + Minute(PrevTime) * 60 + Hour(PrevTime) * 3600;
	
	CurrentTime = CurrentData["Time" + DayOfWeek];
	CurrentDateTime = CurrentDate + Second(CurrentTime) + Minute(CurrentTime) * 60 + Hour(CurrentTime) * 3600;
	
	FilterParameters = New Structure;
	FilterParameters.Insert("Outlet", CurrentData.Outlet);
	FilterParameters.Insert("Date", PrevDateTime);
	
	Rows = Object.Outlets.FindRows(FilterParameters);
	
	If Rows.Count() Then
		
		For Each Row In Rows Do
			
			Object.Outlets.Delete(Object.Outlets.IndexOf(Row));
			
		EndDo;
		
	EndIf;
	
	Checked = CurrentData["DateBoolean" + DayOfWeek];
	
	If Checked Then
		
		NewRow = Object.Outlets.Add();
		NewRow.Outlet = CurrentData.Outlet;
		NewRow.Date = CurrentDateTime;
		
	Else
		
		CurrentData["Time" + DayOfWeek] = Date(1, 1, 1);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ValueTableOutletsOnStartEdit(Item, NewRow, Clone)
	
	If Find(Item.CurrentItem.Name, "Date") OR Find(Item.CurrentItem.Name, "Time") Then
		
		DayOfWeek = Right(Item.CurrentItem.Name, 1);
		CurrentData = Items.ValueTableOutlets.CurrentData;
		
		PrevTime = CurrentData["Time" + DayOfWeek];
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ValueTableOutletsOnActivateCell(Item)
	
	ItemName = Item.CurrentItem.Name;
	Items.CreateTask.Enabled = ?(ItemName = "ValueTableOutlet", False, Not ThisForm["Attribute" + Right(Item.CurrentItem.Name, 1)]);
	
EndProcedure

#EndRegion

#Region Commands

&AtClient
Procedure Clear(Command)
	
	ClearOutlets();
	
EndProcedure

&AtClient
Procedure FillTableUsing(Command)
	
	FilterValue = New Structure("SR", ThisForm.Object.SR);
	ChoiceParameters = New Structure("Filter", FilterValue);
	
	ChoiceForm = GetForm("Document.VisitPlan.ChoiceForm", ChoiceParameters);
	ChoiceForm.FormOwner = ThisForm;
	ChoiceForm.Open();
	
EndProcedure

&AtClient
Procedure CreateTask(Command)
	
	Modified = True;
	
	CurrentTableItem = Items.ValueTableOutlets.CurrentItem;
	CurrentData = Items.ValueTableOutlets.CurrentData;
	
	If Find(CurrentTableItem.Name, "Date") OR Find(CurrentTableItem.Name, "Time") Then
		
		If Not CurrentData = Undefined Then
			
			If Object.Ref.IsEmpty() Then
				
				Message(NStr("en = 'Document must be saved before creating task'; ru = 'Документ должен быть записан перед созданием задачи'"));
				
			Else
			
				DayOfWeek = Right(CurrentTableItem.Name, 1);
				
				PlanDate = BegOfDay(Object.DateFrom) + 60 * 60 * 24 * (DayOfWeek - 1);
				Outlet = CurrentData.Outlet;
				Territory = CommonProcessors.GetTerritory(Outlet);
				
				FormParameters = New Structure;
				FormParameters.Insert("Outlet", Outlet);
				FormParameters.Insert("Territory", Territory);
				FormParameters.Insert("VisitPlan", Object.Ref);
				FormParameters.Insert("PlanDate", PlanDate);
				
				OpenForm("Document.Task.ObjectForm", FormParameters);
				
			EndIf;
			
		EndIf;
		
	Else
		
		Message(NStr("en = 'Choose particlular date'; ru = 'Выберите конкретную дату'"));
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Helpers

&AtClient
Procedure ClearOutlets()
	
	Object.Outlets.Clear();
	FillValueTableOutlets();
	
EndProcedure

&AtClient
Procedure ProcessWeekNumberAndYearChange()
	
	lWeekNumber = Object.WeekNumber;
	// Обрабатываем случай, когда неделя года последняя, изменяется планируемый
	// год и в новом году недель меньше чем в предыдущем.
	Object.WeekNumber = ?(lWeekNumber > GetWeekOfYear(EndOfYear(Object.Year)), GetWeekOfYear(EndOfYear(Object.Year)), lWeekNumber);
	
	If Object.WeekNumber = 0 Then
		
		Object.WeekNumber = 1;
		
	ElsIf Object.WeekNumber < GetWeekOfYear(CurrentDate()) Then
		
		// В случае если новый год равен текущему, тогда номер недели не может быть 
		// меньше чем номер текущей недели
		Object.WeekNumber = ?(Year(Object.Year) <= Year(CurrentDate()), GetWeekOfYear(CurrentDate()), Object.WeekNumber);
		
	EndIf;
	
	Object.DateFrom = BeginOfWeekInYear(Object.WeekNumber, Object.Year);
	Object.DateTo = EndOfWeek(Object.DateFrom);
	
	SetColumnsAvailability();
	RecountOutlets();
	ChangeValueTableOutletsTitles();
	
EndProcedure

&AtClient
Procedure ChangeValueTableOutletsTitles()
	
	For WeekDay = 1 To 7 Do
		
		CurrentGroup = Items["Group" + WeekDay];
		CurrentDate = Object.DateFrom + (WeekDay - 1)* 60 * 60 * 24;
		WeekDayName = Lower(Format(CurrentDate, "DF=ddd"));
		MonthDay = Day(CurrentDate);
		
		CurrentGroup.Title = String(MonthDay) + "   |   " + WeekDayName;
		
	EndDo;
	
EndProcedure

&AtClient
Procedure SetColumnsAvailability()
	
	ColumnDate = Object.DateFrom;
	For WeekDay = 1 To 7 Do
		
		Value = BegOfDay(ColumnDate) < BegOfDay(CurrentDate());
		ThisForm["Attribute" + WeekDay] = Value;
		ColumnDate = ColumnDate + 60 * 60 * 24;
		
	EndDo;
	
EndProcedure

#EndRegion

#EndRegion
