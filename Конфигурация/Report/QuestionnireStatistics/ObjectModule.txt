
Procedure OnComposeResult(ResultDocument, DetailsData, StandardProcessing)
	
	StandardProcessing = False;
	Settings = SettingsComposer.Settings;
	
	Password 	= Constants.bitmobile_Пароль.Get();
	Server 		= StrReplace(Constants.bitmobile_Сервер.Get(), "localhost", "127.0.0.1");
	Path 		= Constants.bitmobile_ПутьНаСервере.Get();
	Path 		= StrReplace(Path, "admin", "webdav");
	Port 		= Constants.bitmobile_Порт.Get();
	
	Try
	
		Connection = New HTTPConnection(Server, Port, "admin", Password);
		
	Except
		
		Connection = Undefined;
		
	EndTry;
	
	SelectTable = SettingsComposer.UserSettings.Items;
	
	//Filter
	For Each SelectItems in SettingsComposer.Settings.Filter.Items Do
		
		FindUserSettings = SelectTable.Find(SelectItems.UserSettingID);
		
		If FindUserSettings <> Undefined Then
			
			SelectItems.ComparisonType = FindUserSettings.ComparisonType;
			SelectItems.Use = FindUserSettings.Use;
			SelectItems.RightValue = FindUserSettings.RightValue;  			
			
		EndIf;
		
	EndDo;
	
	//Parametrs
	
	For Each SelectItems in SettingsComposer.Settings.DataParameters.Items Do
		
		FindUserSettings = SelectTable.Find(SelectItems.UserSettingID);
		
		If FindUserSettings <> Undefined Then
			
			SelectItems.Use = FindUserSettings.Use;
			SelectItems.Value = FindUserSettings.Value;
			
		EndIf;
		
	EndDo;
		
	DetailsData = New DataCompositionDetailsData;
	ComposeTemp = New DataCompositionTemplateComposer;
	
	ShemaComposeData = GetTemplate("MainDataCompositionSchema");
	TempCompose = ComposeTemp.Execute(ShemaComposeData, Settings, DetailsData);
	
	ComposeProcessor = New DataCompositionProcessor;
	ComposeProcessor.Initialize(TempCompose, ,DetailsData);
	
	ResultDocument.Clear();
	
	OutputProcessor = New DataCompositionResultSpreadsheetDocumentOutputProcessor;
	OutputProcessor.SetDocument(ResultDocument);
	OutputProcessor.Output(ComposeProcessor);
	
	CountCols = ResultDocument.TableWidth;
	CountRow = ResultDocument.TableHeight;
	OutputProcessor.BeginOutput();
	
	For Col = 1 to CountCols Do
		
		For Row = 1 to CountRow Do
			
			CurrentArea = ResultDocument.Area(Row, Col);
			
			If CurrentArea.Details <> Undefined Then
				
				FieldDetails = DetailsData.Items[CurrentArea.Details].GetFields();
				
				If FieldDetails.Count() > 0 Then
					
					Picture = GetPicture(CurrentArea.Text, Connection, Path);
					
					If Picture <> Undefined Then
						
						Pic = ResultDocument.Drawings.Add(SpreadsheetDocumentDrawingType.Picture);
						Pic.PictureSize = PictureSize.RealSize;
						Pic.Picture = Picture;
						Pic.Place(CurrentArea);
						
						CurrentArea.RowHeight = 200;
						
					EndIf; 				
					
				EndIf;   				
				
			EndIf;       			
			
		EndDo;		
		
	EndDo;
	
	OutputProcessor.EndOutput();	
	
EndProcedure

Function GetPicture(ID, Connection, Path)
	
	Try 
		
		isGuid = New UUID(ID);
		
	Except
		
		Return Undefined;
		
	EndTry;
				
	Query = New Query;
	
	Query.Text = "SELECT ALLOWED
	             |	StorageAdditionalInformation.FileName AS FileName,
	             |	StorageAdditionalInformation.Storage
	             |FROM
	             |	InformationRegister.StorageAdditionalInformation AS StorageAdditionalInformation
	             |WHERE
	             |	StorageAdditionalInformation.FileName = &FileName";
				 
	Query.SetParameter("FileName", isGuid);
	
	Res = Query.Execute();
	
	If Not Res.IsEmpty() Then
		
		Sel = Res.Select();
		
		Sel.Next();
		
		BinaryDataOfFile = Sel.Storage.Get();
		
		If ValueIsFilled(BinaryDataOfFile) Then
		
			Return New Picture(BinaryDataOfFile, True);
			
		Else 
			
			If Not Connection = Undefined Then 
			
				Try
					
					WebDAVFile = GetTempFileName(Sel.Extension);
					
					Connection.Get(Path + Sel.FullFileName, WebDAVFile);
					
					BinaryDataOfFile = New BinaryData(WebDAVFile);
					
					Return New Picture(BinaryDataOfFile, True);
										
				Except
					
					Return Undefined;
					
				EndTry;
				
			Else 
				
				Return Undefined;
				
			EndIf;
						
		EndIf;	
		
	Else
		
		Return Undefined;
		
	EndIf;
		
EndFunction;

