
&AtClient
Var TypesMap;

#Region CommonProcedureAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	Items.SettingsComposerUserSettingsTableValue.SetAction("StartChoice", "SettingsComposerUserSettingsTableValueStartChoice");
	Items.SettingsComposerUserSettingsTableValue.ChoiceButton = True;
	
EndProcedure

&AtServerNoContext
Function GetReturnStructure(Value, TypesMap)
	
	Return New Structure("OutletParameter, DataType", Value, TypesMap.Get(String(Value.DataType)));
	
EndFunction

#EndRegion

#Region UserInterface

&AtClient
Function GetOutletParameterStructure()
	
	ParameterField = New DataCompositionParameter("Parameter");
	
	ReturnStructure = Undefined;
	
	For Each ItemElement In Report.SettingsComposer.UserSettings.Items Do
		
		If TypeOf(ItemElement) = Type("DataCompositionSettingsParameterValue") Then 
		
			If ItemElement.Parameter = ParameterField Then 
				
				If ValueIsFilled(ItemElement.Value) Then 
					
					ReturnStructure = GetReturnStructure(ItemElement.Value, TypesMap);
					
				EndIf;
				
			EndIf;
			
		EndIf;
		
	EndDo;
	
	Return ReturnStructure;
	
EndFunction

&AtClient
Function GetOutletParameterSettings()
	
	CurrentSetting = Report.SettingsComposer.UserSettings.Items.Find(Items.SettingsComposerUserSettingsTable.CurrentRow);
	
	ValueField = New DataCompositionField("Value");
	
	ReturnSettings = Undefined;
	
	For Each ItemElement In Report.SettingsComposer.Settings.Filter.Items Do 
		
		If ItemElement.UserSettingID = CurrentSetting.UserSettingID Then 
			
			If ItemElement.LeftValue = ValueField Then 
				
				ReturnSettings = CurrentSetting;
				
			EndIf;
			
		EndIf;
		
	EndDo;
	
	Return ReturnSettings;
	
EndFunction

&AtClient
Procedure SettingsComposerUserSettingsTableValueStartChoice(Item, ChoiceData, StandardProcessing)
	
	OutletParameterStructure = GetOutletParameterStructure();
	
	CurrentSetting = GetOutletParameterSettings();
	
	If Not CurrentSetting = Undefined And Not OutletParameterStructure = Undefined Then 
		
		StandardProcessing = False;
		
		If CurrentSetting.ComparisonType = DataCompositionComparisonType.InList 
			Or CurrentSetting.ComparisonType = DataCompositionComparisonType.InListByHierarchy
			Or CurrentSetting.ComparisonType = DataCompositionComparisonType.NotInList
			Or CurrentSetting.ComparisonType = DataCompositionComparisonType.NotInListByHierarchy Then 
			
			OpenForm("Document.Questionnaire.Form.SelectorsListForm", New Structure("StringNumber, Selector, DataType, CurrentValue, OutletParameter, Source", 0, "Catalog_OutletParameter", OutletParameterStructure.DataType, CurrentSetting.RightValue, OutletParameterStructure.OutletParameter, "ValueListOk" + String(ThisForm.UUID)));
			
		Else 
			
			OpenForm("Document.Questionnaire.Form.Input", New Structure("StringNumber, DataType, OutletParameter, Source, CurrentValue", 0, OutletParameterStructure.DataType, OutletParameterStructure.OutletParameter, "QuestionnaireForm" + String(ThisForm.UUID), CurrentSetting.RightValue));
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure NotificationProcessing(EventName, Parameter, Source)
	
	If EventName = "QuestionnaireForm" + String(ThisForm.UUID) Then
		
		CurrentSetting = GetOutletParameterSettings();
		
		CurrentSetting.RightValue = Parameter.Str;
		
		Items.SettingsComposerUserSettingsTable.EndEditRow(False);
		
	EndIf;
	
	If EventName = "ValueListOk" + String(ThisForm.UUID) Then
		
		CurrentSetting = GetOutletParameterSettings();
		
		CurrentSetting.RightValue = Parameter.List;
		
		Items.SettingsComposerUserSettingsTable.EndEditRow(False);
		
	EndIf;
	
EndProcedure

#EndRegion

TypesMap = new Map();
TypesMap.Insert("String", "String");
TypesMap.Insert("Строка", "String");
TypesMap.Insert("Integer", "Integer");
TypesMap.Insert("Целое число", "Integer");
TypesMap.Insert("Decimal", "Decimal");
TypesMap.Insert("Десятичная дробь", "Decimal");
TypesMap.Insert("Boolean", "Boolean");
TypesMap.Insert("Логический тип", "Boolean");
TypesMap.Insert("Date time", "Date time");
TypesMap.Insert("Дата и время", "Date time");
TypesMap.Insert("Value list", "Value list");
TypesMap.Insert("Список значений", "Value list");