
Процедура ПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не ЕстьТребуемыеРоли() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Константы.bitmobile_ОтключитьПодпискиНаСобытия.Получить() Тогда 
		Возврат;
	КонецЕсли;
		
	Настройка = НайтиНастройку(Источник);
	
	Если Настройка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗагрузкаBitmobile") Тогда 
		
		Запись 			= РегистрыСведений.bitmobile_ИзмененныеДанные.СоздатьМенеджерЗаписи();
		Запись.Период 	= ТекущаяДата();
        Запись.Ссылка 	= Источник.Ссылка;
		
		Запись.Записать();
		
		// Проверить что начата выгрузка данных и записать данные в буферный регистр
		Попытка
			
			СинхронизацияЗапущена	= Константы.bitmobile_СинхронизацияЗапущена.Получить();
			IDВыгрузки				= Константы.bitmobile_IDВыгрузки.Получить();
			
			Если ЗначениеЗаполнено(СинхронизацияЗапущена) И Не ЗначениеЗаполнено(IDВыгрузки) Тогда 
				
				ЗаписьПриЗагрузке 			= РегистрыСведений.bitmobile_ИзмененныеДанныеПриЗагрузке.СоздатьМенеджерЗаписи();
				ЗаписьПриЗагрузке.Ссылка 	= Источник.Ссылка;
				
				ЗаписьПриЗагрузке.Записать();
				
			КонецЕсли;	
			
		Исключение
		КонецПопытки;
				
    КонецЕсли;
    
КонецПроцедуры
 
Процедура ПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Не ЕстьТребуемыеРоли() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Константы.bitmobile_ОтключитьПодпискиНаСобытия.Получить() Тогда 
		Возврат;
	КонецЕсли;	
	
	ИмяРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ПолноеИмя();
	
	// Найти все контролируемые для этого регистра измерения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_КонтролируемыеИзмеренияРегистров.ИмяИзмерения
		|ИЗ
		|	РегистрСведений.bitmobile_КонтролируемыеИзмеренияРегистров КАК bitmobile_КонтролируемыеИзмеренияРегистров
		|ГДЕ
		|	bitmobile_КонтролируемыеИзмеренияРегистров.ИмяРегистра = &ИмяРегистра";

	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистра);

	ТаблицаИзмерений = Запрос.Выполнить().Выгрузить();

	Если Не ТаблицаИзмерений.Количество() = 0 Тогда
	
		Для Каждого ЭлементИсточника Из Источник Цикл
			
			Для Каждого СтрокаИзмерения Из ТаблицаИзмерений Цикл 
				
				Попытка
					ЗначениеИзмерения = ЭлементИсточника[СтрокаИзмерения.ИмяИзмерения];
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда 
					
					Запись = РегистрыСведений.bitmobile_ИзмененныеДанные.СоздатьМенеджерЗаписи();
					Запись.Период = ТекущаяДата();
					Запись.Ссылка = ЗначениеИзмерения;
					
					Запись.Записать();
								
				КонецЕсли;
							
			КонецЦикла;
					
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура Синхронизация(IDСеанса = Неопределено) Экспорт 
	
	НачатьСинхронизацию = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		// В автоматическом режиме блокировок установка управляемой блокировки вызовет ошибку
		Если Не Метаданные.РежимУправленияБлокировкойДанных = Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический Тогда 
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Константа.bitmobile_СинхронизацияЗапущена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		// Эмулируем занятость константы на время проверки для исключения повторного входа в синхронизацию
		Константы.bitmobile_СинхронизацияЗапущена.Установить(Константы.bitmobile_СинхронизацияЗапущена.Получить());
		
		Обработки.bitmobile_СинхронизацияИНастройки.ПроверитьСостояниеСинхронизации(НачатьСинхронизацию);
	
	Исключение
	КонецПопытки;
	
	Если НачатьСинхронизацию Тогда 
	
		УстановленЗапускСинхронизации = Ложь;
		            
		Если ЗначениеЗаполнено(IDСеанса) Тогда 
			
			Попытка
						
				Константы.bitmobile_СинхронизацияЗапущена.Установить(IDСеанса);
				
				УстановленЗапускСинхронизации = Истина;
				
			Исключение
			КонецПопытки;

			
		Иначе 	
		
			СеансыИБ 	= ПолучитьСеансыИнформационнойБазы();
			НомерСеанса = НомерСеансаИнформационнойБазы();
		
			Для Каждого СеансИБ Из СеансыИБ Цикл 
				
				Если СеансИБ.НомерСеанса = НомерСеанса Тогда 
					
					IDСеанса = Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса);
					
					Попытка
						
						Константы.bitmobile_СинхронизацияЗапущена.Установить(IDСеанса);
						
						УстановленЗапускСинхронизации = Истина;
						
					Исключение
					КонецПопытки;
								
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЕсли;	
		
	    ЗафиксироватьТранзакцию();
		
		Если УстановленЗапускСинхронизации Тогда 
			
			// Блок обработчиков выполняемых перед синхронизацией данных
			SyncSuperAgent.SetStatusOfQuestionnaires();
			SyncSuperAgent.SetStatusOfAssortmentMatrix(CurrentDate());
			SyncSuperAgent.ActualizePeriodicity();	
			// Конец блока обработчиков выполняемых перед синхронизацией данных
			
			Обработки.bitmobile_СинхронизацияИНастройки.ЗагрузитьДанные();
			
			Обработки.bitmobile_СинхронизацияИНастройки.ВыгрузитьДанные(); 
					
		КонецЕсли;
		
	Иначе 
		
		ЗафиксироватьТранзакцию();
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчисткаДанных() Экспорт
	
	ДатаВыгрузки = Константы.bitmobile_ПодтвержденнаяДатаВыгрузки.Получить();
	
	Если ЗначениеЗаполнено(ДатаВыгрузки) Тогда 
	
		НачатьОчистку = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			// В автоматическом режиме блокировок установка управляемой блокировки вызовет ошибку
			Если Не Метаданные.РежимУправленияБлокировкойДанных = Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический Тогда 
			
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Константа.bitmobile_СинхронизацияЗапущена");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
			КонецЕсли;
			
			// Эмулируем занятость константы на время проверки для исключения входа в синхронизацию
			Константы.bitmobile_СинхронизацияЗапущена.Установить(Константы.bitmobile_СинхронизацияЗапущена.Получить());
						
		Исключение
		КонецПопытки;
		
		Если НачатьОчистку Тогда 
			
			// Очистка регистра "Измененные данные"
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	bitmobile_ИзмененныеДанные.Период,
				|	bitmobile_ИзмененныеДанные.Ссылка
				|ИЗ
				|	РегистрСведений.bitmobile_ИзмененныеДанные КАК bitmobile_ИзмененныеДанные
				|ГДЕ
				|	bitmobile_ИзмененныеДанные.Период >= &ДатаВыгрузки";

			Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);

			НаборЗаписей = РегистрыСведений.bitmobile_ИзмененныеДанные.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();    	
			
		Иначе 
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СинхронизацияФайлов() Экспорт
	
	Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьФайлы();
	
КонецПроцедуры

Функция НайтиНастройку(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА
		|	И bitmobile_НастройкиСинхронизации.ОбъектКонфигурации = &ИмяМетаданного";

	Запрос.УстановитьПараметр("ИмяМетаданного", Источник.Метаданные().ПолноеИмя());

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка; 	
	Иначе 
		Возврат Неопределено;		
	КонецЕсли;
    	
КонецФункции

Функция ЕстьТребуемыеРоли()
	
	Если РольДоступна("bitmobile_Пользователь") Или РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция ИспользуетсяАнглийскийЯзык() Экспорт 
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		
		Возврат Ложь;
		
	Иначе 
		
		Возврат Истина;		
		
	КонецЕсли;	
			
КонецФункции
