
Процедура ПриЗаписи(Источник, Отказ) Экспорт
	
	Если Константы.bitmobile_ОтключитьПодпискиНаСобытия.Получить() Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Настройка = НайтиНастройку(Источник);
	
	Если Настройка = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗагрузкаBitmobile") Тогда 
		
		Запись					= РегистрыСведений.bitmobile_ИзмененныеДанные.СоздатьМенеджерЗаписи();
		Запись.Ссылка			= Источник.Ссылка;
		Запись.Обрабатывается	= Ложь;
		Запись.Порядок			= Настройка.ПозицияВВыгрузке;
		
		Запись.Записать();
		
		// Проверить что начата выгрузка данных и записать данные в буферный регистр
		Попытка
			
			СинхронизацияЗапущена	= Константы.bitmobile_СинхронизацияЗапущена.Получить();
			IDВыгрузки				= Константы.bitmobile_IDВыгрузки.Получить();
			
			Если ЗначениеЗаполнено(СинхронизацияЗапущена) И Не ЗначениеЗаполнено(IDВыгрузки) Тогда 
				
				ЗаписьПриЗагрузке			= РегистрыСведений.bitmobile_ИзмененныеДанныеПриЗагрузке.СоздатьМенеджерЗаписи();
				ЗаписьПриЗагрузке.Ссылка	= Источник.Ссылка;
				
				ЗаписьПриЗагрузке.Записать();
				
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Константы.bitmobile_ОтключитьПодпискиНаСобытия.Получить() Тогда 
		
		Возврат;
		
	КонецЕсли;	
	
	ИмяРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ПолноеИмя();
	
	// Найти все контролируемые для этого регистра измерения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	bitmobile_КонтролируемыеИзмеренияРегистров.ИмяИзмерения
		|ИЗ
		|	РегистрСведений.bitmobile_КонтролируемыеИзмеренияРегистров КАК bitmobile_КонтролируемыеИзмеренияРегистров
		|ГДЕ
		|	bitmobile_КонтролируемыеИзмеренияРегистров.ИмяРегистра = &ИмяРегистра";
	
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистра);
	
	ТаблицаИзмерений = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаИзмерений.Количество() = 0 Тогда
		
		Для Каждого ЭлементИсточника Из Источник Цикл
			
			Для Каждого СтрокаИзмерения Из ТаблицаИзмерений Цикл 
				
				Попытка
					ЗначениеИзмерения = ЭлементИсточника[СтрокаИзмерения.ИмяИзмерения];
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда 
					
					Запись					= РегистрыСведений.bitmobile_ИзмененныеДанные.СоздатьМенеджерЗаписи();
					Запись.Ссылка			= ЗначениеИзмерения;
					Запись.Обрабатывается	= Ложь;
					
					Запись.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Синхронизация() Экспорт 
	
	НачатьСинхронизацию = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		// В автоматическом режиме блокировок установка управляемой блокировки вызовет ошибку
		Если Не Метаданные.РежимУправленияБлокировкойДанных = Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический Тогда 
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Константа.bitmobile_СинхронизацияЗапущена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		// Эмулируем занятость константы на время проверки для исключения повторного входа в синхронизацию
		Константы.bitmobile_СинхронизацияЗапущена.Установить(Константы.bitmobile_СинхронизацияЗапущена.Получить());
		
		Обработки.bitmobile_СинхронизацияИНастройки.ПроверитьСостояниеСинхронизации(НачатьСинхронизацию);
		
	Исключение
		
	КонецПопытки;
	
	Если НачатьСинхронизацию Тогда 
		
		УстановленЗапускСинхронизации = Ложь;
		
		СеансыИБ	= ПолучитьСеансыИнформационнойБазы();
		НомерСеанса	= НомерСеансаИнформационнойБазы();
		
		Для Каждого СеансИБ Из СеансыИБ Цикл 
			
			Если СеансИБ.НомерСеанса = НомерСеанса Тогда 
				
				IDСеанса = Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса);
				
				Попытка
					
					Константы.bitmobile_СинхронизацияЗапущена.Установить(IDСеанса);
					
					УстановленЗапускСинхронизации = Истина;
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Если УстановленЗапускСинхронизации Тогда 
			
			// Блок обработчиков выполняемых перед синхронизацией данных
			SyncSuperAgent.SetStatusOfQuestionnaires();
			SyncSuperAgent.SetStatusOfAssortmentMatrix(CurrentDate());
			SyncSuperAgent.ActualizePeriodicity();	
			// Конец блока обработчиков выполняемых перед синхронизацией данных
			
			Обработки.bitmobile_СинхронизацияИНастройки.ЗагрузитьДанные();
			
			Обработки.bitmobile_СинхронизацияИНастройки.ВыгрузитьДанные(); 
			
		КонецЕсли;
		
	Иначе 
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизацияФайлов() Экспорт
	
	СинхронизацияЗапущена = Константы.bitmobile_СинхронизацияФайловЗапущена.Получить();
	
	Если Не СинхронизацияЗапущена Тогда 
		
		КонстантаУстановлена = Ложь;	
		
		Попытка
			
			Константы.bitmobile_СинхронизацияФайловЗапущена.Установить(Истина);
			
			КонстантаУстановлена = Истина;
			
		Исключение
			
		КонецПопытки;
		
		Если КонстантаУстановлена Тогда 
			
			Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьФайлы();
			
			Константы.bitmobile_СинхронизацияФайловЗапущена.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиНастройку(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА
		|	И bitmobile_НастройкиСинхронизации.ОбъектКонфигурации = &ИмяМетаданного";
	
	Запрос.УстановитьПараметр("ИмяМетаданного", Источник.Метаданные().ПолноеИмя());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Выборка.Ссылка; 	
		
	Иначе 
		
		Возврат Неопределено;		
		
	КонецЕсли;
	
КонецФункции

Функция ИспользуетсяАнглийскийЯзык() Экспорт 
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		
		Возврат Ложь;
		
	Иначе 
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции
