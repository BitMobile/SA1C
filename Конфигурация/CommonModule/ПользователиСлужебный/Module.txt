
// Вызывается ПередЗаписью Пользователя или Внешнего пользователя.
Процедура НачатьОбработкуПользователяИБ(ПользовательОбъект,
                                        ПараметрыОбработки,
                                        УдалениеПользователяИзСправочника = Ложь) Экспорт
	
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Ложь);
	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
	
	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда
		
		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;
	
	СтарыеСвойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПользовательОбъект.Ссылка,
		"UserID");
	
	Если НЕ ЗначениеЗаполнено(СтарыеСвойства.UserID) Тогда
		СтарыеСвойства.UserID =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	// Идентификаторы для дальнейшего использования при обработке пользователя.
	ПараметрыОбработки.Вставить("СтарыйUserID",
		СтарыеСвойства.UserID);
	
	// Новые значения полей для контроля при записи элемента справочника Пользователи.
	ПараметрыОбработки.Вставить("НовыйUserID",
		СтарыеСвойства.UserID);
			
	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ не указано свойство Действие.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие <> "Записать"
	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ указано
			           |неверное значение ""%2"" свойства Действие.'"),
			ПользовательОбъект.Ссылка,
			ОписаниеПользователяИБ.Действие);
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователяИБ(Ложь);
	
	ТекстСообщения = НСтр("en = 'Недостаточно прав для изменения пользователя информационной базы.'");
	
	Если УровеньДоступа = "НетДоступа" Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеСтарогоПользователяИБ = Неопределено;
	Если Пользователи.ПрочитатьПользователяИБ(
	         ПараметрыОбработки.СтарыйUserID,
	         ОписаниеСтарогоПользователяИБ) Тогда
		
		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Истина);
	Иначе
		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Ложь);
	КонецЕсли;
	ПараметрыОбработки.Вставить(
		"ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);
		
	Если УровеньДоступа <> "ПолныйДоступ"
	   И УровеньДоступа <> "УправлениеСписком"
	   И ( НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует
	        И ОписаниеПользователяИБ.Действие = "Записать"
		  ИЛИ ПараметрыОбработки.СтарыйПользовательИБСуществует
		     И ОписаниеПользователяИБ.Действие = "Удалить" ) Тогда
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
		
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя связать пользователя ИБ с пользователем
				           |справочника для которого уже задан пользователь ИБ.'"),
				ПользовательОбъект.Наименование);
			
		ИначеЕсли ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		              ОписаниеПользователяИБ.УникальныйИдентификатор) = Неопределено Тогда
			
			Если НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("en = 'Ошибка при записи пользователя ""%1"".
					           |Нельзя связать несуществующего пользователя ИБ
					           |с пользователем справочника.'"),
					ПользовательОбъект.Наименование);
			КонецЕсли;
		КонецЕсли;
		
		НайденныйПользователь = Неопределено;
		
		Если ПользовательПоИдентификаторуСуществует(
			ОписаниеПользователяИБ.УникальныйИдентификатор,
			ПользовательОбъект.Ссылка,
			НайденныйПользователь) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя связать с этим пользователем справочника
				           |пользователя ИБ уже связанного с другим пользователем
				           |справочника ""%2"".'"),
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
		
		ПользовательОбъект.UserID =
			ОписаниеПользователяИБ.УникальныйИдентификатор;
		
		// Обновление значения реквизита контролируемого при записи.
		ПараметрыОбработки.НовыйUserID =
			ПользовательОбъект.UserID;
		
		Возврат;
	КонецЕсли;
	
	ОписаниеПользователя = Новый Структура;
	ПараметрыОбработки.Вставить("ОписаниеПользователя", Новый Структура);
	
	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		// Проверка попытки изменения недоступных свойств.
		
		Если УровеньДоступа = "УправлениеСписком" Тогда
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		ИначеЕсли УровеньДоступа = "ИзменениеТекущего" Тогда
			
			ВсеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
			
			ДопустимыеСвойства = Новый Массив;
			ДопустимыеСвойства.Добавить("Пароль");
			ДопустимыеСвойства.Добавить("Язык");
			
			Для каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
				   И ДопустимыеСвойства.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.НовыйUserID =
		ПользовательОбъект.UserID;
	
	ОписаниеНовогоПользователяИБ = Неопределено;
	Если Пользователи.ПрочитатьПользователяИБ(
	         ПользовательОбъект.UserID,
	         ОписаниеНовогоПользователяИБ) Тогда
		
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Истина);
	Иначе
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
	КонецЕсли;
	ПараметрыОбработки.Вставить(
		"ОписаниеНовогоПользователяИБ", ОписаниеНовогоПользователяИБ);
	
КонецПроцедуры

// Вызывается ПриЗаписи Пользователя или Внешнего пользователя.
Процедура ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	
	
    //Если ПараметрыОбработки.НовыйUserID
    //     <> ПользовательОбъект.UserID Тогда
    //	
    //	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    //		НСтр("en = 'Ошибка при записи пользователя ""%1"".
    //		           |Реквизит UserID не допускается изменять.
    //		           |Обновление реквизита выполняется автоматически.'"),
    //		ПользовательОбъект.Ссылка);
    //КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНовогоПользователяИБ = Ложь;
	
	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
		
		UserID = ОписаниеПользователяИБ.УникальныйИдентификатор;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйUserID) Тогда
		UserID = ПараметрыОбработки.СтарыйUserID;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		UserID = Неопределено;
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;
	
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);
	
	// Попытка записи пользователя ИБ.
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	Если НЕ Пользователи.ЗаписатьПользователяИБ(
	         UserID,
	         ОписаниеПользователяИБ,
	         СоздатьНовогоПользователяИБ,
	         ОписаниеОшибки,
	         ПользовательИБ) Тогда
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ПользовательИБ.Роли.Содержит(Метаданные.роли.SRM) Тогда
		ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Истина);
	КонецЕсли;
	
	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		UserID = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");
	КонецЕсли;
	
	ПользовательОбъект.UserID = UserID;
	
	ОписаниеПользователяИБ.Вставить(
		"УникальныйИдентификатор",
		UserID);
	
	ПараметрыОбработки.ОписаниеПользователя.Вставить("Имя",       ПользовательИБ.Имя);
	ПараметрыОбработки.ОписаниеПользователя.Вставить("ПолноеИмя", ПользовательИБ.ПолноеИмя);
	ПараметрыОбработки.ОписаниеПользователя.Вставить("Язык",      Строка(ПользовательИБ.Язык));
	
КонецПроцедуры

Функция УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	// Очистка идентификатора пользователя ИБ.
	ПользовательОбъект.UserID = Неопределено;
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОписаниеОшибки = "";
		ПользовательИБ = Неопределено;
		Если Пользователи.УдалитьПользователяИБ(
		         ПараметрыОбработки.СтарыйUserID,
		         ОписаниеОшибки,
		         ПользовательИБ) Тогда
			
			// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
				ПараметрыОбработки.СтарыйUserID);
			
			ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");
			
			ПараметрыОбработки.ОписаниеПользователя.Вставить("Имя",       ПользовательИБ.Имя);
			ПараметрыОбработки.ОписаниеПользователя.Вставить("ПолноеИмя", ПользовательИБ.ПолноеИмя);
			ПараметрыОбработки.ОписаниеПользователя.Вставить("Язык",      Строка(ПользовательИБ.Язык));
		Иначе
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйUserID) Тогда
		
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "ОчищенаСвязьСНесуществующимПользователемИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
	КонецЕсли;
	
КонецФункции

// Проверяет существование пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ,
//                   УникальныйИдентификатор - идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// или справочнике ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия связи пользователяИБ только
// с одним элементом справочников Пользователи, ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
//  НайденныйПользователь (Возвращаемое значение):
//                     Неопределено - пользователь не существует.
//                     СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи, если найден.
//
//  ИдентификаторПользователяСервиса - Булево.
//                     Ложь   - проверять UserID.
//                     Истина - проверять ИдентификаторПользователяСервиса.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор,
                                               СсылкаНаТекущего = Неопределено,
                                               НайденныйПользователь = Неопределено,
                                               ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст = 
	"SELECT
	|	Пользователи.Ref AS Пользователь
	|FROM
	|	Catalog.User AS Пользователи
	|WHERE
	|	Пользователи.UserID = &УникальныйИдентификатор
	|	AND Пользователи.Ref <> &СсылкаНаТекущего";
	
	Результат = Ложь;
	НайденныйПользователь = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НайденныйПользователь = Выборка.Пользователь;
			Результат = Истина;
			Пользователи.НайтиНеоднозначныхПользователейИБ(, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Записывает указанного Пользователя ИБ с учетом режима разделения данных.
//  Если режим разделения данных включен, тогда перед записью проверяются
// права записываемого пользователя.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - объект, который требуется записать.
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	//ПроверитьПраваПользователя(ПользовательИБ);
	Попытка
		ПользовательИБ.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры

// Возвращает текущий уровень доступа на изменение свойств пользователя ИБ.
// 
// Параметры:
//  ДляВнешнегоПользователя - Булево.
//
// Возвращаемое значение:
// Строка. Возможные значения:
//  "ПолныйДоступ"      - любое изменение свойств пользователя.
//  "УправлениеСписком" - управление списком пользователей, без возможности
//                        изменения прав.
//  "ИзменениеТекущего" - изменение свойств текущего пользователя "Имя",
//                        "Пароль" и "Язык".
//  "НетДоступа"        - права на изменение пользователей отсутствуют.
//
Функция УровеньДоступаКСвойствамПользователяИБ(ДляВнешнегоПользователя) Экспорт
	
	//Если ПривилегированныйРежим() Тогда
		
		Возврат "ПолныйДоступ";
	//	
	//ИначеЕсли ДляВнешнегоПользователя Тогда
	//	
	//	Если РольДоступна(Метаданные.Роли.ДобавлениеИзменениеВнешнихПользователей) Тогда
	//		Возврат "УправлениеСписком";
	//	
	//	ИначеЕсли РольДоступна(Метаданные.Роли.ИзменениеТекущегоВнешнегоПользователя) Тогда
	//		Возврат "ИзменениеТекущего";
	//	КонецЕсли;
	//Иначе
	//	Если РольДоступна(Метаданные.Роли.ДобавлениеИзменениеПользователей) Тогда
	//		Возврат "УправлениеСписком";
	//	
	//	ИначеЕсли РольДоступна(Метаданные.Роли.ИзменениеТекущегоПользователя) Тогда
	//		Возврат "ИзменениеТекущего";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат "НетДоступа";
	
КонецФункции

Процедура СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяНовогоПользователя = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;
	
	ИдентификаторКопируемогоПользователяИБ =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыОбработки.ЗначениеКопирования, "UserID");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКопируемогоПользователяИБ = Неопределено;
	Если НЕ Пользователи.ПрочитатьПользователяИБ(
	         ИдентификаторКопируемогоПользователяИБ,
	         ОписаниеКопируемогоПользователяИБ) Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;
	
КонецПроцедуры

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
// Возвращаемое значение:
//  Булево - если Истина, ошибок не найдено.
//
Функция ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ) Экспорт
	
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;
		
		Если ПустаяСтрока(Имя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("en = 'Не заполнено Имя (для входа).'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("en = 'Имя (для входа) превышает 64 символа.'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли Найти(Имя, ":") > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("en = 'Имя (для входа) содержит запрещенный символ "":"".'"),
				,
				"Имя",
				,
				Отказ);
				
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ПользовательИБ <> Неопределено
			   И ПользовательИБ.УникальныйИдентификатор
			     <> ОписаниеПользователяИБ.UserID Тогда
				
				НайденныйПользователь = Неопределено;
				ПользовательПоИдентификаторуСуществует(
					ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);
				
				Если НайденныйПользователь = Неопределено Тогда
					ТекстОшибки = НСтр("en = 'Имя (для входа) уже занято.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("en = 'Имя (для входа) уже занято для пользователя ""%1"".'"),
						Строка(НайденныйПользователь));
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("Пароль") Тогда
		
		Если ОписаниеПользователяИБ.Пароль <> Неопределено
			И ОписаниеПользователяИБ.Пароль
			  <> ОписаниеПользователяИБ.ПодтверждениеПароля Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("en = 'Пароль и подтверждение пароля не совпадают.'"),
				,
				"Пароль",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Заполняет параметр сеанса ТекущийПользователь или ТекущийВнешнийПользователь
// значением пользователя, найденному по пользователю информационной базы
// под которым запущен сеанс.
//  Если пользователь не найден, то при наличии административных прав
// создается новый пользователь в справочнике, иначе вызывается исключение.
// 
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ПользовательНеНайден = Ложь;
		СоздатьПользователя  = Ложь;
		СсылкаНового         = Неопределено;
		Служебный            = Ложь;
		
		ТекущийПользователь        = Неопределено;
		ТекущийВнешнийПользователь = Неопределено;
		
		ИдентификаторПользователяИБ =
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		Пользователи.НайтиНеоднозначныхПользователейИБ(, ИдентификаторПользователяИБ);
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
		
		Запрос.Текст =
		"SELECT TOP 1
		|	User.Ref AS Ссылка
		|FROM
		|	Catalog.User AS User
		|WHERE
		|	User.UserID = &ИдентификаторПользователяИБ";
		РезультатПользователи = Запрос.Выполнить();
		
		
		Если РезультатПользователи.Пустой() Тогда
			Если  Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ТекущийПользовательИБ       = ПользователиИнформационнойБазы.ТекущийПользователь();
				ИмяПользователя             = ТекущийПользовательИБ.Имя;
				ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;
				ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
				
				Если Служебный Тогда
					ПользовательПоНаименованию = Неопределено;
				Иначе
					ПользовательПоНаименованию = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
				КонецЕсли;
				
				Если ПользовательПоНаименованию = Неопределено Тогда
					ПользовательНеНайден = Истина;
					СоздатьПользователя  = Истина;
				Иначе
					ТекущийПользователь = ПользовательПоНаименованию;
				КонецЕсли;
			Иначе
				ПользовательНеНайден = Истина;
			КонецЕсли;
		Иначе
			Выборка = РезультатПользователи.Выбрать();
			Выборка.Следующий();
			ТекущийПользователь = Выборка.Ссылка;
		КонецЕсли;
		
		Если СоздатьПользователя Тогда
			
			Если СсылкаНового = Неопределено Тогда
				СсылкаНового = Справочники.User.ПолучитьСсылку();
			КонецЕсли;
			
			ТекущийПользователь = СсылкаНового;
			
			НовыйПользователь = Справочники.User.СоздатьЭлемент();
			//НовыйПользователь.Служебный = Служебный;
			НовыйПользователь.Наименование = ПолноеИмяПользователя;
			НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
			НовыйПользователь.UserName = ИмяПользователя;
			Для каждого Роль Из ТекущийПользовательИБ.Роли Цикл
				НовыйПользователь.Role     = Роль;
				Прервать;
			КонецЦикла;
			

			Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
				
				ОписаниеПользователяИБ = Новый Структура;
				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				ОписаниеПользователяИБ.Вставить(
				"УникальныйИдентификатор", ИдентификаторПользователяИБ);
				
				НовыйПользователь.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			КонецЕсли;
			
			Попытка
				НовыйПользователь.Записать();
			Исключение
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = 'Авторизация не выполнена. Работа системы будет завершена.
				|Пользователь: %1 не найден в справочнике ""Пользователи"".
				|
				|При попытке добавления пользователя в справочник возникла ошибка:
				|""%2"".
				|
				|Обратитесь к администратору.'"),
				ИмяПользователя,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецПопытки;
			
		ИначеЕсли ПользовательНеНайден Тогда
			ВызватьИсключение ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя) +
		НСтр("en = '
		|Возникла внутренняя ошибка при поиске пользователя.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь        = ТекущийПользователь;
		
	УстановленныеПараметры.Добавить("ТекущийПользователь");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	ТекстСообщенияОбОшибке = НСтр("en = 'Авторизация не выполнена. Работа системы будет завершена.
	|
	|Пользователь ""%1"" не найден в справочнике ""Пользователи"".
	|
	|Обратитесь к администратору.'");
	
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции


Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"SELECT
	|	User.Ref AS Ссылка,
	|	User.UserID
	|FROM
	|	Catalog.User AS User
	|WHERE
	|	User.Description = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Результат = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ Пользователи.ПользовательИБЗанят(Выборка.UserID) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
//                                сравнить сохраняемое значение с полученным и результат поместить
//                                в следующий параметр Совпадает.
//
//  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру
//                                ИдентификаторПользователяИБ.
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль,
                                        Знач ИдентификаторПользователяИБ = Неопределено,
                                        Совпадает = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ВременныйПользовательИБ.АутентификацияСтандартная = Истина;
		ВременныйПользовательИБ.Пароль = Пароль;
		
		ВременныйПользовательИБ.Имя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Временный пользователь (%1)'"),
			Новый УникальныйИдентификатор);
		
		ВременныйПользовательИБ.Записать();
		
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ВременныйПользовательИБ.УникальныйИдентификатор);
		
		СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
		ОтменитьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ИдентификаторПользователяИБ);
		
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции
