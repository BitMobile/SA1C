
// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль SRM и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль SRM;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или SRM.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите UserID.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 У пустого пользователя - роль SRM для базовых конфигураций.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено Тогда//ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ТекущийПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "UserID"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРольSRM = Истина;
	ПроверитьРольАдминистратораСистемы = Истина;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ТекущийПользовательИБ.УникальныйИдентификатор Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольSRM
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.Admin) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновнаяРоль = Неопределено Тогда
			// Когда основная роль не указана, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольSRM
		   И НЕ РольДоступна(Метаданные.Роли.Admin) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет является ли пользователь неразделенным.
//
// Параметры:
//  Идентификатор - Неопределено - проверяется текущий пользователь ИБ;
//                  УникальныйИдентификатор - идентификатор пользователя ИБ;
//                  ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//                  СправочникСсылка.Пользователи,
//                  СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите UserID.
//                    Уточнение: если пользователь ИБ не найден, возвращается Ложь.
//
// Возвращаемое значение:
//  Булево. Если указан внешний пользователь, возвращается Ложь.
//
Функция ЭтоНеразделенныйПользователь(Идентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ИдентификаторПользовательИБ = Идентификатор;
		
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ПользовательИнформационнойБазы") Тогда
		ИдентификаторПользовательИБ = Идентификатор.УникальныйИдентификатор;
		
	ИначеЕсли Идентификатор = Неопределено   тогда
		
		ИдентификаторПользовательИБ =
			ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	Иначе
		// Задан не текущий пользователь.
		ИдентификаторПользовательИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Идентификатор, "UserID");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного) без учета привилегированного режима.
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите UserID
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	Если ЭтоПолноправныйПользователь(Пользователь, , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда//ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "UserID"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с пользователями информационной базы

// Возвращает полное имя не указанного пользователя для отображения в интерфейсах.
Функция ПолноеИмяНеуказанногоПользователя() Экспорт
	
	Возврат НСтр("en = '<Не указан>'");
	
КонецФункции

// Проверяет связан ли пользовательИБ с элементом справочника Пользователи или
// элементом справочника ВнешниеПользователи.
// 
// Параметры:
//  ПользовательИБ - Строка - имя пользователя ИБ.
//                   УникальныйИдентификатор - уникальный идентификатор пользователя ИБ.
//                   ПользовательИнформационнойБазы.
//
//  УчетнаяЗапись  - ПользовательИнформационнойБазы (возвращаемое значение).
//
// Возвращаемое значение:
//  Булево. Истина, если пользователь ИБ существует и его идентификатор
//   используется либо в справочнике Пользователи, либо в справочнике ВнешниеПользователи.
//
Функция ПользовательИБЗанят(ПользовательИБ, УчетнаяЗапись = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
		
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	Иначе
		УчетнаяЗапись = ПользовательИБ;
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(
		УчетнаяЗапись.УникальныйИдентификатор);
	
КонецФункции

// Возвращает пустую структуру описания пользователя ИБ.
//
// Возвращаемое значение:
// Структура.
//  УникальныйИдентификатор   - УникальныйИдентификатор.
//  Имя                       - Строка.
//  ПолноеИмя                 - Строка.
//
//  АутентификацияOpenID      - Булево.
//
//  АутентификацияСтандартная - Булево.
//  ПоказыватьВСпискеВыбора   - Булево.
//  Пароль                    - Неопределено.
//  СохраняемоеЗначениеПароля - Неопределено.
//  ПарольУстановлен          - Булево.
//  ЗапрещеноИзменятьПароль   - Булево.
//
//  АутентификацияОС          - Булево.
//  ПользовательОС            - Строка.
//
//  ОсновнойИнтерфейс         - Неопределено,
//                              Строка (имя интерфейса из коллекции
//                                      Метаданные.Интерфейсы).
//
//  РежимЗапуска              - Неопределено,
//                              Строка (значения: "Авто",
//                                                "ОбычноеПриложение",
//                                                "УправляемоеПриложение").
//  Язык                      - Неопределено,
//                              Строка (имя языка из коллекции
//                                      Метаданные.Языки).
//
//  Роли                      - Неопределено,
//                              Массив значений типа Строка (имена ролей
//                              из коллекции Метаданные.Роли).
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	
	Свойства.Вставить("УникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	
	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	
	Свойства.Вставить("РежимЗапуска",              "Авто");
	
	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Свойства.Вставить("Роли", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

// Считывает свойства пользователя информационной базы по
// строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор  - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства       - Структура со свойствами, как в фукнции НовоеОписаниеПользователяИБ().
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор,
                                Свойства = Неопределено,
                                ОписаниеОшибки = "",
                                ПользовательИБ = Неопределено) Экспорт
	
	Свойства = НовоеОписаниеПользователяИБ();
	
	Свойства.Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
		
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en = 'Пользователь информационной базы ""%1""' не найден."), Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	
	Возврат Истина;
	
КонецФункции

// Перезаписывает свойства пользователя ИБ, найденного по строковому или
// уникальному идентификатору, либо создает нового пользователя ИБ
// (если задано создать существующего пользователя - будет ошибка).
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор (идентификатор пользователя).
//
//  ОбновляемыеСвойства - Структура со свойствами, как в фукнции НовоеОписаниеПользователяИБ().
//                        Свойство может быть не задано, тогда используется прочитанное или
//                        начальное значение. Следующие свойства используются нестандартно:
//  
//      УникальныйИдентификатор - Неопределено (возвращаемое значение, устанавливается
//                                              после записи пользователя ИБ).
//      СтарыйПароль            - Неопределено,
//                                Строка - если заданный пароль не совпадет
//                                         с существующим будет ошибка.
//
//  СоздатьНового - Ложь  - никаких дополнительных действий.
//                  Неопределено,
//                  Истина - создается новый пользователь ИБ, когда ПользовательИБ
//                           не найден по указанному идентификатору.
//                  При значении Истина, если Пользователь ИБ найден
//                  по указанному идентификатору - будет ошибка.
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево, если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор,
                               Знач ОбновляемыеСвойства,
                               Знач СоздатьНового = Ложь,
                               ОписаниеОшибки = "",
                               ПользовательИБ = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(
		Идентификатор, СтарыеСвойства, ОписаниеОшибки, ПользовательИБ);
	
	Если НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового = Истина Тогда
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("en = 'Невозможно создать пользователя информационной базы
			           |%1,
			           |так как он уже существует.'"),
			СтарыеСвойства.Имя,
			СтарыеСвойства.УникальныйИдентификатор);
		Возврат Ложь;
	Иначе
		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда
			
			СтарыйПарольСовпадает = Ложь;
			
			ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(
				ОбновляемыеСвойства.СтарыйПароль,
				СтарыеСвойства.УникальныйИдентификатор,
				СтарыйПарольСовпадает);
			
			Если НЕ СтарыйПарольСовпадает Тогда
				ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
					НСтр("en = 'При записи пользователя информационной базы
					           |%1,
					           |старый пароль указан не верно.'"),
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка новых значений свойств.
	НовыеСвойства = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		
		Если ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ОбновляемыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
		
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);
	
	//Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
	//	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	//КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ.
	Попытка
		ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
	Исключение
		ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("en = 'При записи пользователя информационной базы
			           |%1 произошла ошибка:
			           |
			           |""%2"".'"),
			ПользовательИБ.Имя,
			?(ПредварительноеЧтение, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтарыеСвойства.Имя)
	   И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек.
		//ПользователиСлужебный.СкопироватьНастройкиПользователя(
		//	СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;
	
	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Возврат Истина;
	
КонецФункции

// Удаляет указанного пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ,
//                   УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если удаление не удалось.
//
// Возвращаемое значение:
//  Булево, если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор,
                              ОписаниеОшибки = "",
                              ПользовательИБ = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = ОписаниеОшибкиПриЗаписиПользователяИБ(
				НСтр("en = 'При удалении пользователя информационной базы
				           |%1 произошла ошибка:
				           |
				           |""%2"".'"),
				ПользовательИБ.Имя,
				ПользовательИБ.УникальныйИдентификатор,
				ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура - подмножество свойств из НовоеОписаниеПользователяИБ().
//                 ИЛИ НЕ Структура, например:
//                 ПользовательИнформационнойБазы,
//                 ДанныеФормыКоллекция.
//
//  Источник     - как и приемник, но типы обратные, т.е. когда в Приемнике
//                 тип Структура, тогда в источнике НЕ Структура.
// 
//  СписокСвойств       - Строка - список свойств через запятую,
//                                 которые нужно скопировать (без префикса).
//
//  ИсключаемыеСвойства - Строка - список свойств через запятую,
//                                 которые не нужно копировать (без префикса).
//
//  ПрефиксСвойств - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник,
                                            Источник,
                                            КопируемыеСвойства = "",
                                            ИсключаемыеСвойства = "",
                                            ПрефиксСвойств = "") Экспорт
	
	ВсеСвойства = НовоеОписаниеПользователяИБ();
	
	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;
	
	ПарольУстановлен = Ложь;
	
	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;
		
		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы") Тогда
			
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда
				
				ЗначениеСвойства = Неопределено;
				
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства = ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
				
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства = ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
				
			ИначеЕсли Свойство = "Роли" Тогда
				
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;
				
				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;
			
			ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
			ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
			
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда
					
					Продолжить;
					
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда
					
					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда
						
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда
					
						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.'"),
								ЗначениеСвойства);
							
						ИначеЕсли Найти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".'"),
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Если ТипЗнч(Приемник) = Тип("УправляемаяФорма") Тогда
							Для каждого Роль Из Источник[Свойство] Цикл
								Приемник.Object.Роль = Роль;
							КонецЦикла;
							Продолжить;
						Иначе
							Продолжить;
						КонецЕСли;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;
					
					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пользователя справочника Пользователи, соответствующего
// пользователю ИБ с указанным именем.
//  Для поиска требуются административные права. Если административных прав нет,
// допустимо искать только пользователя для текущего пользователя ИБ.
// 
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи           - если пользователь найден.
//  Справочники.Пользователи.ПустаяСсылка() - если пользователь ИБ найден.
//  Неопределено                            - если пользователь ИБ не найден.
//
Функция НайтиПоИмени(Знач ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		НайтиНеоднозначныхПользователейИБ(, ПользовательИБ.УникальныйИдентификатор);
		
		Возврат Справочники.User.НайтиПоРеквизиту(
			"UserID",
			ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Возвращаемое значение:
//  ОбъектМетаданных: Роль.
//
Функция РольАдминистратораСистемы() Экспорт
	
	РольАдминистратораСистемы = Метаданные.Роли.Admin;
	
	Если ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.Admin) Тогда
		
		РольАдминистратораСистемы = Метаданные.Роли.Admin;
	КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных пользователей ИБ для дальнейшей
// обработки.
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//                 СправочникСсылка.Пользователи или
//                 СправочникСсылка.ВнешниеПользователи - проверка только для указанной ссылки.
//
//  УникальныйИдентификатор
//               - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//               - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы
//               - Неопределено - при нахождении ошибок вызывается исключение.
//                 Соответствие - при нахождении ошибок исключение не вызывается,
//                                а вместо этого заполняется переданное соответствие:
//                     Ключ     - неоднозначный идентификатор пользователя ИБ.
//                     Значение - массив пользователей и внешних пользователей.
//
//  ИдентификаторПользователяСервиса - Булево.
//                 Ложь   - проверять UserID.
//                 Истина - проверять ИдентификаторПользователяСервиса.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь = Неопределено,
                                            Знач УникальныйИдентификатор = Неопределено,
                                            Знач НайденныеИдентификаторы = Неопределено,
                                            Знач ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"SELECT
	|	ИдентификаторыПользователей.UserID AS НеоднозначныйИдентификатор,
	|	ИдентификаторыПользователей.Пользователь
	|FROM
	|	(SELECT
	|		Пользователи.UserID AS UserID,
	|		Пользователи.Ref AS Пользователь
	|	FROM
	|		Catalog.User AS Пользователи) AS ИдентификаторыПользователей
	|WHERE
	|	ИдентификаторыПользователей.UserID IN
	|			(SELECT
	|				ИдентификаторыПользователей.UserID
	|			FROM
	|				(SELECT
	|					Пользователи.UserID,
	|					Пользователи.Ref AS Пользователь
	|				FROM
	|					Справочник.User AS Пользователи
	|				WHERE
	|					Пользователи.UserID <> &ПустойУникальныйИдентификатор
	|					AND NOT(&Пользователь <> UNDEFINED
	|							AND Пользователи.Ref <> &Пользователь)
	|					AND NOT(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	|							AND Пользователи.UserID <> &УникальныйИдентификатор)
	|				) AS ИдентификаторыПользователей
	|			GROUP BY
	|						ИдентификаторыПользователей.UserID
	|			HAVING
	|				COUNT(ИдентификаторыПользователей.Пользователь) > 1)
	|
	|ORDER BY
	|	ИдентификаторыПользователей.UserID";
	
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("en = 'Ошибка в базе данных:'") + Символы.ПС;
	ТекущийНеоднозначныйИдентификатор = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		
		НовыйУникальныйИдентификатор = Ложь;
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйУникальныйИдентификатор = Истина;
			ТекущийНеоднозначныйИдентификатор = Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ =
					ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
						ТекущийНеоднозначныйИдентификатор);
				
				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяПользователяИБ = НСтр("en = '<не найден>'");
				Иначе
					ИмяПользователяИБ = ТекущийПользовательИБ.Имя;
				КонецЕсли;
				
				ОписаниеОшибки = ОписаниеОшибки
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						?(ИдентификаторПользователяСервиса,
						НСтр("en = 'Пользователю сервиса с идентификатором ""%2""
						           |соответствует более одного пользователя базы данных:'"),
						НСтр("en = 'Пользователю ИБ ""%1"" с идентификатором ""%2""
						           |соответствует более одного пользователя базы данных:'") ),
						ИмяПользователяИБ,
						ТекущийНеоднозначныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйУникальныйИдентификатор Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;
			ОписаниеОшибки = ОписаниеОшибки
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("en = '
					           |	""%1"" с идентификатором ссылки %2'"),
					Строка.Пользователь,
					Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ОписаниеОшибки = ОписаниеОшибки + "." + Символы.ПС;
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль - Строка - пароль для которого нужно получить сохраняемое значение.
//
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль) Экспорт
	
	Возврат ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(Пароль);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует краткое описание ошибки, которое увидит пользователь,
// а также может записать подробное описание ошибки в журнал регистрации.
//
// Параметры:
//  ШаблонОшибки       - Шаблон, содержащий параметр "%1" для представления пользователя ИБ и
//                       параметр %2 для описания ошибки.
//
//  ИмяПользователяИБ  - ПользовательИнформационнойБазы.
//
//  UserID - Неопределено, УникальныйИдентификатор.
//
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
//  ЗаписатьВЖурнал    - Булево. Если Истина, то выполняется запись подробного описания ошибки
//                       в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - описание ошибки для просмотра пользователю.
//
Функция ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки,
                                              ИмяПользователяИБ,
                                              UserID,
                                              ИнформацияОбОшибке = Неопределено,
                                              ЗаписатьВЖурнал = Истина)
	
	
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("en = 'Пользователи.Ошибка записи пользователя ИБ'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				"""" + ИмяПользователяИБ + """ ("
				+ ?(ЗначениеЗаполнено(UserID),
					НСтр("en = 'Новый'"),
					Строка(UserID))
				+ ")",
				?(ИнформацияОбОшибке = Неопределено,
				  "",
				  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке))));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибки,
		"""" + ИмяПользователяИБ + """",
		?(ИнформацияОбОшибке = Неопределено,
		  "",
		  КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
	
КонецФункции

// Переопределяет поведение формы пользователя и формы внешнего пользователя,
// группы внешних пользователей.
//
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи,
//           СправочникСсылка.ВнешниеПользователи,
//           СправочникСсылка.ГруппыВнешнихПользователей
//           ссылка на пользователя, внешнего пользователя или группу внешних пользователей
//           при создании формы.
//
//  ДействияВФорме - Структура (со свойствами типа Строка):
//           Роли                   = "", "Просмотр",     "Редактирование"
//           КонтактнаяИнформация   = "", "Просмотр",     "Редактирование"
//           СвойстваПользователяИБ = "", "ПросмотрВсех", "РедактированиеВсех", РедактированиеСвоих"
//           СвойстваЭлемента       = "", "Просмотр",     "Редактирование"
//           
//           Для групп внешних пользователей КонтактнаяИнформация и СвойстваПользователяИБ не существуют.
//
Процедура ИзменитьДействияВФорме(Знач Ссылка, Знач ДействияВФорме) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	ДействияВФорме.Роли = "";
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// См. ПользователиКлиентСервер.ТекущийПользователь().
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции
