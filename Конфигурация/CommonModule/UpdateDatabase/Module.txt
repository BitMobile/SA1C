
#Region CommonUpdateProcessors

Function StartUpdate() Export 
	
	CurrentVersion = Constants.bitmobile_ВерсияКонфигурации.Get();
	
	If ValueIsFilled(CurrentVersion) Then 
		
		ArrayOfCurrentVersion = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(CurrentVersion, ".");
		
		CurrentVersion = ArrayOfCurrentVersion[0] + "." + ArrayOfCurrentVersion[1] + "." + ArrayOfCurrentVersion[2];
		
	EndIf;
	
	MetadataVersion = Metadata.Version;
	
	ArrayOfMetadataVersion = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(MetadataVersion, ".");
	
	MetadataVersionForUpdate = ArrayOfMetadataVersion[0] + "." + ArrayOfMetadataVersion[1] + "." + ArrayOfMetadataVersion[2];
	
	ReturnStructure = New Structure;
	ReturnStructure.Insert("NeedUpdate", False);
	ReturnStructure.Insert("NeedRestart", False);
	ReturnStructure.Insert("UpdateComplete", False);
	ReturnStructure.Insert("Error", "");
	
	If Not CurrentVersion = MetadataVersionForUpdate Then
		
		ReturnStructure.NeedUpdate = True;
		
		CurrenUser = InfoBaseUsers.CurrentUser();
		
		If IsInRole("Admin") Then 
			
			NeedWriteUserAndRestartSystem = False;
			
			If Not CurrenUser.Roles.Contains(Metadata.Roles.bitmobile_Пользователь) Then
				
				CurrenUser.Roles.Add(Metadata.Roles.bitmobile_Пользователь);
				
				NeedWriteUserAndRestartSystem = True;
				
			EndIf;
			
			If Not CurrenUser.Roles.Contains(Metadata.Roles.bitmobile_Администратор) Then
				
				CurrenUser.Roles.Add(Metadata.Roles.bitmobile_Администратор);
				
				NeedWriteUserAndRestartSystem = True;
				
			EndIf;
			
			If NeedWriteUserAndRestartSystem Then 
				
				CurrenUser.Write();
				
				ReturnStructure.NeedRestart = True;
				
				Return ReturnStructure;
				
			EndIf;
			
		EndIf;
		
		If Not (IsInRole("bitmobile_Администратор") And IsInRole("bitmobile_Пользователь") And IsInRole("Admin")) Then 
			
			ErrorText = NStr("en = 'Insufficient permissions to perform the update. Required roles: Administrator (bitmobile), Administrator (superagent) and User (bitmobile)." 
							+ Chars.LF + "System operation is completed.';"
							+ "ru = 'Недостаточно прав для выполнения обновления. Требуются роли: Администратор (bitmobile), Администратор (superagent) и Пользователь (bitmobile)."
							+ Chars.LF + "Работа системы будет завершена.'");
			
			ReturnStructure.Error = ErrorText;
			
			Return ReturnStructure;
			
		EndIf;
		
		Try
			
			SetExclusiveMode(True);
			
		Except
			
			ErrorText = NStr("en = 'Failed to set exclusive mode."
							+ Chars.LF + "Description of error: %1%."
							+ Chars.LF + "System operation is completed.';"
							+ "ru = 'Не удалось установить монопольный режим."
							+ Chars.LF + "Описание ошибки: %1%."
							+ Chars.LF + "Работа системы будет завершена.'");
			
			ErrorText = StrReplace(ErrorText, "%1%", String(ErrorDescription()));
			
			ReturnStructure.Error = ErrorText;
			
			Return ReturnStructure;
			
		EndTry;
		
		BeginTransaction();
		
		LastState = "";
		
		Try
		
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("en = 'Database update is started'; ru = 'Выполняется обновление базы данных'");
			
			UserMessage.Message();
			
			Step = 0;
			
			// Общие обработчики для всех релизов
			UpdateForAllReleases(LastState, Step);
			
			// Специальные обработчики для релизов
			If MetadataVersionForUpdate = "1.4.0" Then 
				
				UpdateForRelease_1_4_0(LastState, Step);
				
			EndIf;
			
			Constants.bitmobile_ВерсияКонфигурации.Set(MetadataVersion);
		
			CommitTransaction();
			
			SetExclusiveMode(False);
			
			ReturnStructure.UpdateComplete = True;
			
			Return ReturnStructure;
			
		Except
			
			RollbackTransaction();
			
			ErrorText = NStr("en = 'Database update aborted at step: %1%. " 
							+ Chars.LF + "Description of error: %2%. " 
							+ Chars.LF + "System operation is completed.';" 
							+ "ru = 'Обновление базы данных прервано на этапе: %1%." 
							+ Chars.LF +  "Описание ошибки: %2%. " 
							+ Chars.LF +  "Работа системы будет завершена.'");
			
			ErrorText = StrReplace(ErrorText, "%1%", LastState);
			ErrorText = StrReplace(ErrorText, "%2%", String(ErrorDescription()));
			
			ReturnStructure.Error = ErrorText;
			
			Return ReturnStructure;
			
		EndTry;
	
	EndIf;
	
	Return ReturnStructure;

EndFunction

Procedure WriteProtocol(LastState, Step, Text)
	
	Step		= Step + 1;
	LastState 	= Text;
	
	UserMessage 		= New UserMessage;
	UserMessage.Text	= NStr("en = 'Step '; ru = 'Этап '") + String(Step) + ": " + Text;
	
	UserMessage.Message();
	
EndProcedure	

#EndRegion

#Region ForAllReleases

Procedure UpdateForAllReleases(LastState, Step)
	
	WriteProtocol(LastState, Step, NStr("en = 'Filling database'; ru = 'Заполнение базы данных'"));  
	FillInProcessing();
	
	FillConfigurationData();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update users'; ru = 'Обновление пользователей'"));  
	ProcessUsers();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update sync settings'; ru = 'Обновление настроек синхронизации'"));  
	ProcessSyncSettings();
	
EndProcedure

Procedure FillConfigurationData()
	
	Constants.bitmobile_ИмяКонфигурации.Set(Metadata.Name);
	
	Protocol = Constants.bitmobile_ПротоколПередачиФайлов.Get();
	
	If Not ValueIsFilled(Protocol) Then 
		
		Constants.bitmobile_ПротоколПередачиФайлов.Set(Enums.bitmobile_ПротоколыПередачиФайлов.WebDAV);
		
	EndIf;
	
	AvailebleFileSize = Constants.bitmobile_ДопустимыйРазмерФайла.Get();
	
	If AvailebleFileSize = 0 Then 
		
		Constants.bitmobile_ДопустимыйРазмерФайла.Set(500);
		
	EndIf;
	
EndProcedure

Procedure FillInProcessing()
    
    // Добавить элементы для справочников OutletType, Class, Territory, Users, SKUGroup, Region, Brand, Units
    EntityElements = New ValueTable();
	
	EntityElements.Columns.Add("Key");
    EntityElements.Columns.Add("Value");
	
	EntityElements = AddInValueTable(EntityElements, "User", NStr("en = 'Default sales representative'; ru = 'Основной торговый представитель'"));
	EntityElements = AddInValueTable(EntityElements, "OutletType", NStr("en = 'Default type'; ru = 'Основной тип'"));
	EntityElements = AddInValueTable(EntityElements, "OutletClass", NStr("en = 'Default class'; ru = 'Основной класс'"));
	EntityElements = AddInValueTable(EntityElements, "Region", NStr("en = 'Default region'; ru = 'Основной регион'"));
	EntityElements = AddInValueTable(EntityElements, "Territory", NStr("en = 'Default territory'; ru = 'Основная территория'"));
	EntityElements = AddInValueTable(EntityElements, "Distributor", NStr("en = 'Default distributor'; ru = 'Основной дистрибьютор'"));
	EntityElements = AddInValueTable(EntityElements, "SKUGroup", NStr("en = 'Default group'; ru = 'Основная группа'"));
	EntityElements = AddInValueTable(EntityElements, "Brands", NStr("en = 'Default brand'; ru = 'Основной бренд'"));
	EntityElements = AddInValueTable(EntityElements, "UnitsOfMeasure", NStr("en = 'pcs.'; ru = 'шт.'"));
    
    For Each Entity In EntityElements Do
		
		If NoItems(Entity.Key) Then
			
			NewObject = Catalogs[Entity.Key].CreateItem();
            NewObject.Description = Entity.Value;
			
			If Entity.Key = "User" Then
				
				NewObject.Description 	= "sr";
				NewObject.Role 			= "SR";
                NewObject.UserName 		= "sr";
                NewObject.Password 		= "sr";
				
				NewObject.Write();
				
				NewObject = Catalogs[Entity.Key].CreateItem();
				
				NewObject.Description 	= "srm";
				NewObject.Role 			= "SRM";
				NewObject.UserName 		= "srm";
				NewObject.Password 		= "srm";
				
			EndIf;
			
			If Entity.Key = "Territory" Then
				
				NewObject.SR = Catalogs.User.FindByAttribute("Role", "SR");
                NewObject.Owner = Catalogs.Region.FindByCode("000000001");
				
			EndIf;
			
			If Entity.Key = "Region" Then
				
				NewObject.Manager = Catalogs.User.FindByAttribute("Role", "SRM");
				
			EndIf;
			
			NewObject.Write();
			
		EndIf;    
		
	EndDo;
		
EndProcedure

Procedure ProcessUsers()
	
	UsersArray = InfoBaseUsers.GetUsers();
	
	For Each UserElement In UsersArray Do
		
		If UserElement.Roles.Contains(Metadata.Roles.SRM) Then 
			
			If Not UserElement.Roles.Contains(Metadata.Roles.bitmobile_Пользователь) Then
				
				UserElement.Roles.Add(Metadata.Roles.bitmobile_Пользователь);
				
				UserElement.Write();
				
			EndIf;
			
		EndIf;
		
		If UserElement.Roles.Contains(Metadata.Roles.Admin) Then
			
			NeedWrite = False;
			
			If Not UserElement.Roles.Contains(Metadata.Roles.bitmobile_Пользователь) Then
				
				UserElement.Roles.Add(Metadata.Roles.bitmobile_Пользователь);
				
				NeedWrite = True;
				
			EndIf;
			
			If Not UserElement.Roles.Contains(Metadata.Roles.bitmobile_Администратор) Then
				
				UserElement.Roles.Add(Metadata.Roles.bitmobile_Администратор);
				
				NeedWrite = True;
				
			EndIf;
			
			If NeedWrite Then 
				
				UserElement.Write();
				
			EndIf;
			
		EndIf;
		
	EndDo;
	
EndProcedure

Procedure ProcessSyncSettings()

	DataProcessors.bitmobile_СинхронизацияИНастройки.ВосстановитьНастройкиИзФайла(Undefined, True, True);

EndProcedure

Function NoItems(EntityName)
    
    If EntityName = "User" Then
        Text = 
        "SELECT
        |   COUNT(DISTINCT User.Ref) AS Ref
        |FROM
        |   Catalog.User AS User
        |WHERE
        |   User.Role = &Role";
        Query = New Query;
        Query.Text = Text;
        Query.SetParameter("Role", "SR");
    Else
        Text = "SELECT COUNT(DISTINCT Ref) FROM Catalog." + EntityName;
        Query = New Query;
        Query.Text = Text;
    EndIf;
    
    Result = Query.Execute().Unload();
    If Result[0].Ref > 0  Then
        Return False;
    Else
        Return True;
    EndIf;
    
EndFunction 

Function AddInValueTable(EntityElements, Entity, Value)
    
    NewRow 			= EntityElements.Add();
    NewRow.Key 		= Entity;
    NewRow.Value 	= Value;
	
	Return EntityElements;
    
EndFunction 

#EndRegion

#Region Release_1_4_0

Procedure UpdateForRelease_1_4_0(LastState, Step)
	
	WriteProtocol(LastState, Step, NStr("en = 'Update groups of questions'; ru = 'Обновление групп вопросов'"));
	ProcessQuestionGroups();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update territories in SKU groups'; ru = 'Обновление территорий в группах номенклатуры'"));
	ProcessTerritoryInSKUGroups();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update questionnaires'; ru = 'Обновление анкет'"));
	ProcessQuestionnaires();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update SKU questions in questionnaires'; ru = 'Обновление вопросов по номенклатуре в анкетах'"));
	ProcessSKUQuestions();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update regular questions in questionnaires'; ru = 'Обновление общих вопросов в анкетах'"));
	ProcessQuestions();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update SKUs in questionnaires'; ru = 'Обновление номенклатуры в анкетах'"));
	ProcessSKUs();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update selectors in questionnaires'; ru = 'Обновление параметров отбора в анкетах'"));
	ProcessSelectors();
	
	WriteProtocol(LastState, Step, NStr("en = 'Update visits'; ru = 'Обновление результатов визитов'"));
	UpdateSKUQuestionsInVisit();
	
EndProcedure	

#Region Update_QuestionGroups_Territories

Procedure ProcessQuestionGroups()
	
	Selection = Catalogs.QuestionGroup.Select();
	
	While Selection.Next() Do
		
		If Selection.Type = Enums.QuestionGroupTypes.EmptyRef() Then
			
			Object = Selection.GetObject();
			Object.DataExchange.Load = True;
			Object.Type = Enums.QuestionGroupTypes.RegularQuestions;
			Object.Write();
			
		EndIf;
		
	EndDo;
	
EndProcedure

Procedure ProcessTerritoryInSKUGroups()
	
	// Очистить списки территорий в группах
	Query = New Query;
	Query.Text = 
		"SELECT
		|	SKUGroup.Ref AS SKUGroup
		|FROM
		|	Catalog.SKUGroup AS SKUGroup
		|WHERE
		|	SKUGroup.IsFolder = FALSE";
	
	QueryResult = Query.Execute();
	
	Selection = QueryResult.Select();
	
	While Selection.Next() Do
		
		GroupObject = Selection.SKUGroup.GetObject();
		
		GroupObject.Territories.Clear();
		
		GroupObject.Write();
				
	EndDo;
		
	Query = New Query;
	Query.Text = 
		"SELECT
		|	Territory.Ref AS Territory
		|FROM
		|	Catalog.Territory AS Territory";
	
	QueryResult = Query.Execute();
	
	Selection = QueryResult.Select();
	
	While Selection.Next() Do
		
		Territory = Selection.Territory;
		
		For Each Row In Territory.SKUGroups Do 
			
			If Not Row.SKUGroup.IsFolder Then 
			
				GroupObject = Row.SKUGroup.GetObject();
				
				If Not GroupObject = Undefined Then  
				
					If GroupObject.Territories.Find(Territory) = Undefined Then 
						
						NewRow = GroupObject.Territories.Add();
						NewRow.Territory = Territory;			
						
					EndIf;
					
					GroupObject.Write();
					
				EndIf;	
				
			EndIf;	
			
		EndDo;	
		
	EndDo;
		
EndProcedure

#EndRegion

#Region Update_Questionaire

Procedure ProcessQuestionnaires()
	
	Select = Documents.Questionnaire.Select();
	
	While Select.Next() Do
		
		Object 				= Select.GetObject();
		Object.BeginDate 	= Object.Date;
		Object.Schedule 	= "Day;1";
		Object.Status 		= Enums.QuestionnareStatus.Active;
		Object.Single 		= False;
		Object.FillPeriod 	= Enums.QuestionsSaveIntervals.ScheduleInterval;
		
		Object.Write();
		
	EndDo;
	
EndProcedure

Procedure ProcessSKUQuestions()
	
	SKUQuestionsGroup = GetSKUQuestionsGroup();
	
	SKUQuestionsAssignment = New ValueTable;
	SKUQuestionsAssignment.Columns.Add("Question");
	SKUQuestionsAssignment.Columns.Add("Assignment");
		
	Question = CreateQuestion(NStr("en='Available';ru='Доступность'"), Enums.DataType.Boolean, Enums.SKUQuestions.Available, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.Available;
	
	Question = CreateQuestion(NStr("en='Facing';ru='Фейсинг'"), Enums.DataType.Decimal, Enums.SKUQuestions.Facing, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.Facing;
	
	Question = CreateQuestion(NStr("en='Mark up';ru='Наценка'"), Enums.DataType.Decimal, Enums.SKUQuestions.MarkUp, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.MarkUp;
	
	Question = CreateQuestion(NStr("en='Out of stock';ru='Наличие на складе'"), Enums.DataType.Boolean, Enums.SKUQuestions.OutOfStock, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.OutOfStock;
	
	Question = CreateQuestion(NStr("en='Price';ru='Цена'"), Enums.DataType.Decimal, Enums.SKUQuestions.Price, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.Price;
	
	Question = CreateQuestion(NStr("en='Stock';ru='Остаток'"), Enums.DataType.Decimal, Enums.SKUQuestions.Stock, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.Stock;
	
	Question = CreateQuestion(NStr("en='Snapshot';ru='Снимок'"), Enums.DataType.Snapshot, Enums.SKUQuestions.Snapshot, SKUQuestionsGroup);
	
	NewAssignment 				= SKUQuestionsAssignment.Add();
	NewAssignment.Question 		= Question;
	NewAssignment.Assignment 	= Enums.SKUQuestions.Snapshot;
	
	Query = New Query(
	"SELECT
	|	QuestionnaireSKUQuestions1.Ref AS Ref,
	|	QuestionnaireSKUQuestions1.SKUQuestion AS SKUQuestion,
	|	QuestionnaireSKUQuestions1.LineNumber AS LineNumber
	|FROM
	|	Document.Questionnaire.SKUQuestions AS QuestionnaireSKUQuestions1
	|WHERE
	|	QuestionnaireSKUQuestions1.UseInQuestionaire
	|
	|ORDER BY
	|	Ref
	|TOTALS BY
	|	Ref");
	
	SKUQuestions = Query.Execute().Unload(QueryResultIteration.ByGroupsWithHierarchy);
		
	If SKUQuestions.Rows.Count() > 0 Then
		
		For Each QuestionnaireRow In SKUQuestions.Rows Do
			
			For Each SKUQuestionsRow In QuestionnaireRow.Rows Do
				
				Question = GetSKUQuestion(SKUQuestionsRow.SKUQuestion, SKUQuestionsAssignment);
				
				If ValueIsFilled(Question) Then 
				
					RecordManager 					= InformationRegisters.QuestionsInQuestionnaires.CreateRecordManager();
					RecordManager.Questionnaire 	= QuestionnaireRow.Ref;
					RecordManager.ChildQuestion 	= Question;
					RecordManager.QuestionType 		= Enums.QuestionGroupTypes.SKUQuestions;
					RecordManager.Order				= SKUQuestionsRow.LineNumber;
					RecordManager.Obligatoriness 	= False;
					RecordManager.Status 			= Enums.ValueTableRowStatuses.Added;
					RecordManager.Period 			= QuestionnaireRow.Ref.Date;
					
					RecordManager.Write();
					
				EndIf;	
 								
			EndDo;
						
		EndDo;
		
	EndIf;
	
EndProcedure

Procedure ProcessQuestions() 
	
	Query = New Query(
	"SELECT
	|	QuestionnaireQuestions.Ref AS Questionnaire,
	|	QuestionnaireQuestions.Question AS ChildQuestion,
	|	VALUE(Enum.QuestionGroupTypes.RegularQuestions) AS QuestionType,
	|	QuestionnaireQuestions.LineNumber AS Order,
	|	FALSE AS Obligatoriness,
	|	VALUE(Enum.ValueTableRowStatuses.Added) AS Status,
	|	QuestionnaireQuestions.Ref.Date AS Period
	|FROM
	|	Document.Questionnaire.Questions AS QuestionnaireQuestions");
	
	QueryResult = Query.Execute().Unload();
	
	For Each Line In QueryResult Do
		
		RecordManager = InformationRegisters.QuestionsInQuestionnaires.CreateRecordManager();
		FillPropertyValues(RecordManager, Line);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

Procedure ProcessSKUs()
	
	Query = New Query(
	"SELECT
	|	QuestionnaireSKUs.Ref.Date AS Period,
	|	QuestionnaireSKUs.Ref AS Questionnaire,
	|	QuestionnaireSKUs.SKU,
	|	QuestionnaireSKUs.SKU AS Source,
	|	VALUE(Enum.ValueTableRowStatuses.Added) AS Status
	|FROM
	|	Document.Questionnaire.SKUs AS QuestionnaireSKUs");
	
	QueryResult = Query.Execute().Unload();
	
	For Each Line In QueryResult Do
		
		RecordManager = InformationRegisters.SKUsInQuestionnaires.CreateRecordManager();
		FillPropertyValues(RecordManager, Line);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

Procedure ProcessSelectors()
	
	Query = New Query(
		"SELECT
		|	Territories.Ref AS Questionnaire,
		|	Territories.Territory AS Value,
		|	""Catalog_Territory"" AS Selector
		|INTO SelectorValues
		|FROM
		|	Document.Questionnaire.Territories AS Territories
		|WHERE
		|	Territories.Ref.Scale = VALUE(Enum.QuestionnaireScale.Territory)
		|
		|UNION ALL
		|
		|SELECT
		|	Regions.Ref,
		|	Regions.Territory.Owner,
		|	""Catalog_Region""
		|FROM
		|	Document.Questionnaire.Territories AS Regions
		|WHERE
		|	Regions.Ref.Scale = VALUE(Enum.QuestionnaireScale.Region)
		|
		|GROUP BY
		|	Regions.Ref,
		|	Regions.Territory.Owner
		|
		|UNION ALL
		|
		|SELECT
		|	Questionnaire.Ref,
		|	Questionnaire.OutletType,
		|	""Catalog_OutletType""
		|FROM
		|	Document.Questionnaire AS Questionnaire
		|
		|UNION ALL
		|
		|SELECT
		|	Questionnaire.Ref,
		|	Questionnaire.OutletClass,
		|	""Catalog_OutletClass""
		|FROM
		|	Document.Questionnaire AS Questionnaire
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|SELECT
		|	SelectorValues.Questionnaire AS Questionnaire,
		|	SelectorValues.Value,
		|	VALUE(Enum.ComparisonType.Equal) AS ComparisonType,
		|	SelectorValues.Selector
		|FROM
		|	SelectorValues AS SelectorValues
		|
		|ORDER BY
		|	Questionnaire");
	
	QueryResult = Query.Execute().Unload();
	
	CurrentQuestionaire = Undefined;
	
	For Each Line In QueryResult Do
		
		If CurrentQuestionaire = Undefined Then 
			
			CurrentQuestionaire = Line.Questionnaire;
			
			CurrentQuestionaireObject = CurrentQuestionaire.GetObject();
			
			CurrentQuestionaireObject.Selectors.Clear();
			
		EndIf;	
		
		If CurrentQuestionaire = Line.Questionnaire Then 
			
			If ValueIsFilled(Line.Value) Then
			
				Row = CurrentQuestionaireObject.Selectors.Add();
				
				FillPropertyValues(Row, Line);
				
				Row.StringValue	= GetStringFromValue(Row.Value);
				
			EndIf;	
			
		Else 	
			
			CurrentQuestionaire = Line.Questionnaire;
			
			CurrentQuestionaireObject.Write();
			
			CurrentQuestionaireObject = CurrentQuestionaire.GetObject();
			
			CurrentQuestionaireObject.Selectors.Clear();
			
			If ValueIsFilled(Line.Value) Then 
			
				Row = CurrentQuestionaireObject.Selectors.Add();
				
				FillPropertyValues(Row, Line);
				
				Row.StringValue	= GetStringFromValue(Row.Value);
				
			EndIf;	
				
		EndIf;	
				
	EndDo;
	
	If Not CurrentQuestionaire = Undefined Then 
	
		CurrentQuestionaireObject.Write();
		
	EndIf;
	
EndProcedure

Function GUIDFromEnumValue(Value) 
	
	GUID = Mid(ValueToStringInternal(Value), StrLen(ValueToStringInternal(Value))-32,32);
	GUID = Left(GUID,8) + "-" + Mid(GUID,9,4) + "-" + Mid(GUID,13,4) + "-" + Mid(GUID,17,4) + "-" + Right(GUID,12);
	
	Return GUID;	
	
EndFunction

Function GetStringDate(Date)

	Return Format(Date, "DF=ггггММддЧЧмм");
		
EndFunction

Function GetStringFromValue(Value) 
	
	TypeOfValue = TypeOf(Value);
	
	If TypeOfValue = Type("Boolean") Then  
				
		If Value Then
				
	    	Return "True";
				
		Else   
				
			Return "False";
				
		EndIf;
				
	ElsIf TypeOfValue = Type("Date") Then 
				
		Return GetStringDate(Value);
						
	ElsIf TypeOfValue = Type("Number") Then 
				
	    Value = Строка(Value);
        Value = StrReplace(Value, " ", "");
        Value = StrReplace(Value, Chars.NBSp, "");
		Value = StrReplace(Value, ",", ".");
		
		Return Value;
				
	ElsIf Enums.AllRefsType().ContainsType(TypeOfValue) Then 
			
		Return GUIDFromEnumValue(Value);
			
	ElsIf Catalogs.AllRefsType().ContainsType(TypeOfValue) Or Documents.AllRefsType().ContainsType(TypeOfValue) Then  
		
		Return String(Value.UUID());
						
	Else   
			
		Return String(Value);	
				
	EndIf;	    
	
EndFunction

Function GetSKUQuestionsGroup()
	
	SKUQuestionsGroupDescription = NStr("en = ""SKU questions (created automaticaly)""; ru = ""Вопросы по номенклатуре (создано автоматически)""");
	
	SKUQuestionsGroup = Catalogs.QuestionGroup.FindByDescription(SKUQuestionsGroupDescription);
	
	If SKUQuestionsGroup = Catalogs.QuestionGroup.EmptyRef() OR SKUQuestionsGroup.Type = Enums.QuestionGroupTypes.RegularQuestions Then
		
		SKUQuestionsGroup 				= Catalogs.QuestionGroup.CreateItem();
		SKUQuestionsGroup.Description 	= SKUQuestionsGroupDescription;
		SKUQuestionsGroup.Type 			= Enums.QuestionGroupTypes.SKUQuestions;
		
		SKUQuestionsGroup.Write();
		
	EndIf;	
	
	Return SKUQuestionsGroup.Ref;
	
EndFunction

Function GetSKUQuestion(SKUQuestion, SKUQuestionsAssignment)
	
	FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", SKUQuestion));
	
	If Not FindRows.Count() = 0 Then 
	
		Return FindRows.Get(0).Question;
		
	Else 
		
		Return Undefined;
		
	EndIf;
			
EndFunction

Function CreateQuestion(Description, Type, Assignment, Group)
	
	Question = Catalogs.Question.FindByAttribute("Assignment", Assignment, , Group);
	
	If Question = Catalogs.Question.EmptyRef() Then 	
	
		Question 				= Catalogs.Question.CreateItem();
		Question.Description 	= Description;
		Question.AnswerType 	= Type;
		Question.Owner 			= Group;
		Question.Assignment		= Assignment;
			
		Question.Write();
		
	EndIf;
	
	Return Question.Ref;
	
EndFunction

#EndRegion

#Region Update_Visits

Procedure UpdateSKUQuestionsInVisit()
    
	Query = New Query;
	Query.Text = 
		"SELECT
		|	Question.Ref AS Question,
		|	Question.Assignment AS Assignment
		|FROM
		|	Catalog.Question AS Question
		|WHERE
		|	NOT Question.Assignment = VALUE(Enum.SKUQuestions.EmptyRef)";
	
	SKUQuestionsAssignment = Query.Execute().Unload();
	
	Query = New Query();
    Query.Text = 
    "SELECT
    |   Visit.Ref
    |FROM
    |   Document.Visit AS Visit";
	
	RecordSet = query.Execute().Unload();
    
    For Each Row In RecordSet Do
        
        If Row.Ref.SKUs.Count() > 0 Then
			
			VisitObj = Row.Ref.GetObject();
			
			VT = VisitObj.SKUs.Unload();
			
			NewTable = VisitObj.SKUs.Unload();
            NewTable.Clear();
			
			For Each VTRow In VT Do
				
				If Not IsBlankString(VTrow.Available) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.Available));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.Available;
					
				EndIf;
				
				If Not IsBlankString(VTrow.Facing) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.Facing));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.Facing;
					
				EndIf;
				
				If Not IsBlankString(VTrow.Stock) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.Stock));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.Stock;
					
				EndIf;
				
				If Not IsBlankString(VTrow.Price) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.Price));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.Price;
					
                EndIf;
				
				If Not IsBlankString(VTrow.MarkUp) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.MarkUp));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.MarkUp;
					
				EndIf;
				
                If Not IsBlankString(VTrow.OutOfStock) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.OutOfStock));
					
					NewRow.Question = FindRows.Get(0).Question;
					NewRow.Answer 	= VTRow.OutOfStock;
					
				EndIf;
				
                If Not IsBlankString(VTrow.Snapshot) Then
					
					NewRow 			= NewTable.Add();
                    NewRow.SKU 		= VTRow.SKU;
					
					FindRows = SKUQuestionsAssignment.FindRows(New Structure("Assignment", Enums.SKUQuestions.Snapshot));
					
					NewRow.Question = FindRows.Get(0).Question;
	        		NewRow.Answer 	= VTRow.Snapshot;
					
				EndIf;                
				
			EndDo;
            
            VisitObj.SKUs.Load(NewTable);
            VisitObj.Write();
            
        EndIf; 
                
    EndDo;
    
EndProcedure

#EndRegion

#EndRegion


