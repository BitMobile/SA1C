
#Region CommonProceduresAndFunctions

&AtServer
Procedure BeforeWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	Query = New Query(
	"SELECT
	|	FormContractors.Contractor,
	|	FormContractors.Default
	|INTO FormContractors
	|FROM
	|	&FormContractors AS FormContractors
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	PartnersContractorsSliceLast.Contractor,
	|	PartnersContractorsSliceLast.Default
	|INTO RegisterContractors
	|FROM
	|	InformationRegister.PartnersContractors.SliceLast(, Partner = &Partner) AS PartnersContractorsSliceLast
	|WHERE
	|	PartnersContractorsSliceLast.Status <> VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	FormContractors.Contractor AS FormContractor,
	|	FormContractors.Default AS FormDefault,
	|	RegisterContractors.Contractor AS RegisterContractor,
	|	RegisterContractors.Default AS RegisterDefault
	|INTO Difference
	|FROM
	|	FormContractors AS FormContractors
	|		FULL JOIN RegisterContractors AS RegisterContractors
	|		ON FormContractors.Contractor = RegisterContractors.Contractor
	|WHERE
	|	(FormContractors.Contractor IS NULL 
	|				AND FormContractors.Default IS NULL 
	|			OR RegisterContractors.Contractor IS NULL 
	|				AND RegisterContractors.Default IS NULL 
	|			OR NOT FormContractors.Default = RegisterContractors.Default)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	&CurrentDate AS Period,
	|	&Partner AS Partner,
	|	ISNULL(Difference.FormContractor, Difference.RegisterContractor) AS Contractor,
	|	ISNULL(Difference.FormDefault, Difference.RegisterDefault) AS Default,
	|	CASE
	|		WHEN Difference.FormContractor IS NULL 
	|				AND Difference.FormDefault IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterContractor IS NULL 
	|				AND Difference.RegisterDefault IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|		WHEN NOT Difference.FormDefault = Difference.RegisterDefault
	|			THEN VALUE(Enum.ValueTableRowStatuses.Modified)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("FormContractors", ThisForm.Contractors.Unload());
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	Query.SetParameter("CurrentDate", CurrentDate());
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.PartnersContractors.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	Query = New Query(
	"SELECT
	|	PartnersContractorsSliceLast.Contractor,
	|	PartnersContractorsSliceLast.Default
	|FROM
	|	InformationRegister.PartnersContractors.SliceLast(, Partner = &Partner) AS PartnersContractorsSliceLast
	|WHERE
	|	PartnersContractorsSliceLast.Status <> VALUE(Enum.ValueTableRowStatuses.Deleted)");
	
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	
	Result = Query.Execute().Unload();
	
	ThisForm.Contractors.Load(Result);
	
EndProcedure

#EndRegion

#Region UserInterface

#Region Contractors

&AtClient
Procedure ContractorsDefaultOnChange(Item)
	
	CurrentData = Items.Contractors.CurrentData;
	IsNotDefaultAfterChange = CurrentData.Default;
	ThisRowIndex = ThisForm.Contractors.IndexOf(CurrentData);
	ThisRow = ThisForm.Contractors.Get(ThisRowIndex);
	
	If IsNotDefaultAfterChange Then
		
		For Each Row In ThisForm.Contractors Do
			
			Row.Default = ThisForm.Contractors.IndexOf(Row) = ThisRowIndex;
			
		EndDo;
		
	Else
		
		ThisRow.Default = True;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ContractorsAfterDeleteRow(Item)
	
	If ThisForm.Contractors.Count() Then
		
		FilterParameters = New Structure("Default", True);
		NoDefault = NOT ThisForm.Contractors.FindRows(FilterParameters).Count();
		
		If NoDefault Then
			
			ThisForm.Contractors[0].Default = True;
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ContractorsChoiceProcessing(Item, SelectedValue, StandardProcessing)
	
	FilterParameters = New Structure("Contractor", SelectedValue);
	ContractorExists = ThisForm.Contractors.FindRows(FilterParameters).Count();
	
	If NOT ContractorExists Then
		
		FirstItem = ThisForm.Contractors.Count() = 0;
		NewContractorRow = ThisForm.Contractors.Add();
		NewContractorRow.Contractor = SelectedValue;
		NewContractorRow.Default = FirstItem;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Commands

&AtClient
Procedure AddContractor(Command)
	
	ChoiceForm = GetForm("Catalog.Contractors.ChoiceForm", , Items.Contractors);
	
	ChoiceForm.CloseOnChoice = False;
	
	OpenForm(ChoiceForm);
	
EndProcedure

&AtClient
Procedure RemoveContractor(Command)
	
	CurrentData = Items.Contractors.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		CurrentDataIndex = ThisForm.Contractors.IndexOf(CurrentData);
		ThisForm.Contractors.Delete(CurrentDataIndex);
		
	EndIf;
	
	If ThisForm.Contractors.Count() Then
		
		FilterParameters = New Structure("Default", True);
		NoDefault = NOT ThisForm.Contractors.FindRows(FilterParameters).Count();
		
		If NoDefault Then
			
			ThisForm.Contractors[0].Default = True;
			
		EndIf;
		
	EndIf;
	
EndProcedure

#EndRegion

#EndRegion