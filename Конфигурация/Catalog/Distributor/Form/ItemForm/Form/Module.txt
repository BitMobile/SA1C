
#Region CommonProceduresAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	FillContractors();
	
	FillContactList();
	
	FillRegions();
	
	FillTerritories();
	
	HandleContactsAdditionalAccessRights();
	
	SetConditionalAppearence();
	
EndProcedure

&AtServer
Procedure OnWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	If Not Cancel Then
		
		WriteContractors();
		
		WriteContactList();
		
		WriteRegions();
		
		WriteTerritories();
		
	EndIf;
	
EndProcedure

#Region Contractors

&AtServer
Procedure FillContractors()
	
	Query = New Query(
	"SELECT
	|	PartnersContractorsSliceLast.Contractor,
	|	PartnersContractorsSliceLast.Default
	|FROM
	|	InformationRegister.PartnersContractors.SliceLast(, Partner = &Partner) AS PartnersContractorsSliceLast
	|WHERE
	|	PartnersContractorsSliceLast.Status <> VALUE(Enum.ValueTableRowStatuses.Deleted)");
	
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	
	Result = Query.Execute().Unload();
	
	ThisForm.Contractors.Load(Result);
	
EndProcedure

&AtServer
Procedure WriteContractors()
	
	Query = New Query(
	"SELECT
	|	FormContractors.Contractor,
	|	FormContractors.Default
	|INTO FormContractors
	|FROM
	|	&FormContractors AS FormContractors
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	PartnersContractorsSliceLast.Contractor,
	|	PartnersContractorsSliceLast.Default
	|INTO RegisterContractors
	|FROM
	|	InformationRegister.PartnersContractors.SliceLast(, Partner = &Partner) AS PartnersContractorsSliceLast
	|WHERE
	|	PartnersContractorsSliceLast.Status <> VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	FormContractors.Contractor AS FormContractor,
	|	FormContractors.Default AS FormDefault,
	|	RegisterContractors.Contractor AS RegisterContractor,
	|	RegisterContractors.Default AS RegisterDefault
	|INTO Difference
	|FROM
	|	FormContractors AS FormContractors
	|		FULL JOIN RegisterContractors AS RegisterContractors
	|		ON FormContractors.Contractor = RegisterContractors.Contractor
	|WHERE
	|	(FormContractors.Contractor IS NULL 
	|				AND FormContractors.Default IS NULL 
	|			OR RegisterContractors.Contractor IS NULL 
	|				AND RegisterContractors.Default IS NULL 
	|			OR NOT FormContractors.Default = RegisterContractors.Default)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	&CurrentDate AS Period,
	|	&Partner AS Partner,
	|	ISNULL(Difference.FormContractor, Difference.RegisterContractor) AS Contractor,
	|	ISNULL(Difference.FormDefault, Difference.RegisterDefault) AS Default,
	|	CASE
	|		WHEN Difference.FormContractor IS NULL 
	|				AND Difference.FormDefault IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterContractor IS NULL 
	|				AND Difference.RegisterDefault IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|		WHEN NOT Difference.FormDefault = Difference.RegisterDefault
	|			THEN VALUE(Enum.ValueTableRowStatuses.Modified)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("FormContractors", ThisForm.Contractors.Unload());
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	Query.SetParameter("CurrentDate", CurrentDate());
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.PartnersContractors.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

#EndRegion

#Region ContactList

&AtServer
Procedure FillContactList()
	
	Query = New Query(
	"SELECT
	|	ObjectsContacts.ContactPerson AS Contact
	|FROM
	|	InformationRegister.ObjectsContacts AS ObjectsContacts
	|WHERE
	|	ObjectsContacts.Object = &Object
	|	AND ObjectsContacts.NotActual = FALSE");
	
	Query.SetParameter("Object", Object.Ref);
	
	Result = Query.Execute().Unload();
	
	ThisForm.ContactList.Load(Result);
	
EndProcedure

&AtServer
Procedure WriteContactList()
	
	Query = New Query(
	"SELECT
	|	FormContacts.Contact
	|INTO FormContacts
	|FROM
	|	&FormContacts AS FormContacts
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	ObjectsContacts.ContactPerson
	|INTO RegisterContacts
	|FROM
	|	InformationRegister.ObjectsContacts AS ObjectsContacts
	|WHERE
	|	ObjectsContacts.Object = &Object
	|	AND ObjectsContacts.NotActual = FALSE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	FormContacts.Contact AS FormContact,
	|	RegisterContacts.ContactPerson AS RegisterContact
	|INTO Difference
	|FROM
	|	FormContacts AS FormContacts
	|		FULL JOIN RegisterContacts AS RegisterContacts
	|		ON FormContacts.Contact = RegisterContacts.ContactPerson
	|WHERE
	|	(FormContacts.Contact IS NULL 
	|			OR RegisterContacts.ContactPerson IS NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	&Object AS Object,
	|	ISNULL(Difference.FormContact, Difference.RegisterContact) AS ContactPerson,
	|	CASE
	|		WHEN Difference.FormContact IS NULL 
	|			THEN TRUE
	|		ELSE FALSE
	|	END AS NotActual
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("FormContacts", ThisForm.ContactList.Unload());
	Query.SetParameter("Object", ThisForm.Object.Ref);
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.ObjectsContacts.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

&AtServer
Procedure HandleContactsAdditionalAccessRights()
	
	CurrentUser = SessionParameters.CurrentUser;
	EditContactsAccessRight = Catalogs.AdditionalAccessRights.EditPartnerContacts;
	IsAdmin = Not ValueIsFilled(CurrentUser.RoleOfUser);
	HasRightToEditContacts = Not CurrentUser.RoleOfUser.AdditionalAccessRights.Find(EditContactsAccessRight) = Undefined;
	EnableContactEdit = IsAdmin OR HasRightToEditContacts;
	Items.ContactListAddContact.Enabled = EnableContactEdit;
	Items.ContactListDeleteContact.Enabled = EnableContactEdit;
	
EndProcedure

#EndRegion

#Region Regions

&AtServer
Procedure FillRegions()
	
	Query = New Query(
	"SELECT ALLOWED
	|	ObjectsRegionsSliceLast.Region AS Region
	|INTO AddedRegions
	|FROM
	|	InformationRegister.ObjectsRegions.SliceLast(, Object = &Partner) AS ObjectsRegionsSliceLast
	|WHERE
	|	ObjectsRegionsSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Added)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	CatalogRegion.Ref AS Region,
	|	CASE
	|		WHEN AddedRegions.Region IS NULL 
	|			THEN FALSE
	|		ELSE TRUE
	|	END AS Use
	|FROM
	|	Catalog.Region AS CatalogRegion
	|		LEFT JOIN AddedRegions AS AddedRegions
	|		ON CatalogRegion.Ref = AddedRegions.Region
	|
	|ORDER BY
	|	Region HIERARCHY");
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	Result = Query.Execute().Unload(QueryResultIteration.ByGroupsWithHierarchy);
	
	ValueToFormAttribute(Result, "Regions");
	
EndProcedure

&AtServer
Procedure WriteRegions()
	
	FormRegions = New ValueTable;
	FormRegions.Columns.Add("Region", New TypeDescription("CatalogRef.Region"));
	
	For Each Child In ThisForm.Regions.GetItems() Do
		
		ProcessRegions(Child, FormRegions);
		
	EndDo;
	
	Query = New Query(
	"SELECT ALLOWED
	|	FormRegions.Region AS FormRegion
	|INTO FormRegions
	|FROM
	|	&FormRegions AS FormRegions
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	ObjectsRegionsSliceLast.Region AS RegisterRegion
	|INTO RegisterRegions
	|FROM
	|	InformationRegister.ObjectsRegions.SliceLast(, Object = &Partner) AS ObjectsRegionsSliceLast
	|WHERE
	|	NOT ObjectsRegionsSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	FormRegions.FormRegion,
	|	RegisterRegions.RegisterRegion
	|INTO Difference
	|FROM
	|	FormRegions AS FormRegions
	|		FULL JOIN RegisterRegions AS RegisterRegions
	|		ON FormRegions.FormRegion = RegisterRegions.RegisterRegion
	|WHERE
	|	(FormRegions.FormRegion IS NULL 
	|			OR RegisterRegions.RegisterRegion IS NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	&CurrentDate AS Period,
	|	&Partner AS Object,
	|	ISNULL(Difference.FormRegion, Difference.RegisterRegion) AS Region,
	|	CASE
	|		WHEN Difference.FormRegion IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterRegion IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("CurrentDate", CurrentDate());
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	Query.SetParameter("FormRegions", FormRegions);
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.ObjectsRegions.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

&AtServer
Procedure ProcessRegions(Parent, FormRegions)
	
	If Parent.Use = 1 Then
		
		Row = FormRegions.Add();
		Row.Region = Parent.Region;
		
	EndIf;
	
	Children = Parent.GetItems();
	
	For Each Child In Children Do
		
		ProcessRegions(Child, FormRegions);
		
	EndDo;
	
EndProcedure

#EndRegion

#Region Territories

&AtServer
Procedure FillTerritories()
	
	Query = New Query(
	"SELECT ALLOWED
	|	ObjectsTerritoriesSliceLast.Territory
	|INTO SavedTerritories
	|FROM
	|	InformationRegister.ObjectsTerritories.SliceLast(, Object = &Partner) AS ObjectsTerritoriesSliceLast
	|WHERE
	|	NOT ObjectsTerritoriesSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	CatalogTerritory.Owner AS Region,
	|	CatalogTerritory.Ref AS Territory,
	|	CASE
	|		WHEN SavedTerritories.Territory IS NULL 
	|			THEN FALSE
	|		ELSE TRUE
	|	END AS Use
	|FROM
	|	Catalog.Territory AS CatalogTerritory
	|		LEFT JOIN SavedTerritories AS SavedTerritories
	|		ON CatalogTerritory.Ref = SavedTerritories.Territory
	|
	|ORDER BY
	|	Region
	|AUTOORDER");
	
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	
	Result = Query.Execute().Unload();
	
	ThisForm.Territories.Load(Result);
	
EndProcedure

&AtServer
Procedure WriteTerritories()
	
	Filter = New Structure;
	Filter.Insert("Use", True);
	UsedTerritories = ThisForm.Territories.FindRows(Filter);
	
	Query = New Query(
	"SELECT ALLOWED
	|	FormTerritories.Territory AS FormTerritory
	|INTO FormTerritories
	|FROM
	|	&FormTerritories AS FormTerritories
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	ObjectsTerritoriesSliceLast.Territory AS RegisterTerritory
	|INTO RegisterTerritories
	|FROM
	|	InformationRegister.ObjectsTerritories.SliceLast(, Object = &Partner) AS ObjectsTerritoriesSliceLast
	|WHERE
	|	NOT ObjectsTerritoriesSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	FormTerritories.FormTerritory,
	|	RegisterTerritories.RegisterTerritory
	|INTO Difference
	|FROM
	|	FormTerritories AS FormTerritories
	|		FULL JOIN RegisterTerritories AS RegisterTerritories
	|		ON FormTerritories.FormTerritory = RegisterTerritories.RegisterTerritory
	|WHERE
	|	(FormTerritories.FormTerritory IS NULL 
	|			OR RegisterTerritories.RegisterTerritory IS NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	&CurrentDate AS Period,
	|	&Partner AS Object,
	|	ISNULL(Difference.FormTerritory, Difference.RegisterTerritory) AS Territory,
	|	CASE
	|		WHEN Difference.FormTerritory IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterTerritory IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("CurrentDate", CurrentDate());
	Query.SetParameter("Partner", ThisForm.Object.Ref);
	Query.SetParameter("FormTerritories", ThisForm.Territories.Unload(UsedTerritories));
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.ObjectsTerritories.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

#EndRegion

&AtServer
Procedure SetConditionalAppearence()
	
	// Green color for territories with current selected region
	CA = ThisForm.ConditionalAppearance;
	CAItem = CA.Items.Add();
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesRegion");
	Field.Use = True;
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesTerritory");
	Field.Use = True;
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesUse");
	Field.Use = True;
	
	FilterItem = CAItem.Filter.Items.Add(Type("DataCompositionFilterItem"));
	FilterItem.LeftValue = New DataCompositionField("Territories.Region");
	FilterItem.ComparisonType = DataCompositionComparisonType.Equal;
	FilterItem.RightValue = New DataCompositionField("CurrentRegion");
	
	CAItem.Appearance.SetParameterValue("BackColor", WebColors.PaleGreen);
	
	// Block use of territories that are not in current selected region
	CAItem = CA.Items.Add();
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesUse");
	Field.Use = True;
	
	FilterItem = CAItem.Filter.Items.Add(Type("DataCompositionFilterItem"));
	FilterItem.LeftValue = New DataCompositionField("Territories.Region");
	FilterItem.ComparisonType = DataCompositionComparisonType.NotEqual;
	FilterItem.RightValue = New DataCompositionField("CurrentRegion");
	
	CAItem.Appearance.SetParameterValue("ReadOnly", True);
	
EndProcedure

#EndRegion

#Region UserInterface

&AtClient
Procedure NotificationProcessing(EventName, Parameter, Source)
	
	If EventName = "Update" Then
		
		ThisForm.Items.ContactList.Refresh();
		
	EndIf;
	
EndProcedure

#Region Contractors

&AtClient
Procedure ContractorsDefaultOnChange(Item)
	
	CurrentData = Items.Contractors.CurrentData;
	IsNotDefaultAfterChange = CurrentData.Default;
	ThisRowIndex = ThisForm.Contractors.IndexOf(CurrentData);
	ThisRow = ThisForm.Contractors.Get(ThisRowIndex);
	
	If IsNotDefaultAfterChange Then
		
		For Each Row In ThisForm.Contractors Do
			
			Row.Default = ThisForm.Contractors.IndexOf(Row) = ThisRowIndex;
			
		EndDo;
		
	Else
		
		ThisRow.Default = True;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ContractorsChoiceProcessing(Item, SelectedValue, StandardProcessing)
	
	FilterParameters = New Structure("Contractor", SelectedValue);
	ContractorExists = ThisForm.Contractors.FindRows(FilterParameters).Count();
	
	If NOT ContractorExists Then
		
		FirstItem = ThisForm.Contractors.Count() = 0;
		NewContractorRow = ThisForm.Contractors.Add();
		NewContractorRow.Contractor = SelectedValue;
		NewContractorRow.Default = FirstItem;
		Modified = True;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region ContactList

&AtClient
Procedure ContactListSelection(Item, SelectedRow, Field, StandardProcessing)
	
	CurrentData = Items.ContactList.CurrentData;
	
	If NOT CurrentData = Undefined Then
		
		OpenForm("Catalog.ContactPersons.ObjectForm", New Structure("Key", CurrentData.Contact), ThisForm);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ContactListChoiceProcessing(Item, SelectedValue, StandardProcessing)
	
	FilterParameters = New Structure("Contact", SelectedValue);
	ContactExists = ThisForm.ContactList.FindRows(FilterParameters).Count();
	
	If Not ContactExists Then
		
		NewContactRow = ThisForm.ContactList.Add();
		NewContactRow.Contact = SelectedValue;
		Modified = True;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Regions

&AtClient
Procedure RegionsBeforeCollapse(Item, Row, Cancel)
	
	Cancel = True;
	
EndProcedure

&AtClient
Procedure RegionsOnActivateRow(Item)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	CurrentRegion = ?(CurrentData = Undefined, Undefined, CurrentData.Region);
	
	Filter = New FixedStructure("Region", CurrentRegion);
	ThisForm.Items.Territories.RowFilter = ?(ThisForm.Items.ShowAllTerritories.Check, Undefined, Filter);
	
	ThisForm.CurrentRegion = CurrentRegion;
	
	ThisForm.Items.Territories.Refresh();
	
EndProcedure

&AtClient
Procedure RegionsUseOnChange(Item)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		If Not CurrentData.Use Then
		
			Filter = New Structure;
			Filter.Insert("Region", CurrentData.Region);
			
			TerritoriesRows = ThisForm.Territories.FindRows(Filter);
			
			For Each Row In TerritoriesRows Do
				
				Row.Use = False;
				
			EndDo;
			
		EndIf;
		
	EndIf;
	
	ThisForm.Items.Territories.Refresh();
	
EndProcedure

#EndRegion

#Region Territories

&AtClient
Procedure CheckTerritories(Value)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		If CurrentData.Use Then
		
			Filter = New Structure;
			Filter.Insert("Region", CurrentData.Region);
			
			Rows = ThisForm.Territories.FindRows(Filter);
			
			For Each Row In Rows Do
				
				Row.Use = Value;
				Modified = True;
				
			EndDo;
			
		EndIf;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Commands

&AtClient
Procedure AddContractor(Command)
	
	ChoiceForm = GetForm("Catalog.Contractors.ChoiceForm", , Items.Contractors);
	
	ChoiceForm.CloseOnChoice = False;
	
	OpenForm(ChoiceForm);
	
EndProcedure

&AtClient
Procedure RemoveContractor(Command)
	
	CurrentData = Items.Contractors.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		CurrentDataIndex = ThisForm.Contractors.IndexOf(CurrentData);
		ThisForm.Contractors.Delete(CurrentDataIndex);
		Modified = True;
		
	EndIf;
	
	If ThisForm.Contractors.Count() Then
		
		FilterParameters = New Structure("Default", True);
		NoDefault = NOT ThisForm.Contractors.FindRows(FilterParameters).Count();
		
		If NoDefault Then
			
			ThisForm.Contractors[0].Default = True;
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure AddContact(Command)
	
	ChoiceForm = GetForm("Catalog.ContactPersons.ChoiceForm", , Items.ContactList);
	
	ChoiceForm.CloseOnChoice = False;
	
	OpenForm(ChoiceForm);
	
EndProcedure

&AtClient
Procedure DeleteContact(Command)
	
	CurrentData = Items.ContactList.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		CurrentDataIndex = ThisForm.ContactList.IndexOf(CurrentData);
		ThisForm.ContactList.Delete(CurrentDataIndex);
		Modified = True;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure CheckAllTerritories(Command)
	
	CheckTerritories(True);
	
EndProcedure

&AtClient
Procedure UncheckAllTerritories(Command)
	
	CheckTerritories(False);
	
EndProcedure

&AtClient
Procedure ShowAllTerritories(Command)
	
	ThisForm.Items.ShowAllTerritories.Check = Not ThisForm.Items.ShowAllTerritories.Check;
	ShowAll = ThisForm.Items.ShowAllTerritories.Check;
	CurrentData = ThisForm.Items.Regions.CurrentData;
	RegionSelected = Not CurrentData = Undefined;
	ThisForm.Items.Territories.RowFilter = ?(ShowAll AND RegionSelected, Undefined, New FixedStructure("Region", ThisForm.Items.Regions.CurrentData.Region));
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		CurrentRegion = CurrentData.Region;
		
	EndIf;
	
EndProcedure

#EndRegion

#EndRegion