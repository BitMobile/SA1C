
#Region CommonProcedureAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	If Object.Role = "Admin" Then 
		
		UserMessage			= New UserMessage;
		UserMessage.Text	= NStr("ru = ""Нельзя изменять пользователей с полными правами""; en = ""Changing users with full rights is disabled""");
		
		UserMessage.Message();
		
		ThisForm.ReadOnly = True;
		
		Items.RoleOfUser.Visible = False;
		Items.Password.Visible = False;
		Items.Manager.Visible = False;
		Items.Position.Visible = False;
		Items.EMail.Visible = False;
		
	EndIf;
	
	// Заполнить языки интерфейса
	If Metadata.Languages.Count() < 2 Then 
		
		Items.InterfaceLanguage.Visible = False;
		
	Else 
		
		For Each MetaLanguage In Metadata.Languages Do 
			
			Items.InterfaceLanguage.ChoiceList.Add(MetaLanguage.Name);
			
		EndDo;
		
	EndIf;
		
	// Первоначальное заполнение пользователя
	If Not ValueIsFilled(Object.Ref) Then 
		
		Object.InterfaceLanguage = Metadata.Languages.Русский.Name;
		
	EndIf;
	
	FillRegions();
	FillTerritories();
	
EndProcedure

&AtServer
Procedure FillCheckProcessingAtServer(Cancel, CheckedAttributes)
	
	If Not Object.Role = "Admin" Then 
	
		If Not ValueIsFilled(Object.RoleOfUser) Then 
			
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("ru = ""Не заполнена роль пользователя""; en = ""Not filled role of user""");
			
			UserMessage.Message();
			
			Cancel = True;
			
		EndIf;
		
	EndIf;
	
	If Not ValueIsFilled(Object.Password) Then 
			
		UserMessage			= New UserMessage;
		UserMessage.Text	= NStr("ru = ""Запрещено создавать пользователей с пустым паролем""; en = ""It is forbidden to create a user with a blank password""");
		
		UserMessage.Message();
		
		Cancel = True;
		
	EndIf;
	
	If Not ValueIsFilled(Object.InterfaceLanguage) Then 
			
		UserMessage			= New UserMessage;
		UserMessage.Text	= NStr("ru = ""Не заполнен язык интерфейса""; en = ""Not filled interface language""");
		
		UserMessage.Message();
		
		Cancel = True;
		
	EndIf;
	
EndProcedure

&AtServer
Procedure OnWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	// Проверить заполнение таблиц регионов и территорий
	If Object.RoleOfUser.Role = "SRM_SR" Or Object.RoleOfUser.Role = "SRM" Then 
		
		If Regions.Count() = 0 Then 
			
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("en = 'User has access to the information base, the list of regions must be filled.'; ru = 'Пользователь имеет доступ в информационную базу, список регионов должен быть заполнен.'");
			
			UserMessage.Message();
			
			Cancel = True;
			
		EndIf;
		
	EndIf;
	
	If Object.RoleOfUser.Role = "SRM_SR" Or Object.RoleOfUser.Role = "SR" Then 
		
		If Territories.Count() = 0 Then 
			
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("en = 'User has access to a mobile application, the list of territories must be filled.'; ru = 'Пользователь имеет доступ к мобильному приложению, список территорий должен быть заполнен.'");
			
			UserMessage.Message();
			
			Cancel = True;
			
		EndIf;
		
	EndIf;
	
	If Not Cancel Then 
	
		// Записать пользователя в регионы
		Query = New Query;
		Query.Text = 
			"SELECT ALLOWED
			|	RegionManagers.Ref AS Region
			|FROM
			|	Catalog.Region.Managers AS RegionManagers
			|WHERE
			|	RegionManagers.Manager = &User
			|	AND NOT RegionManagers.Ref IN (&RGArray)";
		
		Query.SetParameter("User", Object.Ref);
		Query.SetParameter("RGArray", Regions.Unload().UnloadColumn("Region"));
		
		QueryResult = Query.Execute();
		
		Selection = QueryResult.Select();
		
		While Selection.Next() Do
			
			RGObject = Selection.Region.GetObject();
			
			FoundString = RGObject.Managers.Find(Object.Ref);
			
			If Not FoundString = Undefined Then 
				
				RGObject.Managers.Delete(FoundString);
				
			EndIf;
			
			RGObject.Write();
			
		EndDo;
			
		For Each Row In Regions Do 
			
			RGObject = Row.Region.GetObject();
			
			FoundString = RGObject.Managers.Find(Object.Ref);
			
			If FoundString = Undefined Then 
				
				NewRow					= RGObject.Managers.Add();
				NewRow.Manager			= Object.Ref;
				NewRow.LineNumberInUser	= Row.LineNumber;
				
			Else 
				
				FoundString.LineNumberInUser = Row.LineNumber;
				
			EndIf;
			
			RGObject.Write();
			
		EndDo;
		
		// Записать пользователя в территории
		Query = New Query;
		Query.Text = 
			"SELECT ALLOWED
			|	TerritorySRs.Ref AS Territory
			|FROM
			|	Catalog.Territory.SRs AS TerritorySRs
			|WHERE
			|	TerritorySRs.SR = &User
			|	AND NOT TerritorySRs.Ref IN (&TRArray)";
		
		Query.SetParameter("User", Object.Ref);
		Query.SetParameter("TRArray", Territories.Unload().UnloadColumn("Territory"));
		
		QueryResult = Query.Execute();
		
		Selection = QueryResult.Select();
		
		While Selection.Next() Do
			
			TRObject = Selection.Territory.GetObject();
			
			FoundString = TRObject.SRs.Find(Object.Ref);
			
			If Not FoundString = Undefined Then 
				
				TRObject.SRs.Delete(FoundString);
				
			EndIf;
			
			TRObject.Write();
			
		EndDo;
			
		For Each Row In Territories Do 
			
			TRObject = Row.Territory.GetObject();
			
			FoundString = TRObject.SRs.Find(Object.Ref);
			
			If FoundString = Undefined Then 
				
				NewRow					= TRObject.SRs.Add();
				NewRow.SR				= Object.Ref;
				NewRow.LineNumberInUser	= Row.LineNumber;
				
			Else 
				
				FoundString.LineNumberInUser = Row.LineNumber;
				
			EndIf;
			
			TRObject.Write();
			
		EndDo;
		
	EndIf;
	
EndProcedure

&AtServer
Procedure FillRegions()
	
	// Заполнить регионы
	Regions.Clear();
	
	If ValueIsFilled(Object.Ref) Then 
	
		Query = New Query;
		Query.Text = 
			"SELECT ALLOWED DISTINCT
			|	RegionManagers.Ref AS Region,
			|	RegionManagers.LineNumberInUser AS LineNumberInUser
			|FROM
			|	Catalog.Region.Managers AS RegionManagers
			|WHERE
			|	RegionManagers.Manager = &User
			|
			|ORDER BY
			|	LineNumberInUser";
		
		Query.SetParameter("User", Object.Ref);
		
		QueryResult = Query.Execute();
		
		Selection = QueryResult.Select();
		
		While Selection.Next() Do
			
			NewRow			= Regions.Add();
			NewRow.Region	= Selection.Region;
			
		EndDo;
		
	EndIf;	
	
EndProcedure

&AtServer
Procedure FillTerritories()
	
	// Заполнить регионы
	Territories.Clear();
	
	If ValueIsFilled(Object.Ref) Then 
	
		Query = New Query;
		Query.Text = 
			"SELECT ALLOWED DISTINCT
			|	TerritorySRs.Ref AS Territory,
			|	TerritorySRs.LineNumberInUser AS LineNumberInUser
			|FROM
			|	Catalog.Territory.SRs AS TerritorySRs
			|WHERE
			|	TerritorySRs.SR = &User
			|
			|ORDER BY
			|	LineNumberInUser";
		
		Query.SetParameter("User", Object.Ref);
		
		QueryResult = Query.Execute();
		
		Selection = QueryResult.Select();
		
		While Selection.Next() Do
			
			NewRow				= Territories.Add();
			NewRow.Territory	= Selection.Territory;
			
		EndDo;
		
	EndIf;
	
EndProcedure

&AtServer
Function UniqueCheck(Attribute)
	
	FoundRef = Catalogs.User.FindByAttribute(Attribute, Object[Attribute]);
	
	If FoundRef = Catalogs.User.EmptyRef() Then
		
		FoundRef = True;
		
	Else
		
		FoundRef = False;
		
	EndIf;
	
	Return FoundRef;

EndFunction

&AtServer
Function ItsFolder(Value)
	
	If Value.IsFolder Then 
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
		
EndFunction

#EndRegion

#Region UserInterface

&AtClient
Procedure OnOpen(Cancel)
	
	TerritoriesOnChange(Items.Territories);
	RegionsOnChange(Items.Regions);
	
EndProcedure

&AtClient
Procedure AfterWrite(WriteParameters)
	
	TerritoriesOnChange(Items.Territories);
	RegionsOnChange(Items.Regions);
	
EndProcedure

&AtClient
Procedure SetLineNumbers(Collection)
	
	Ind = 0;
	
	For Each ItemElement In Collection Do 
		
		Ind = Ind + 1;
		
		ItemElement.LineNumber = Ind;
		
	EndDo;
	
EndProcedure

&AtClient
Procedure UserNameOnChange(Item)
	
	UserNameChecked();
	
EndProcedure

&AtClient
Function UserNameChecked()

	If Not UniqueCheck("UserName") Then
		
		UserMessage			= New UserMessage;
		UserMessage.Text	= NStr("en = ""This login is already used""; ru = ""Этот логин уже используется""");
		
		UserMessage.Message();
		
		Object.UserName = Undefined;
		
		Return False;
		
	EndIf;

EndFunction

&AtClient
Procedure ManagerStartChoice(Item, ChoiceData, StandardProcessing)
	
	StandardProcessing = False;
	
	ChoiseForm = GetForm("Catalog.User.ChoiceForm");
	
	FilterOfList = ChoiseForm.List.Filter;
	
	ListOfValues = New ValueList;
	ListOfValues.Add("SRM_SR");
	ListOfValues.Add("SRM");
	
	FilterElement					= FilterOfList.Items.Add(Type("DataCompositionFilterItem"));
	FilterElement.LeftValue			= New DataCompositionField("RoleOfUser.Role");
	FilterElement.ComparisonType	= DataCompositionComparisonType.InList;
	FilterElement.Use				= True;
	FilterElement.ViewMode			= DataCompositionSettingsItemViewMode.Inaccessible;
	FilterElement.RightValue		= ListOfValues;
	
	ChoiseForm.FormOwner			= Item;
	ChoiseForm.CloseOnChoice		= True;
	ChoiseForm.CloseOnOwnerClose	= True;
	
	ChoiseForm.Open();	
		
EndProcedure

&AtClient
Procedure TerritoriesOnChange(Item)
	
	SetLineNumbers(Territories);
	
EndProcedure

&AtClient
Procedure RegionsOnChange(Item)
	
	SetLineNumbers(Regions);
	
EndProcedure

&AtClient
Procedure RegionsBeforeEditEnd(Item, NewRow, CancelEdit, Cancel)
	
	If Not CancelEdit Then 
		
		If Not ValueIsFilled(Items.Regions.CurrentData.Region) Then 
			
			Message(NStr("en = 'Value is not selected'; ru = 'Значение не выбрано'"));
			
			Cancel = True;
			
		EndIf;
				
	EndIf;
	
EndProcedure

&AtClient
Procedure TerritoriesBeforeEditEnd(Item, NewRow, CancelEdit, Cancel)
	
	If Not CancelEdit Then 
		
		If Not ValueIsFilled(Items.Territories.CurrentData.Territory) Then 
			
			Message(NStr("en = 'Value is not selected'; ru = 'Значение не выбрано'"));
			
			Cancel = True;
			
		EndIf;
				
	EndIf;
	
EndProcedure

#EndRegion



 

