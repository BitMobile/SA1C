////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	// Кэш проверки
	ЭтоНовый = Object.Ссылка.Пустая();

	//Если ПараметрыСеанса.ТекущийПользователь.Role <> "Admin" И НЕ ЭтоНовый Тогда
		
	Если Object.Role = "Admin" тогда
		Сообщить(NStr("ru = ""Нельзя изменять пользоватлей с полными правами""; en = ""Changing users with full rights is enabled"""));
		ThisForm.ReadOnly = True;
	КонецЕсли;

	//КонецЕсли;	
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИнфБазыЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
			
			Элементы.ПользовательИнфБазыЯзык.СписокВыбора.Добавить(
			МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;

	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	Для каждого Роль Из Метаданные.Роли Цикл
		Если  Роль.Name = "Admin" Тогда
			Продолжить;
		Иначе	
			Элементы.Role.СписокВыбора.Добавить(Роль.Name, Строка(Роль.Synonym));
		КонецЕсли;
	КонецЦикла;
	
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ЗначениеЗаполнено(Object.Ссылка) Тогда
		// Создание нового элемента.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Object.UserName = "";
			ПрочитатьПользователяИБ(
			ЗначениеЗаполнено(Параметры.ЗначениеКопирования.UserID));
		Иначе
			// Добавление элемента.
			Object.UserID = Параметры.UserID;
			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	ОпределитьДействияВФорме();

	ОпределитьНесоответствияПользователяСПользователемИБ();

EndProcedure

&НаКлиенте
Процедура ПередЗаписью(Отказ)
    	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		ЗаголовокВопросов = НСтр("en = 'Запись пользователя информационной базы'");
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	
	ДоступКИнформационнойБазеРазрешен = ТекущийОбъект.Role = "SRM";
	
	ПользовательИнфБазыИмя = Object.UserName;
	ПользовательИнфБазыПолноеИмя = Object.Description;
	ПользовательИнфБазыПароль = Object.Password;
	Пароль = Object.Password;
	ПодтверждениеПароля =  Object.Password;
	ПользовательИнфБазыАутентификацияСтандартная =  ДоступКИнформационнойБазеРазрешен;
	ПользовательИнфБазыЗапрещеноИзменятьПароль   =  ДоступКИнформационнойБазеРазрешен;
	ПользовательИнфБазыПоказыватьВСпискеВыбора   =  Ложь;
	ПользовательИнфБазыЯзык = Object.InterfaceLanguage;

	// Восстановление действий в форме, если они изменены на клиенте
	ОпределитьДействияВФорме();
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех"
	 ИЛИ ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих" Тогда
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Удалить("ПодтверждениеПароля");
		
		Если ДоступКИнформационнойБазеРазрешен Тогда
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		Иначе
			ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		
		ЗаполнитьЗначенияСвойств(
			ТекущийОбъект,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТребуетсяСинхронизацияССервисом = Ложь;
	
	ПараметрыЗаписи.Вставить(
		ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	
	ПрочитатьПользователяИБ();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Пользователи", Новый Структура, Object.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищенаСвязьСНесуществующимПользователемИБ") Тогда
		Оповестить(
			"ОчищенаСвязьСНесуществующимПользователемИБ",
			ПараметрыЗаписи.ОчищенаСвязьСНесуществующимПользователемИБ,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("UserID", Object.UserID);
		ПользователиСлужебный.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПолноеИмяПоПользователюИБ(Команда)
	
	Object.Description = ПользовательИнфБазыПолноеИмя;
	Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступКИнформационнойБазеРазрешенПриИзменении(Элемент)
	
	Если НЕ ПользовательИБСуществует
	   И ДоступКИнформационнойБазеРазрешен Тогда
		
		ПользовательИнфБазыИмя =
			ОбщегоНазначенияКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
				Object.UserName);
		
		ПользовательИнфБазыПолноеИмя = Object.Description;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "ПросмотрВсех", "РедактированиеВсех", "РедактированиеСвоих".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "");
	
	//Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Администратор.
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	//ИначеЕсли РольДоступна("ДобавлениеИзменениеПользователей")
	//		И НЕ Пользователи.ЭтоПолноправныйПользователь(Object.Ссылка) Тогда
	//	ДействияВФорме.Роли                   = "";
	//	ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
	//	ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	//Иначе
	//	// Чужие свойства.
	//	ДействияВФорме.Роли                   = "";
	//	ДействияВФорме.СвойстваПользователяИБ = "";
	//	ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	//КонецЕсли;
	
	// Проверка имен действий в форме.
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	КонецЕсли;
	
	Если Найти(", ПросмотрВсех, РедактированиеВсех, РедактированиеСвоих,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ()
	
	ПользовательИнфБазыПолноеИмя = Object.Description;
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтаФорма,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИнфБазы");
		
	Иначе
		// РедактированиеСвоих.
		Результат = Новый Структура;
		Результат.Вставить("Пароль", ПользовательИнфБазыПароль);
		Результат.Вставить("Язык",   ПользовательИнфБазыЯзык);
	КонецЕсли;
	Результат.Вставить("ПодтверждениеПароля", ПодтверждениеПароля);
	
	Если ДействияВФорме.Роли = "Редактирование" Тогда
		ТекущиеРоли = Новый Массив;
		ТекущиеРоли.Добавить(Object.Role);
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка пользователя ИБ.

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пароль              = "";
	ПодтверждениеПароля = "";
	ПрочитанныеСвойства               = Неопределено;
	ОписаниеПользователяИБ            = Пользователи.НовоеОписаниеПользователяИБ();
	ПользовательИБСуществует          = Ложь;
	ДоступКИнформационнойБазеРазрешен = Ложь;
	
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	Если  NOT IsBlankString(TrimAll(Object.InterfaceLanguage)) Тогда 
		ОписаниеПользователяИБ.Язык = Object.InterfaceLanguage;
	КонецЕсли;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(
		         Параметры.ЗначениеКопирования.UserID,
		         ПрочитанныеСвойства) Тогда
			
			// Установка связи пользователем ИБ.
			ДоступКИнформационнойБазеРазрешен = Истина;
			
			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|АутентификацияОС,
				|РежимЗапуска,
				|Язык,
				|Роли");
		КонецЕсли;
		Object.UserID = Неопределено;
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(
		         Object.UserID,
		         ПрочитанныеСвойства) Тогда
		
			ПользовательИБСуществует          = Истина;
			ДоступКИнформационнойБазеРазрешен = Истина;
			
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|РежимЗапуска,
				|Язык,
				|Роли");
			
			Если ПрочитанныеСвойства.ПарольУстановлен Тогда
				Пароль              = "**********";
				ПодтверждениеПароля = "**********";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтаФорма,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,Роли",
		"ПользовательИнфБазы");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	// Проверка соответствия свойства "ПолноеИмя" пользователяИБ и
	// свойства "Наименование" пользователя.
	
	Если НЕ (  ДействияВФорме.СвойстваЭлемента       = "Редактирование"
	         И ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех") Тогда
		
		// Прочитанное ПолноеИмя пользователя не может быть изменено, если не совпадает.
		ПользовательИнфБазыПолноеИмя = Неопределено;
	КонецЕсли;
	
	Если НЕ ПользовательИБСуществует
		ИЛИ ПользовательИнфБазыПолноеИмя = Неопределено
		ИЛИ ПользовательИнфБазыПолноеИмя = Object.Description Тогда
		
	Иначе
		Object.Description = ПользовательИнфБазыПолноеИмя;
	КонецЕсли;
	
	// Определение связи с несуществующим пользователем ИБ.
	ЕстьНоваяСвязьСНесуществующимПользователемИБ
		= НЕ ПользовательИБСуществует
		И ЗначениеЗаполнено(Object.UserID);
	
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСвязьСНесуществующимПользователемИБ
	   И НЕ ЕстьНоваяСвязьСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищенаСвязьСНесуществующимПользователемИБ", Object.Ссылка);
	КонецЕсли;
	ЕстьСвязьСНесуществующимПользователемИБ = ЕстьНоваяСвязьСНесуществующимПользователемИБ;
	
КонецПроцедуры

&AtClient
Procedure РольOnChange(Item)
	
	ДоступКИнформационнойБазеРазрешен = Object.Role = "SRM";
	//Object.UserName =
	//ОбщегоНазначенияКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
	//Object.Description);
	ПользовательИнфБазыИмя = Object.UserName;
	ПользовательИнфБазыПолноеИмя = Object.Description;
	//ПользовательИнфБазыПароль = Object.Password;
	//Пароль = Object.Password;
	//ПодтверждениеПароля =  Object.Password;
	//ПользовательИнфБазыАутентификацияСтандартная =  ДоступКИнформационнойБазеРазрешен;
	//ПользовательИнфБазыЗапрещеноИзменятьПароль   =  ДоступКИнформационнойБазеРазрешен;
	//ПользовательИнфБазыПоказыватьВСпискеВыбора   =  Ложь;
    If Object.Role = "SRM" Then
        ThisForm.Items.ПользовательИнфБазыЯзык.Visible = True;
    Else
        ThisForm.Items.ПользовательИнфБазыЯзык.Visible = False;
    EndIf;
		
EndProcedure

//MKGorshkova ->
&AtClient
Procedure UserNameOnChange(Item)
    
    UserNameChecked();
    	
EndProcedure

Function UserNameChecked()

	If Not UniqueCheck("UserName") Then
        Message(NStr("en = ""This login is already used""; ru = ""Этот логин уже используется"""));
    	Object.UserName = Undefined;
        Return False;
    EndIf;

EndFunction // ()


&AtClient
Procedure EMailOnChange(Item)
       	
	ПользовательИнфБазыИмя = Object.UserName;
	ПользовательИнфБазыПолноеИмя = Object.Description;

EndProcedure


Function UniqueCheck(Attribute)

    FoundRef = Catalogs.User.FindByAttribute(Attribute, Object[Attribute]);
    If FoundRef = Catalogs.User.EmptyRef() Then
        FoundRef = True;
    Else
        FoundRef = False;
    EndIf;
    
    Return FoundRef

EndFunction // LoginCheck()

//MKGorshkova <-


&AtClient
Procedure PasswordOnChange(Item)
	
	//ПользовательИнфБазыПароль = Object.Password;
	//Пароль = Object.Password;
	//ПодтверждениеПароля =  Object.Password;
	
EndProcedure

&AtClient
Procedure DescriptionOnChange(Item)
	
	Если ПользовательИнфБазыПолноеИмя <> Неопределено Тогда
		ПользовательИнфБазыПолноеИмя = Object.Description;
	КонецЕсли;
	
	//Если НЕ ПользовательИБСуществует Тогда
	//	
	//	Object.UserName =
	//		ОбщегоНазначенияКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
	//			Object.Description);
	//   ПользовательИнфБазыИмя = Object.UserName;
	//КонецЕсли;

EndProcedure

&AtClient
Procedure ManagerStartChoice(Item, ChoiceData, StandardProcessing)
    
    StandardProcessing = False;
  
    SelectionValue = New Structure("Role", "SRM");
    SelectionParameters = New Structure("Filter", SelectionValue);
    OpenFormModal("Catalog.User.ChoiceForm", SelectionParameters, ThisForm.Items.Manager);

EndProcedure

&AtClient
Procedure ManagerOnChange(Item)
    
    ManagerOnChangeServer();    

EndProcedure

Procedure ManagerOnChangeServer()

    If Object.Manager.Role <> "SRM" And Object.Manager.Role <> "" Then 
        Message(NStr("en = ""Enable to choose user with role SRM only""; ru = ""Возможно выбрать пользователя только с ролью SRM"""));   
        Object.Manager = Undefined;
    EndIf;
    
EndProcedure

&AtClient
Procedure InterfaceLanguageOnChange(Item)
	Object.InterfaceLanguage = ПользовательИнфБазыЯзык;
EndProcedure





 

