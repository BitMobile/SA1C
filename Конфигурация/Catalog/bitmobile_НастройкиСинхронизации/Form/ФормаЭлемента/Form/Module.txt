
/////////////////////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаСервере
Функция ПолучитьИмяТипа(мТип)
	
	МетаданноеТипа = Метаданные.НайтиПоТипу(мТип);
	
	Если МетаданноеТипа = Неопределено Тогда 
		
		Возврат мТип;
		
	Иначе 
		
		Возврат МетаданноеТипа.ПолноеИмя();
		
	КонецЕсли;	
	 	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.ВыгрузкаДанных И Не ТекущийОбъект.ЗагрузкаДанных Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не установлены признаки загрузки или выгрузки данных.";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
	// Проверить на наличие такого имени
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ВидОбъектаBitmobile = &ВидОбъектаBitmobile
		|	И bitmobile_НастройкиСинхронизации.Наименование = &Наименование
		|	И bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("ВидОбъектаBitmobile", ТекущийОбъект.ВидОбъектаBitmobile);
	Запрос.УстановитьПараметр("Наименование", ТекущийОбъект.Наименование);
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Настройка с таким именем уже существует.";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Не Отказ Тогда 
		
		ТекущийОбъект.ФильтрВКонфигурации = Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
		ТекущийОбъект.ПозицияВВыгрузке = 0;
				
	КонецЕсли;
		           	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДанныеДляСКД();
	
	Если Объект.ОбъектКонфигурации = "Справочник.User" 
		Или Объект.ОбъектКонфигурации = "Catalog.User" Тогда
		
		Элементы.ОбъектBitmobile.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыШапкиСервер()
	
	МетаданныеОбъекта = Неопределено;
	
	// Получить метаданные объекта
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектКонфигурации);
	
	Если Не МетаданныеОбъекта = Неопределено Тогда
		
		ТаблицаКопия = Объект.РеквизитыШапки.Выгрузить();
		
		Объект.РеквизитыШапки.Очистить();
		
		// Прочитать стандартные реквизиты
		Для Каждого СтрРек Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			Вставка = Объект.РеквизитыШапки.Добавить();
			Вставка.РеквизитОбъектаКонфигурации = СтрРек.Имя;
			Вставка.СтандартныйРеквизит = Истина;
			Вставка.ТипРеквизита = ПолучитьИмяТипа(СтрРек.Тип.Типы()[0]);
			Вставка.ПроверятьЗаполнение = ?(СтрРек.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять, Ложь, Истина);;                 
			
			Вставка.РеквизитОбъектаBitmobile = ПолучитьИмяСтандартногоРеквизита(СтрРек.Имя);
						
			НайденноеЗначение = ТаблицаКопия.Найти(СтрРек.Имя, "РеквизитОбъектаКонфигурации");
				
			Если Не НайденноеЗначение = Неопределено Тогда 
				
				Если Не ЗначениеЗаполнено(НайденноеЗначение.РеквизитОбъектаBitmobile) Тогда 
					
					Вставка.РеквизитОбъектаBitmobile = "";	
					
				КонецЕсли;
				
				Вставка.ПриводитьКСтроке = НайденноеЗначение.ПриводитьКСтроке;
								
			КонецЕсли;
			 			
		КонецЦикла;
		
		Для Каждого СтрРек Из МетаданныеОбъекта.Реквизиты Цикл
			
			Если СтрРек.Тип.Типы().Количество() = 1 Тогда 
			
				Вставка = Объект.РеквизитыШапки.Добавить();
				Вставка.РеквизитОбъектаКонфигурации = СтрРек.Имя;
				Вставка.ТипРеквизита = ПолучитьИмяТипа(СтрРек.Тип.Типы()[0]);
				Вставка.ПроверятьЗаполнение = ?(СтрРек.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять, Ложь, Истина);;
				
				Если Объект.ОбъектКонфигурации = "Справочник.User" 
					Или Объект.ОбъектКонфигурации = "Catalog.User" Тогда 
					
					Если СтрРек.Имя = "Служебный" Тогда 
						
						Вставка.РеквизитОбъектаBitmobile = "Role";
						
					ИначеЕсли СтрРек.Имя = "АдресЭлПочты" Тогда	
						
						Вставка.РеквизитОбъектаBitmobile = "EMail";
						
					ИначеЕсли СтрРек.Имя = "Логин" Тогда
						
						Вставка.РеквизитОбъектаBitmobile = "UserName";
						
					ИначеЕсли СтрРек.Имя = "Пароль" Тогда
						
						Вставка.РеквизитОбъектаBitmobile = "Password";						
						
					КонецЕсли;					
					
				Иначе 				
				
					НайденноеЗначение = ТаблицаКопия.Найти(СтрРек.Имя, "РеквизитОбъектаКонфигурации");
					
					Если Не НайденноеЗначение = Неопределено Тогда 
						
						Если ЗначениеЗаполнено(НайденноеЗначение.РеквизитОбъектаBitmobile) Тогда 
							
							Вставка.РеквизитОбъектаBitmobile = НайденноеЗначение.РеквизитОбъектаBitmobile;
													
						КонецЕсли;
						
						Вставка.ПриводитьКСтроке = НайденноеЗначение.ПриводитьКСтроке;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
									
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныеЧастиСервер(ЭтоОбновление = Ложь)
	
	МетаданныеОбъекта = Неопределено;
	
	// Получить метаданные объекта
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектКонфигурации);
	
	Если Не МетаданныеОбъекта = Неопределено Тогда
		
		ТаблицаКопия = Объект.ТабличныеЧасти.Выгрузить();
		ТаблицаРеквизитовКопия = Объект.РеквизитыТабличныхЧастей.Выгрузить();
		
		// Не удалять запросы если это обновление
		Если ЭтоОбновление Тогда 
			
			МассивУдаляемыхТабЧастей = Новый Массив;
			МассивУдаляемыхРеквизитовТабЧастей = Новый Массив;
			
			Для Каждого СтрТЧ Из Объект.ТабличныеЧасти Цикл 
				
				Если Не СтрТЧ.Запрос Тогда 
					
					МассивУдаляемыхТабЧастей.Добавить(СтрТЧ);
					
					РеквизитыТабЧасти = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", СтрТЧ.ТабличнаяЧастьОбъектаКонфигурации));
					
					Для Каждого СтрРек Из РеквизитыТабЧасти Цикл 
						
						МассивУдаляемыхРеквизитовТабЧастей.Добавить(СтрРек);
						
					КонецЦикла;
										
				КонецЕсли;				
				
			КонецЦикла;
			
			Для Каждого УдаляемаяТабЧасть Из МассивУдаляемыхТабЧастей Цикл 
				
				Объект.ТабличныеЧасти.Удалить(УдаляемаяТабЧасть);
				
			КонецЦикла;
			
			Для Каждого УдаляемыйРеквизитТабЧасти Из МассивУдаляемыхРеквизитовТабЧастей Цикл 
				
				Объект.РеквизитыТабличныхЧастей.Удалить(УдаляемыйРеквизитТабЧасти);
				
			КонецЦикла;
						
		Иначе 		
		
			Объект.РеквизитыТабличныхЧастей.Очистить();
			Объект.ТабличныеЧасти.Очистить();
			
		КонецЕсли;		
		
		// Прочитать список табличных частей
		Для Каждого СтрТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			
			Вставка = Объект.ТабличныеЧасти.Добавить();
			Вставка.ТабличнаяЧастьОбъектаКонфигурации = СтрТЧ.Имя;
			
			НайденноеЗначение = ТаблицаКопия.Найти(СтрТЧ.Имя, "ТабличнаяЧастьОбъектаКонфигурации");
			
			Если Не НайденноеЗначение = Неопределено Тогда 
				
				Если ЗначениеЗаполнено(НайденноеЗначение.ТабличнаяЧастьОбъектаBitmobile) Тогда 
					
					Вставка.ТабличнаяЧастьОбъектаBitmobile 	= НайденноеЗначение.ТабличнаяЧастьОбъектаBitmobile;
					Вставка.Фильтр							= НайденноеЗначение.Фильтр;
					
				КонецЕсли;
								
			КонецЕсли;
			
			// Перенести стандартные реквизиты
			Для Каждого СтрРек Из СтрТЧ.СтандартныеРеквизиты Цикл
				
				Вставка = Объект.РеквизитыТабличныхЧастей.Добавить();
				Вставка.ТабличнаяЧастьОбъектаКонфигурации = СтрТЧ.Имя;
				Вставка.РеквизитОбъектаКонфигурации = СтрРек.Имя;
				Вставка.РеквизитОбъектаBitmobile = ПолучитьИмяСтандартногоРеквизита(СтрРек.Имя, Истина);
				Вставка.СтандартныйРеквизит = Истина;
				Вставка.ТипРеквизита = ПолучитьИмяТипа(СтрРек.Тип.Типы()[0]);
				Вставка.ПроверятьЗаполнение = ?(СтрРек.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять, Ложь, Истина);;
				
			КонецЦикла;
			
			// Добавить стандартный реквизит "Ссылка"
			Вставка = Объект.РеквизитыТабличныхЧастей.Добавить();
			Вставка.ТабличнаяЧастьОбъектаКонфигурации = СтрТЧ.Имя;
			
			Если bitmobile_ОбработчикиСинхронизацииИПодписок.ИспользуетсяАнглийскийЯзык() Тогда 
				
				Вставка.РеквизитОбъектаКонфигурации = "Ref";
				Вставка.РеквизитОбъектаBitmobile = ПолучитьИмяСтандартногоРеквизита("Ref", Истина);
				
			Иначе 
				
				Вставка.РеквизитОбъектаКонфигурации = "Ссылка";
				Вставка.РеквизитОбъектаBitmobile = ПолучитьИмяСтандартногоРеквизита("Ссылка", Истина);
				
			КонецЕсли;	
						
			Вставка.СтандартныйРеквизит = Истина;
			Вставка.ТипРеквизита = МетаданныеОбъекта.ПолноеИмя();
			Вставка.ПроверятьЗаполнение = Истина;
						
			Для Каждого СтрРек Из СтрТЧ.Реквизиты Цикл
				
				Если СтрРек.Тип.Типы().Количество() = 1 Тогда
				
					Вставка = Объект.РеквизитыТабличныхЧастей.Добавить();
					Вставка.ТабличнаяЧастьОбъектаКонфигурации = СтрТЧ.Имя;
					Вставка.РеквизитОбъектаКонфигурации = СтрРек.Имя;
					Вставка.ТипРеквизита = ПолучитьИмяТипа(СтрРек.Тип.Типы()[0]);
					Вставка.ПроверятьЗаполнение = ?(СтрРек.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять, Ложь, Истина);;
					
					СтруктураПоиска = Новый Структура("ТабличнаяЧастьОбъектаКонфигурации, РеквизитОбъектаКонфигурации", СтрТЧ.Имя, СтрРек.Имя); 
					
					НайденныеСтроки = ТаблицаРеквизитовКопия.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныеСтроки.Количество() = 1 Тогда 
						
						Если ЗначениеЗаполнено(НайденныеСтроки[0].РеквизитОбъектаBitmobile) Тогда 
							
							Вставка.РеквизитОбъектаBitmobile = НайденныеСтроки[0].РеквизитОбъектаBitmobile;
														
						КонецЕсли;
						
						Вставка.ПриводитьКСтроке = НайденныеСтроки[0].ПриводитьКСтроке;
										
					КонецЕсли;
					
				КонецЕсли;
											
			КонецЦикла;
									
		КонецЦикла;
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляСКД()
	
	Если ЗначениеЗаполнено(Объект.ОбъектКонфигурации) Тогда 
	
		ЭтотОбъект = РеквизитФормыВЗначение("Объект");
		 
		НастройкиКомпоновщика = ЭтотОбъект.ФильтрВКонфигурации.Получить();
		
		СКДОбъекта = Новый СхемаКомпоновкиДанных;
	      
		ИсточникДанных 						= СКДОбъекта.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя 					= "ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных 	= "Local";
		ИсточникДанных.СтрокаСоединения  	= "";
		
		НаборДанных 								= СКДОбъекта.НаборыДанных.Добавить(ТИП("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Имя 							= "НаборДанных1";
		НаборДанных.Запрос							= "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ " + Объект.ОбъектКонфигурации;
		НаборДанных.ИсточникДанных 					= "ИсточникДанных1";
		НаборДанных.АвтоЗаполнениеДоступныхПолей 	= Истина;
		
		ПолеСсылка 				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеСсылка.Поле 		= "Ссылка";
		ПолеСсылка.ПутьКДанным 	= "Ссылка";
		ПолеСсылка.Заголовок 	= "Ссылка";
		
		ГруппировкаКомпоновки = СКДОбъекта.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаКомпоновки.Использование = Истина;
		
		ПолеВыбора = СКДОбъекта.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеВыбора.Использование = Истина;		
		
		АдресСхемы = ПоместитьВоВременноеХранилище(СКДОбъекта, ЭтаФорма.УникальныйИдентификатор);
							
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		
		Если ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда 
			
			Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновщика);
			
		Иначе 
			
			Компоновщик.ЗагрузитьНастройки(СКДОбъекта.НастройкиПоУмолчанию);
						
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Функция ПолучитьМетаданные() 
	
	СписокОбъектовМетаданных = Новый СписокЗначений;
	
	Если Объект.ВидОбъектаBitmobile = "Document" Тогда
	
		// Прочитать список документов
		Для Каждого СтрокаДокумент ИЗ Метаданные.Документы Цикл
			
		   	СписокОбъектовМетаданных.Добавить(СтрокаДокумент.ПолноеИмя());
			
	   	КонецЦикла;
	   
	КонецЕсли;   
	
	Если Объект.ВидОбъектаBitmobile = "Catalog" Тогда
	
	   	// Прочитать список справочников
		Для Каждого СтрокаСправочник ИЗ Метаданные.Справочники Цикл 
			
			СписокОбъектовМетаданных.Добавить(СтрокаСправочник.ПолноеИмя());
									
		КонецЦикла;
		
	КонецЕсли;
	   
    Возврат СписокОбъектовМетаданных;
    	
КонецФункции

&НаСервере
Функция ПолучитьИмяСтандартногоРеквизита(Имя, ЭтоТЧ = Ложь) 
	
	ИмяСтандартного = "";
	
	Если Имя = "ЭтоГруппа" Или Имя = "IsFolder" Тогда
		
		ИмяСтандартного = "IsFolder";
		
	ИначеЕсли Имя = "Код" Или Имя = "Code" Тогда
		
		ИмяСтандартного = "Code";
		
	ИначеЕсли Имя = "Наименование" Или Имя = "Description" Тогда
		
		ИмяСтандартного = "Description";
		
	ИначеЕсли Имя = "Родитель" Или Имя = "Parent" Тогда
		
		ИмяСтандартного = "Parent";
		
	ИначеЕсли Имя = "Владелец" Или Имя = "Owner" Тогда
		
		ИмяСтандартного = "Owner";
		
	ИначеЕсли Имя = "ПометкаУдаления" Или Имя = "DeletionMark" Тогда
		
		ИмяСтандартного = "DeletionMark";
		
	ИначеЕсли Имя = "Ссылка" Или Имя = "Ref" Тогда
		
		Если ЭтоТЧ Тогда 
			
			ИмяСтандартного = "Ref";
			
		Иначе 
			
			ИмяСтандартного = "Id";
			
		КонецЕсли;
				
	ИначеЕсли Имя = "Предопределенный" Или Имя = "Predefined" Тогда
		
		ИмяСтандартного = "Predefined";
		
	ИначеЕсли Имя = "Номер" Или Имя = "Number" Тогда
		
		ИмяСтандартного = "Number";
		
	ИначеЕсли Имя = "Дата" Или Имя = "Date" Тогда
		
		ИмяСтандартного = "Date";
		
	ИначеЕсли Имя = "Проведен" Или Имя = "Posted" Тогда
		
		ИмяСтандартного = "Posted";
		
	ИначеЕсли Имя = "НомерСтроки" Или Имя = "LineNumber" Тогда
		
		ИмяСтандартного = "LineNumber";	
		
	КонецЕсли;	
   
    Возврат ИмяСтандартного;
    	
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектов(НачальноеЗначение)
	
	ТекущийСписок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(НачальноеЗначение) Тогда 
		ТекущийСписок.Добавить(НачальноеЗначение);
	КонецЕсли;
	
	СписокМетаданных = ПолучитьМетаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации КАК ОбъектКонфигурации
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации";

	ТаблицаИспользованныхОбъектов = Запрос.Выполнить().Выгрузить();
	
	ВставкаСправочникаНастройки = ТаблицаИспользованныхОбъектов.Добавить();
	ВставкаСправочникаНастройки.ОбъектКонфигурации = Метаданные.Справочники.bitmobile_НастройкиСинхронизации.ПолноеИмя();
	
	Для Каждого Стр Из СписокМетаданных Цикл 
				
		СтруктураПоиска = Новый Структура("ОбъектКонфигурации", Стр.Значение);
		НайденныеСтроки = ТаблицаИспользованныхОбъектов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда  
	        	
			ТекущийСписок.Добавить(Стр.Значение);
				
		КонецЕсли;
							
	КонецЦикла;
			
	Возврат ТекущийСписок;
	
КонецФункции

&НаСервере
Функция ПолучитьНовоеИмяЗапроса()
	
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("Номер");
	
	Для Каждого Стр Из Объект.ТабличныеЧасти Цикл 
		
		Если Найти(Стр.ТабличнаяЧастьОбъектаКонфигурации, "Запрос №") > 0 Тогда
			
			Вставка = ТаблицаНомеров.Добавить();
			Вставка.Номер = Число(СтрЗаменить(Стр.ТабличнаяЧастьОбъектаКонфигурации, "Запрос №", ""));
		
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТаблицаНомеров.Количество() = 0 Тогда 
		
		Возврат "Запрос №1";
		
	Иначе 
		
		ТаблицаНомеров.Сортировать("Номер Убыв");
		
		СтрокаВозврата = "Запрос №" + Строка(ТаблицаНомеров.Получить(0).Номер + 1);
		
		Возврат СтрокаВозврата;
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьКоличествоСовпадений(ИмяТаблицы, ИмяРеквизита, ТекущееЗначение, ТекущаяТЧ = Неопределено)
	
	ТаблицаКопия = Объект[ИмяТаблицы].Выгрузить();
	
	Если ЗначениеЗаполнено(ТекущаяТЧ) Тогда 
		
		ТаблицаКопия = ТаблицаКопия.Скопировать(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", ТекущаяТЧ));
		
	КонецЕсли;
		
	Для Каждого Стр Из ТаблицаКопия Цикл 
		
		Стр[ИмяРеквизита] = НРег(Стр[ИмяРеквизита]);
		
	КонецЦикла;	
	
	НайденныеСтроки = ТаблицаКопия.НайтиСтроки(Новый Структура(ИмяРеквизита, ТекущееЗначение));

	Возврат НайденныеСтроки.Количество();
	
КонецФункции
 
&НаСервере
Процедура ПеречитатьРеквизитыЗапроса(ИмяТЧ, ТекстЗапроса)
	
	Построитель = Новый ПостроительЗапроса;
		
	Построитель.Текст = ТекстЗапроса;
		
	Построитель.ЗаполнитьНастройки();
	
	СтруктураПоиска = Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", ИмяТЧ); 
					
	ТаблицаКопия = Объект.РеквизитыТабличныхЧастей.Выгрузить();
	
	НайденныеСтрокиУдаление = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Стр Из НайденныеСтрокиУдаление Цикл 
		
		Объект.РеквизитыТабличныхЧастей.Удалить(Стр);
		
	КонецЦикла;
	
	ТаблицаРеквизитовТЧ = ТаблицаКопия.Скопировать(СтруктураПоиска);
	                                       
	Для Каждого СтрПоле Из Построитель.ВыбранныеПоля Цикл
		
		ДоступноеПоле = Построитель.ДоступныеПоля.Найти(СтрПоле.Имя);
			
		Если ДоступноеПоле.ТипЗначения.Типы().Количество() = 1 Тогда
				
			Вставка = Объект.РеквизитыТабличныхЧастей.Добавить();
			Вставка.ТабличнаяЧастьОбъектаКонфигурации = ИмяТЧ;
			Вставка.РеквизитОбъектаКонфигурации = ДоступноеПоле.Имя;
			Вставка.ТипРеквизита = ПолучитьИмяТипа(ДоступноеПоле.ТипЗначения.Типы()[0]);
						
			Если НРег(ДоступноеПоле.Имя) = "ссылка" Или НРег(ДоступноеПоле.Имя) = "ref" Тогда
				
				Вставка.РеквизитОбъектаBitmobile = "Ref";
				Вставка.СтандартныйРеквизит = Истина;
				Вставка.ПроверятьЗаполнение = Истина;
				
				
			ИначеЕсли НРег(ДоступноеПоле.Имя) = "номерстроки" Или НРег(ДоступноеПоле.Имя) = "linenumber" Тогда 
				
				Вставка.РеквизитОбъектаBitmobile = "LineNumber";
				Вставка.СтандартныйРеквизит = Истина;
												
			Иначе 
						
				СтруктураПоискаРеквизита = Новый Структура("ТабличнаяЧастьОбъектаКонфигурации, РеквизитОбъектаКонфигурации", ИмяТЧ, ДоступноеПоле.Имя); 
				
				НайденныеСтроки = ТаблицаРеквизитовТЧ.НайтиСтроки(СтруктураПоискаРеквизита);
				
				Если НайденныеСтроки.Количество() = 1 Тогда 
					
					Если ЗначениеЗаполнено(НайденныеСтроки[0].РеквизитОбъектаBitmobile) Тогда 
						
						Вставка.РеквизитОбъектаBitmobile = НайденныеСтроки[0].РеквизитОбъектаBitmobile;	
						
					КонецЕсли;
									
				КонецЕсли;
				
			КонецЕсли;
									
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗапрос(ПроверкиЧерезЗапросПройдены, ПроверкиЧерезПостроительПройдены, ТекстЗапроса)
	
	ТипОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектКонфигурации).СтандартныеРеквизиты.Ссылка.Тип.Типы().Получить(0);
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	Если bitmobile_ОбработчикиСинхронизацииИПодписок.ИспользуетсяАнглийскийЯзык() Тогда 
		
		ИмяПараметраМассивСсылок 	= "RefArray";
		ИмяПоляСсылка 				= "Ref";
		ИмяПоляНомерСтроки 			= "LineNumber";
		
	Иначе 
		
		ИмяПараметраМассивСсылок 	= "МассивСсылок";
		ИмяПоляСсылка 				= "Ссылка";
		ИмяПоляНомерСтроки 			= "НомерСтроки";
		
	КонецЕсли;
		
	Если Не ПараметрыЗапроса.Количество() = 1 Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В запросе может присутствовать только один параметр с именем """ + ИмяПараметраМассивСсылок + """!";
		Сообщение.Сообщить();
		
	Иначе 
		
		ПараметрМассив = ПараметрыЗапроса.Найти(ИмяПараметраМассивСсылок);
		
		Если ПараметрМассив = Неопределено Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В запросе не определен параметр с именем """ + ИмяПараметраМассивСсылок + """!";
			Сообщение.Сообщить();
			
		ИначеЕсли Не ПараметрМассив.Имя = "МассивСсылок" Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В запросе не определен параметр с именем """ + ИмяПараметраМассивСсылок + """!";
			Сообщение.Сообщить();
			
		Иначе 
			
			Если НЕ ПараметрМассив.ТипЗначения.Типы().Получить(0) = ТипОбъекта Тогда 
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Параметр """ + ИмяПараметраМассивСсылок + """ должен иметь тот же тип данных что и объект конфигурации!";
				Сообщение.Сообщить();
				
			Иначе 
				
				ПроверкиЧерезЗапросПройдены = Истина;
				
			КонецЕсли;	
			
		КонецЕсли;
					
	КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
					
	Если Не Построитель.ВыбранныеПоля.Количество() = 0 Тогда 
		
		ПолеСсылка 		= Построитель.ВыбранныеПоля.Найти(ИмяПоляСсылка);
		ПолеНомерСтроки = Построитель.ВыбранныеПоля.Найти(ИмяПоляНомерСтроки);
		
		Если ПолеСсылка = Неопределено Или ПолеНомерСтроки = Неопределено Тогда
			
			Если ПолеСсылка = Неопределено Тогда 
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В запросе должно присутствовать поле """ + ИмяПоляСсылка + """!";
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			Если ПолеНомерСтроки = Неопределено Тогда 
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В запросе должно присутствовать поле """ + ИмяПоляНомерСтроки + """!";
				Сообщение.Сообщить();
				
			КонецЕсли;
							
		Иначе
			
			ПроверкаСсылки = Ложь;
			ПроверкаНомера = Ложь;
						
			ПолеСсылка = Построитель.ДоступныеПоля.Найти(ИмяПоляСсылка);
			
			Если ПолеСсылка.ТипЗначения.Типы().Количество() > 1 Тогда 
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Поле """ + ИмяПоляСсылка + """ не должно иметь составной тип данных!";
				Сообщение.Сообщить();
				
			Иначе 
				
				ТипСсылки = ПолеСсылка.ТипЗначения.Типы().Получить(0);
				
				Если НЕ ТипОбъекта = ТипСсылки Тогда 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Поле """ + ИмяПоляСсылка + """ должно иметь тот же тип данных что и объект конфигурации!";
					Сообщение.Сообщить();
					
				Иначе 
					
					ПроверкаСсылки = Истина;
											
				КонецЕсли;
										
			КонецЕсли;
			
			ПолеНомерСтроки = Построитель.ДоступныеПоля.Найти(ИмяПоляНомерСтроки);
			
			Если ПолеНомерСтроки.ТипЗначения.Типы().Количество() > 1 Тогда 
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Поле """ + ИмяПоляНомерСтроки + """ не должно иметь составной тип данных!";
				Сообщение.Сообщить();
				
			Иначе 
				
				ТипНомера = ПолеНомерСтроки.ТипЗначения.Типы().Получить(0);
				
				Если НЕ ТипНомера = Тип("Число") Тогда 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Поле """ + ИмяПоляНомерСтроки + """ должно иметь числовой тип данных!";
					Сообщение.Сообщить();
					
				Иначе 
					
					ПроверкаНомера = Истина;
											
				КонецЕсли;
										
			КонецЕсли;
			
			Если ПроверкаНомера И ПроверкаСсылки Тогда 
				
				ПроверкиЧерезПостроительПройдены = Истина;
				
			КонецЕсли;
						
		КонецЕсли;
						
	КонецЕсли;
    	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТЧ()
	
	СписокТЧ = Новый СписокЗначений;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектКонфигурации);
	
	Для Каждого СтрТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл 
		
		СписокТЧ.Добавить(СтрТЧ.Имя);		
		
	КонецЦикла;
	
	Возврат СписокТЧ;
		
КонецФункции

&НаСервере
Функция ПолучитьСписокРеквизитов(ИмяТЧ)
	
	СписокРеквизитов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Настройка,
		|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА";

	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда 
	
		Для Каждого СтрРек Из Объект.РеквизитыШапки Цикл 
			
			Если СтрРек.СтандартныйРеквизит Тогда 
				
				Если ЗначениеЗаполнено(СтрРек.РеквизитОбъектаBitmobile) И Не СтрРек.ПриводитьКСтроке Тогда
				
					Если СтрРек.РеквизитОбъектаКонфигурации = "Родитель" Или СтрРек.РеквизитОбъектаКонфигурации = "Владелец" 
						Или СтрРек.РеквизитОбъектаКонфигурации = "Owner" Или СтрРек.РеквизитОбъектаКонфигурации = "Parent" Тогда 
					
						ОбработатьРеквизит(СтрРек, ТаблицаНастроек, СписокРеквизитов);
						
					КонецЕсли;
					
				КонецЕсли;
							
			Иначе 
				
				Если ЗначениеЗаполнено(СтрРек.РеквизитОбъектаBitmobile) И Не СтрРек.ПриводитьКСтроке Тогда
				
					ОбработатьРеквизит(СтрРек, ТаблицаНастроек, СписокРеквизитов);
					
				КонецЕсли;
							
			КонецЕсли;	
					
		КонецЦикла;
		
	Иначе 	
	
		СтрокиРеквизитов = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", ИмяТЧ));
			    	
		Для Каждого СтрРек Из СтрокиРеквизитов Цикл 
			
			Если Не СтрРек.СтандартныйРеквизит И Не СтрРек.ПриводитьКСтроке Тогда 
			
				Если ЗначениеЗаполнено(СтрРек.РеквизитОбъектаBitmobile) Тогда 
					
					ОбработатьРеквизит(СтрРек, ТаблицаНастроек, СписокРеквизитов);		
						
				КонецЕсли;
				
			КонецЕсли;	
															
		КонецЦикла;
				
	КонецЕсли;
			
	Возврат СписокРеквизитов;
		
КонецФункции

&НаСервере
Процедура ОбработатьРеквизит(СтрокаРеквизита, ТаблицаНастроек, СписокРеквизитов)
	
	НайденнаяНастройка = ТаблицаНастроек.Найти(СтрокаРеквизита.ТипРеквизита, "ОбъектКонфигурации");
					
	Если Не НайденнаяНастройка = Неопределено Тогда
		
		СписокРеквизитов.Добавить(НайденнаяНастройка.Настройка, СтрокаРеквизита.РеквизитОбъектаКонфигурации);
						
	КонецЕсли;
			
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////
// Командный интерфейс

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	            
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Объект.ВидОбъектаBitmobile = "Catalog";
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОбъектов = ПолучитьСписокОбъектов(Элемент.ТекстРедактирования);
	  
	Выбор = ВыбратьИзСписка(СписокОбъектов, Элемент);
	
	Если НЕ Выбор = Неопределено И ЗначениеЗаполнено(Выбор.Значение) Тогда 
		
		Если НЕ Объект.ОбъектКонфигурации = Выбор.Значение Тогда 
			
			Если ЗначениеЗаполнено(Объект.ОбъектКонфигурации) Тогда
				
				Режим = РежимДиалогаВопрос.ОКОтмена;
		
				Текст = "При смене объекта все настройки будут перезаполнены. Часть изменений может быть потеряна. Продолжить?";
				
				Ответ = Вопрос(Текст, Режим, 0);
				
				Если Ответ = КодВозвратаДиалога.OK Тогда
					
					Объект.ОбъектКонфигурации = Выбор.Значение;
				
					ЗаполнитьРеквизитыШапкиСервер();
					
					ЗаполнитьТабличныеЧастиСервер();
					
					ЗаполнитьДанныеДляСКД();
					
					Если Объект.ОбъектКонфигурации = "Справочник.User" 
						Или Объект.ОбъектКонфигурации = "Catalog.User" Тогда
						
						Объект.Наименование = "User";
						
						Элементы.ОбъектBitmobile.Доступность = Ложь;
						
					Иначе 
						
						Элементы.ОбъектBitmobile.Доступность = Истина;
						
					КонецЕсли;	
					
				КонецЕсли;
								
			Иначе 
							
				Объект.ОбъектКонфигурации = Выбор.Значение;
				
				ЗаполнитьРеквизитыШапкиСервер();
				
				ЗаполнитьТабличныеЧастиСервер();
				
				ЗаполнитьДанныеДляСКД();
				
				Если Объект.ОбъектКонфигурации = "Справочник.User" 
					Или Объект.ОбъектКонфигурации = "Catalog.User" Тогда
					
					Объект.Наименование = "User";
					
					Элементы.ОбъектBitmobile.Доступность = Ложь;
					
				Иначе 
						
					Элементы.ОбъектBitmobile.Доступность = Истина;	
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаBitmobileПриИзменении(Элемент)
	
	Если Объект.ВидОбъектаBitmobile = "Catalog" И (Лев(Объект.ОбъектКонфигурации, 9) = "Документ." Или Лев(Объект.ОбъектКонфигурации, 9) = "Document.") Тогда
		
		Режим = РежимДиалогаВопрос.ОКОтмена;
		
		Текст = "Вид объекта bitmobile и вид объекта конфигурации отличаются. Все настройки будут очищены. Продолжить?";
		
		Ответ = Вопрос(Текст, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.OK Тогда
			
			Объект.ОбъектКонфигурации = Неопределено;
			
			Объект.ТабличныеЧасти.Очистить();
			Объект.РеквизитыШапки.Очистить();
			Объект.РеквизитыТабличныхЧастей.Очистить();
			
		Иначе 
			
			Объект.ВидОбъектаBitmobile = "Document";
			
		КонецЕсли;
		
	КонецЕсли;
	                                   
	Если Объект.ВидОбъектаBitmobile = "Document" И (Лев(Объект.ОбъектКонфигурации, 11) = "Справочник." Или Лев(Объект.ОбъектКонфигурации, 8) = "Catalog.") Тогда	
		
		Режим = РежимДиалогаВопрос.ОКОтмена;
		
		Текст = "Вид объекта bitmobile и вид объекта конфигурации отличаются. Все настройки будут очищены. Продолжить?";
		
		Ответ = Вопрос(Текст, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.OK Тогда
			
			Объект.ОбъектКонфигурации = Неопределено;
			
			Объект.ТабличныеЧасти.Очистить();
			Объект.РеквизитыШапки.Очистить();
			Объект.РеквизитыТабличныхЧастей.Очистить();
			
		Иначе 
			
			Объект.ВидОбъектаBitmobile = "Catalog";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектBitmobileОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяВBitmobile = Элементы.ОбъектBitmobile.ТекстРедактирования;
	
	Если Не ИмяКорректно(ИмяВBitmobile) Тогда 
		
		Предупреждение("В имени допустимы латинские буквы, цифры и ""_""!");
		
		Элементы.ОбъектBitmobile.ОбновитьТекстРедактирования();
		
		ТекущийЭлемент = Элементы.ОбъектBitmobile;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбъекта(Команда)
	
	Режим = РежимДиалогаВопрос.ОКОтмена;
		
	Текст = "Все настройки будут перезаполнены. Часть изменений может быть потеряна. Продолжить?";
	
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьРеквизитыШапкиСервер();
		
		ЗаполнитьТабличныеЧастиСервер(Истина);
		
		ЗаполнитьДанныеДляСКД();
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьКлюч()
	
	СтрокаКлюча = "";
	
	// Перезаписать ключ
	Для Каждого СтрокаТЧ Из Объект.РеквизитыТабличныхЧастей Цикл 
		
		Если СтрокаТЧ.ТабличнаяЧастьОбъектаКонфигурации = Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации
			И СтрокаТЧ.КлючевоеПоле И ЗначениеЗаполнено(СтрокаТЧ.РеквизитОбъектаBitmobile) Тогда 
			
			СтрокаКлюча = СтрокаКлюча + СтрокаТЧ.РеквизитОбъектаBitmobile + ",";	
			
		КонецЕсли;
				
	КонецЦикла;
	
	Элементы.ТабличныеЧасти.ТекущиеДанные.Ключ = Лев(СтрокаКлюча, СтрДлина(СтрокаКлюча) - 1);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяКорректно(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если КоличествоСимволов > 0 Тогда
		
		Для Сч = 1 По КоличествоСимволов Цикл
			
			Код = КодСимвола(Сред(СтрокаПараметр, Сч));   
			
			Если Код <> 95 И ((Код < 48) Или (Код > 57) И (Код < 65) Или (Код > 90) И (Код < 97) Или (Код > 122))  Тогда    
				
				Возврат Ложь;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Возврат Истина;

	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////
// Реквизиты шапки

&НаКлиенте
Процедура РеквизитыШапкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile = СокрЛП(Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile);
	
	Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile = СтрЗаменить(Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile, " ", "");
	
	Если ЗначениеЗаполнено(Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile) Тогда
		
		Если Не ИмяКорректно(Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile) Тогда 
			
			Предупреждение("В имени допустимы латинские буквы, цифры и ""_""!");
				
			Отказ = Истина;
			
			Элементы.РеквизитыШапки.ИзменитьСтроку();			
			
		КонецЕсли;		
		
		Если Не Отказ Тогда
		
			КоличествоСовпадений = ПолучитьКоличествоСовпадений("РеквизитыШапки", "РеквизитОбъектаBitmobile", НРег(Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаBitmobile));
			 
			Если КоличествоСовпадений > 1 Тогда 
				
				Предупреждение("Данное значение уже используется!");
				
				Отказ = Истина;
				
				Элементы.РеквизитыШапки.ИзменитьСтроку();
							
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе 
		
		Элементы.РеквизитыШапки.ТекущиеДанные.ПриводитьКСтроке = Ложь;
				
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиПриводитьКСтрокеПриИзменении(Элемент)
	
	Имя = Элементы.РеквизитыШапки.ТекущиеДанные.РеквизитОбъектаКонфигурации;
	
	Если Элементы.РеквизитыШапки.ТекущиеДанные.СтандартныйРеквизит Тогда 
		
		Если Не (Имя = "Родитель" Или Имя = "Parent" Или Имя = "Владелец" Или Имя = "Owner") Тогда
		
			Элементы.РеквизитыШапки.ТекущиеДанные.ПриводитьКСтроке = Ложь;	
			
		КонецЕсли;
				
	КонецЕсли;	
	
	Если Элементы.РеквизитыШапки.ТекущиеДанные.ПриводитьКСтроке Тогда 
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита", Имя); 
					
		НайденныеСтроки = Объект.СвязанныеДанные.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			
			Объект.СвязанныеДанные.Удалить(НайденнаяСтрока);			
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////
// Табличные части

&НаКлиенте
Процедура СохранитьЗапросИФильтр(Команда)
	
	Если Не Элементы.ТабличныеЧасти.ТекущиеДанные = Неопределено Тогда 
		
		// Проверить корректность запроса
		ПроверкиЧерезЗапросПройдены = Ложь;
		ПроверкиЧерезПостроительПройдены = Ложь;
		
		Если Элементы.ТабличныеЧасти.ТекущиеДанные.Запрос И ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			ПроверитьЗапрос(ПроверкиЧерезЗапросПройдены, ПроверкиЧерезПостроительПройдены, ТекстЗапроса);	
			
		КонецЕсли;	
		
		Если ПроверкиЧерезЗапросПройдены И ПроверкиЧерезПостроительПройдены Тогда 
			
			Элементы.ТабличныеЧасти.ТекущиеДанные.ТекстЗапроса = ТекстЗапроса;
							
			ПеречитатьРеквизитыЗапроса(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации, ТекстЗапроса);
		
		КонецЕсли;
			
		Элементы.ТабличныеЧасти.ТекущиеДанные.Фильтр = ФильтрТЧ;
		
	КонецЕсли;
		
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьКонструктор(Команда)
	
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда	
	
	Конструктор = Новый КонструкторЗапроса;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда 
		
		Конструктор.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Если Конструктор.ОткрытьМодально() Тогда  
		
		ТекстЗапроса = Конструктор.Текст;
							
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТабличныеЧастиПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда 
		
		Элементы.СохранитьЗапросИФильтр.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.Запрос Тогда
			
			Элементы.ОткрытьКонструктор.Доступность = Истина;
			Элементы.ТекстЗапроса.Доступность = Истина;
			
			ТекстЗапроса = Элемент.ТекущиеДанные.ТекстЗапроса;
						
		Иначе 
			
			Элементы.ОткрытьКонструктор.Доступность = Ложь;
			Элементы.ТекстЗапроса.Доступность = Ложь;
			
			ТекстЗапроса = "";
			
		КонецЕсли;
		
		ФильтрТЧ = Элемент.ТекущиеДанные.Фильтр;
				
		Элементы.РеквизитыТабличныхЧастей.ОтборСтрок = Новый ФиксированнаяСтруктура("ТабличнаяЧастьОбъектаКонфигурации", Элемент.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации);
		
	Иначе 
		
		Элементы.СохранитьЗапросИФильтр.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.ТабличныеЧасти.ТекущиеДанные.Запрос Тогда 
		
		Отказ = Истина;
		
	Иначе 
		
		// Очистить реквизиты удаляемой табличной части
		СтруктураПоиска = Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации); 
			
		НайденныеСтрокиУдаление = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Стр Из НайденныеСтрокиУдаление Цикл 
			
			Объект.РеквизитыТабличныхЧастей.Удалить(Стр);
			
		КонецЦикла;
		
		ТекстЗапроса = "";
		ФильтрТЧ = "";
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		
		НаименованиеНовое = ПолучитьНовоеИмяЗапроса();
		
		Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации = НаименованиеНовое;
		Элементы.ТабличныеЧасти.ТекущиеДанные.Запрос = Истина;
		
		Элементы.РеквизитыТабличныхЧастей.ОтборСтрок = Новый ФиксированнаяСтруктура("ТабличнаяЧастьОбъектаКонфигурации", НаименованиеНовое);
		
		Элементы.ОткрытьКонструктор.Доступность = Истина;
		Элементы.ТекстЗапроса.Доступность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile = СокрЛП(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile);
	
	Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile = СтрЗаменить(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile, " ", "");
	
	Если ЗначениеЗаполнено(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile) Тогда
		
		Если Не ИмяКорректно(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile) Тогда 
			
			Предупреждение("В имени допустимы латинские буквы, цифры и ""_""!");
				
			Отказ = Истина;
			
			Элементы.ТабличныеЧасти.ИзменитьСтроку();			
			
		КонецЕсли;		
		
		Если Не Отказ Тогда
		
			КоличествоСовпадений = ПолучитьКоличествоСовпадений("ТабличныеЧасти", "ТабличнаяЧастьОбъектаBitmobile", НРег(Элементы.ТабличныеЧасти.ТекущиеДанные.ТабличнаяЧастьОбъектаBitmobile));
			 
			Если КоличествоСовпадений > 1 Тогда 
				
				Предупреждение("Данное значение уже используется!");
				
				Отказ = Истина;
				
				Элементы.ТабличныеЧасти.ИзменитьСтроку();
				
			КонецЕсли;
			
		КонецЕсли;	
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектКонфигурации) Тогда 
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////
// Реквизиты табличных частей

&НаКлиенте
Процедура РеквизитыТабличныхЧастейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile = СокрЛП(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile);
	
	Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile = СтрЗаменить(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile, " ", "");
	
	Если ЗначениеЗаполнено(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile) Тогда
		
		Если Не ИмяКорректно(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile) Тогда 
			
			Предупреждение("В имени допустимы латинские буквы, цифры и ""_""!");
				
			Отказ = Истина;
			
			Элементы.РеквизитыТабличныхЧастей.ИзменитьСтроку();			
			
		КонецЕсли;		
		
		Если Не Отказ Тогда 
		
			КоличествоСовпадений = ПолучитьКоличествоСовпадений("РеквизитыТабличныхЧастей", "РеквизитОбъектаBitmobile", НРег(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile), Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации);
			 
			Если КоличествоСовпадений > 1 Тогда 
				
				Предупреждение("Данное значение уже используется!");
				
				Отказ = Истина;
				
				Элементы.РеквизитыТабличныхЧастей.ИзменитьСтроку();
				
			Иначе 
				
				Если НРег(Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile) = "id" Тогда 
					
					Предупреждение("Данное значение зарезервировано!");
				
					Отказ = Истина;
					
					Элементы.РеквизитыТабличныхЧастей.ИзменитьСтроку();
					
				КонецЕсли;	
							
			КонецЕсли;
			
		КонецЕсли;	
		
	Иначе 
		
		Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.КлючевоеПоле 		= Ложь;
		Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.ПриводитьКСтроке 	= Ложь;
					
	КонецЕсли;
	
	Если Не Отказ Тогда 
			
		ПерезаполнитьКлюч();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыТабличныхЧастейПриводитьКСтрокеПриИзменении(Элемент)
	
	Если Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.СтандартныйРеквизит Тогда 
		
		Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.ПриводитьКСтроке = Ложь;	
		
	КонецЕсли;
	
	Если Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.ПриводитьКСтроке Тогда 
		
		СтруктураПоиска = Новый Структура("ИмяТЧ, ИмяРеквизита"
										 , Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.ТабличнаяЧастьОбъектаКонфигурации
										 , Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаКонфигурации); 
					
		НайденныеСтроки = Объект.СвязанныеДанные.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			
			Объект.СвязанныеДанные.Удалить(НайденнаяСтрока);			
			
		КонецЦикла;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыТабличныхЧастейКлючевоеПолеПриИзменении(Элемент)
	
	ИмяВBitmobile = Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.РеквизитОбъектаBitmobile;
	
	Если Не ЗначениеЗаполнено(ИмяВBitmobile) Или Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.СтандартныйРеквизит Тогда 
		
		Элементы.РеквизитыТабличныхЧастей.ТекущиеДанные.КлючевоеПоле = Ложь;
		
		Возврат;
				
	КонецЕсли;
	
	ПерезаполнитьКлюч();	
	
КонецПроцедуры

/////////////////////////////////////////////
// Связанные данные

&НаКлиенте
Процедура СвязанныеДанныеИмяТЧНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТЧ = ПолучитьСписокТЧ();
	
	ВыбраннаяТЧ = ВыбратьИзСписка(СписокТЧ, Элемент);
	
	Если Не ВыбраннаяТЧ = Неопределено Тогда 
		
		Если Не ВыбраннаяТЧ.Значение = Элементы.СвязанныеДанные.ТекущиеДанные.ИмяТЧ Тогда 
			
			Элементы.СвязанныеДанные.ТекущиеДанные.ИмяТЧ = ВыбраннаяТЧ.Значение;
			Элементы.СвязанныеДанные.ТекущиеДанные.ИмяРеквизита = Неопределено;
			Элементы.СвязанныеДанные.ТекущиеДанные.Настройка = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДанныеИмяРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокРеквизитов = ПолучитьСписокРеквизитов(Элементы.СвязанныеДанные.ТекущиеДанные.ИмяТЧ);
	
	ВыбранныйРеквизит = ВыбратьИзСписка(СписокРеквизитов, Элемент);
	
	Если Не ВыбранныйРеквизит = Неопределено Тогда 
		
		Элементы.СвязанныеДанные.ТекущиеДанные.ИмяРеквизита = ВыбранныйРеквизит.Представление;
		Элементы.СвязанныеДанные.ТекущиеДанные.Настройка = ВыбранныйРеквизит.Значение;
				
	КонецЕсли;	
	
КонецПроцедуры









                                       