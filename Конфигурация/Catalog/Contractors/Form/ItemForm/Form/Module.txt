
#Region CommonProceduresAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	FillRegions();
	
	FillTerritories();
	
	SetConditionalAppearence();
	
EndProcedure

&AtServer
Procedure OnWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	If Not Cancel Then
		
		WriteRegions();
		
		WriteTerritories();
		
	EndIf;
	
EndProcedure

#Region Regions

&AtServer
Procedure FillRegions()
	
	Query = New Query(
	"SELECT ALLOWED
	|	ObjectsRegionsSliceLast.Region AS Region
	|INTO AddedRegions
	|FROM
	|	InformationRegister.ObjectsRegions.SliceLast(, Object = &Contractor) AS ObjectsRegionsSliceLast
	|WHERE
	|	ObjectsRegionsSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Added)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	CatalogRegion.Ref AS Region,
	|	CASE
	|		WHEN AddedRegions.Region IS NULL 
	|			THEN FALSE
	|		ELSE TRUE
	|	END AS Use
	|FROM
	|	Catalog.Region AS CatalogRegion
	|		LEFT JOIN AddedRegions AS AddedRegions
	|		ON CatalogRegion.Ref = AddedRegions.Region
	|
	|ORDER BY
	|	Region HIERARCHY");
	Query.SetParameter("Contractor", ThisForm.Object.Ref);
	Result = Query.Execute().Unload(QueryResultIteration.ByGroupsWithHierarchy);
	
	ValueToFormAttribute(Result, "Regions");
	
EndProcedure

&AtServer
Procedure WriteRegions()
	
	FormRegions = New ValueTable;
	FormRegions.Columns.Add("Region", New TypeDescription("CatalogRef.Region"));
	
	For Each Child In ThisForm.Regions.GetItems() Do
		
		ProcessRegions(Child, FormRegions);
		
	EndDo;
	
	Query = New Query(
	"SELECT ALLOWED
	|	FormRegions.Region AS FormRegion
	|INTO FormRegions
	|FROM
	|	&FormRegions AS FormRegions
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	ObjectsRegionsSliceLast.Region AS RegisterRegion
	|INTO RegisterRegions
	|FROM
	|	InformationRegister.ObjectsRegions.SliceLast(, Object = &Contractor) AS ObjectsRegionsSliceLast
	|WHERE
	|	NOT ObjectsRegionsSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	FormRegions.FormRegion,
	|	RegisterRegions.RegisterRegion
	|INTO Difference
	|FROM
	|	FormRegions AS FormRegions
	|		FULL JOIN RegisterRegions AS RegisterRegions
	|		ON FormRegions.FormRegion = RegisterRegions.RegisterRegion
	|WHERE
	|	(FormRegions.FormRegion IS NULL 
	|			OR RegisterRegions.RegisterRegion IS NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	&CurrentDate AS Period,
	|	&Contractor AS Object,
	|	ISNULL(Difference.FormRegion, Difference.RegisterRegion) AS Region,
	|	CASE
	|		WHEN Difference.FormRegion IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterRegion IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("CurrentDate", CurrentDate());
	Query.SetParameter("Contractor", ThisForm.Object.Ref);
	Query.SetParameter("FormRegions", FormRegions);
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.ObjectsRegions.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

&AtServer
Procedure ProcessRegions(Parent, FormRegions)
	
	If Parent.Use = 1 Then
		
		Row = FormRegions.Add();
		Row.Region = Parent.Region;
		
	EndIf;
	
	Children = Parent.GetItems();
	
	For Each Child In Children Do
		
		ProcessRegions(Child, FormRegions);
		
	EndDo;
	
EndProcedure

#EndRegion

#Region Territories

&AtServer
Procedure FillTerritories()
	
	Query = New Query(
	"SELECT ALLOWED
	|	ObjectsTerritoriesSliceLast.Territory
	|INTO SavedTerritories
	|FROM
	|	InformationRegister.ObjectsTerritories.SliceLast(, Object = &Contractor) AS ObjectsTerritoriesSliceLast
	|WHERE
	|	NOT ObjectsTerritoriesSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	CatalogTerritory.Owner AS Region,
	|	CatalogTerritory.Ref AS Territory,
	|	CASE
	|		WHEN SavedTerritories.Territory IS NULL 
	|			THEN FALSE
	|		ELSE TRUE
	|	END AS Use
	|FROM
	|	Catalog.Territory AS CatalogTerritory
	|		LEFT JOIN SavedTerritories AS SavedTerritories
	|		ON CatalogTerritory.Ref = SavedTerritories.Territory
	|
	|ORDER BY
	|	Region
	|AUTOORDER");
	
	Query.SetParameter("Contractor", ThisForm.Object.Ref);
	
	Result = Query.Execute().Unload();
	
	ThisForm.Territories.Load(Result);
	
EndProcedure

&AtServer
Procedure WriteTerritories()
	
	Filter = New Structure;
	Filter.Insert("Use", True);
	UsedTerritories = ThisForm.Territories.FindRows(Filter);
	
	Query = New Query(
	"SELECT ALLOWED
	|	FormTerritories.Territory AS FormTerritory
	|INTO FormTerritories
	|FROM
	|	&FormTerritories AS FormTerritories
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	ObjectsTerritoriesSliceLast.Territory AS RegisterTerritory
	|INTO RegisterTerritories
	|FROM
	|	InformationRegister.ObjectsTerritories.SliceLast(, Object = &Contractor) AS ObjectsTerritoriesSliceLast
	|WHERE
	|	NOT ObjectsTerritoriesSliceLast.Status = VALUE(Enum.ValueTableRowStatuses.Deleted)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	FormTerritories.FormTerritory,
	|	RegisterTerritories.RegisterTerritory
	|INTO Difference
	|FROM
	|	FormTerritories AS FormTerritories
	|		FULL JOIN RegisterTerritories AS RegisterTerritories
	|		ON FormTerritories.FormTerritory = RegisterTerritories.RegisterTerritory
	|WHERE
	|	(FormTerritories.FormTerritory IS NULL 
	|			OR RegisterTerritories.RegisterTerritory IS NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	&CurrentDate AS Period,
	|	&Contractor AS Object,
	|	ISNULL(Difference.FormTerritory, Difference.RegisterTerritory) AS Territory,
	|	CASE
	|		WHEN Difference.FormTerritory IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Deleted)
	|		WHEN Difference.RegisterTerritory IS NULL 
	|			THEN VALUE(Enum.ValueTableRowStatuses.Added)
	|	END AS Status
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("CurrentDate", CurrentDate());
	Query.SetParameter("Contractor", ThisForm.Object.Ref);
	Query.SetParameter("FormTerritories", ThisForm.Territories.Unload(UsedTerritories));
	
	Result = Query.Execute().Unload();
	
	For Each Row In Result Do
		
		RecordManager = InformationRegisters.ObjectsTerritories.CreateRecordManager();
		FillPropertyValues(RecordManager, Row);
		RecordManager.Write();
		
	EndDo;
	
EndProcedure

#EndRegion

&AtServer
Procedure SetConditionalAppearence()
	
	// Green color for territories with current selected region
	CA = ThisForm.ConditionalAppearance;
	CAItem = CA.Items.Add();
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesRegion");
	Field.Use = True;
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesTerritory");
	Field.Use = True;
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesUse");
	Field.Use = True;
	
	FilterItem = CAItem.Filter.Items.Add(Type("DataCompositionFilterItem"));
	FilterItem.LeftValue = New DataCompositionField("Territories.Region");
	FilterItem.ComparisonType = DataCompositionComparisonType.Equal;
	FilterItem.RightValue = New DataCompositionField("CurrentRegion");
	
	CAItem.Appearance.SetParameterValue("BackColor", WebColors.PaleGreen);
	
	// Block use of territories that are not in current selected region
	CAItem = CA.Items.Add();
	
	Field = CAItem.Fields.Items.Add();
	Field.Field = New DataCompositionField("TerritoriesUse");
	Field.Use = True;
	
	FilterItem = CAItem.Filter.Items.Add(Type("DataCompositionFilterItem"));
	FilterItem.LeftValue = New DataCompositionField("Territories.Region");
	FilterItem.ComparisonType = DataCompositionComparisonType.NotEqual;
	FilterItem.RightValue = New DataCompositionField("CurrentRegion");
	
	CAItem.Appearance.SetParameterValue("ReadOnly", True);
	
EndProcedure

#EndRegion

#Region UserInterface

&AtClient
Procedure BeforeWrite(Cancel, WriteParameters)
	
	If Not Cancel Then
		
		// Выполнить валидацию телефонного номера
		If ValueIsFilled(Object.PhoneNumber) Then 
			
			ParamArray = New Array;
			ParamArray.Add("/^((8|\+7)[\- ]?)?(\(?\d{3,4}\)?[\- ]?)?[\d\- ]{5,10}$/");
			ParamArray.Add(Object.PhoneNumber);
			
			If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArray) Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'Incorrect value in the ""Phone number""'; ru = 'Неверное значение в поле ""Телефонный номер""'");
				
				UserMessage.Message();
				
			EndIf;
			
		EndIf;
		
		// Выполнить валидацию почты
		If ValueIsFilled(Object.Email) Then
			
			ParamArray = New Array;
			ParamArray.Add("/^([A-za-z0-9_-]+\.)*[A-za-z0-9_-]+@[A-za-z0-9_-]+(\.[A-za-z0-9_-]+)*\.[A-za-z]{2,6}$/");
			ParamArray.Add(Object.Email);
			
			If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArray) Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'Incorrect value in the field ""E-mail""'; ru = 'Неверное значение в поле ""Электронная почта""'");
				
				UserMessage.Message();
				
			EndIf;
			
		EndIf;
		
		// Выполнить валидацию ИНН
		If ValueIsFilled(Object.INN) Then 
			
			INN			= TrimAll(Object.INN);
			INN_Lenght	= StrLen(INN);
			
			If Not INN_Lenght = 10 And Not INN_Lenght = 12 Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'INN  shall consist of 10 or 12 digits'; ru = 'ИНН должен состоять из 10 или 12 цифр'");
				
				UserMessage.Message();
				
			EndIf;
			
			If Not СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(INN) And Not Cancel Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'INN shall consist only of digits'; ru = 'ИНН должен состоять только из цифр'");
				
				UserMessage.Message();
				
			КонецЕсли;
			
			If Not Cancel Then
				
				If INN_Lenght = 10 Then
					
					ControlSum = 0;
					
					For N = 1 To 9 Do 
						
						If N = 1 Then
							Multiplier = 2;
						ElsIf N = 2 Then
							Multiplier = 4;
						ElsIf N = 3 Then
							Multiplier = 10;
						ElsIf N = 4 Then
							Multiplier = 3;
						ElsIf N = 5 Then
							Multiplier = 5;
						ElsIf N = 6 Then
							Multiplier = 9;
						ElsIf N = 7 Then
							Multiplier = 4;
						ElsIf N = 8 Then
							Multiplier = 6;
						ElsIf N = 9 Then
							Multiplier = 8;
						EndIf;
						
						Digit = Number(Mid(INN, N, 1));
						
						ControlSum = ControlSum + Digit * Multiplier;
						
					EndDo;
					
					CheckDigit = (ControlSum %11) %10;
					
					If Not CheckDigit = Number(Mid(INN, 10, 1)) Тогда
						
						Cancel = True;
						
						UserMessage			= New UserMessage;
						UserMessage.Text	= NStr("en = 'The control number for the INN does not coincide with the calculated'; ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
						
						UserMessage.Message();
						
					EndIf;
					
				Else 
					
					ControlSum11 = 0;
					ControlSum12 = 0;
					
					For N = 1 To 11 Do 
					
						// Расчет множителя для 11-го и 12-го разрядов
						If N = 1 Then
							Multiplier11 = 7;
							Multiplier12 = 3;
						ElsIf N = 2 Then
							Multiplier11 = 2;
							Multiplier12 = 7;
						ElsIf N = 3 Then
							Multiplier11 = 4;
							Multiplier12 = 2;
						ElsIf N = 4 Then
							Multiplier11 = 10;
							Multiplier12 = 4;
						ElsIf N = 5 Then
							Multiplier11 = 3;
							Multiplier12 = 10;
						ElsIf N = 6 Then
							Multiplier11 = 5;
							Multiplier12 = 3;
						ElsIf N = 7 Then
							Multiplier11 = 9;
							Multiplier12 = 5;
						ElsIf N = 8 Then
							Multiplier11 = 4;
							Multiplier12 = 9;
						ElsIf N = 9 Then
							Multiplier11 = 6;
							Multiplier12 = 4;
						ElsIf N = 10 Then
							Multiplier11 = 8;
							Multiplier12 = 6;
						ElsIf N = 11 Then
							Multiplier11 = 0;
							Multiplier12 = 8;
						EndIf;
						
						Digit = Number(Mid(INN, N, 1));
						
						ControlSum11 = ControlSum11 + Digit * Multiplier11;
						ControlSum12 = ControlSum12 + Digit * Multiplier12;
						
					EndDo;
					
					CheckDigit11 = (ControlSum11 %11) %10;
					CheckDigit12 = (ControlSum12 %11) %10;
					
					If Not CheckDigit11 = Number(Mid(INN,11,1)) Or Not CheckDigit12 = Number(Mid(INN,12,1)) Then 
						
						Cancel = True;
						
						UserMessage			= New UserMessage;
						UserMessage.Text	= NStr("en = 'The control number for the INN does not coincide with the calculated'; ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
						
						UserMessage.Message();
						
					EndIf;
					
				EndIf;
				
			EndIf;
			
		EndIf;
		
		// Выполнить валидацию КПП
		If ValueIsFilled(Object.KPP) Then 
			
			KPP			= TrimAll(Object.KPP);
			KPP_Lenght	= StrLen(KPP);
			
			If Not KPP_Lenght = 9 Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'KPP shall consist of 9 digits'; ru = 'КПП должен состоять из 9 цифр'");
				
				UserMessage.Message();
				
			EndIf;
			
			If Not СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(KPP) And Not Cancel Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'KPP shall consist only of digits'; ru = 'КПП должен состоять только из цифр'");
				
				UserMessage.Message();
				
			КонецЕсли;
			
		EndIf;
		
	EndIf;
	
EndProcedure

#Region Regions

&AtClient
Procedure RegionsBeforeCollapse(Item, Row, Cancel)
	
	Cancel = True;
	
EndProcedure

&AtClient
Procedure RegionsOnActivateRow(Item)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	CurrentRegion = ?(CurrentData = Undefined, Undefined, CurrentData.Region);
	
	Filter = New FixedStructure("Region", CurrentRegion);
	ThisForm.Items.Territories.RowFilter = ?(ThisForm.Items.ShowAllTerritories.Check, Undefined, Filter);
	
	ThisForm.CurrentRegion = CurrentRegion;
	
	ThisForm.Items.Territories.Refresh();
	
EndProcedure

&AtClient
Procedure RegionsUseOnChange(Item)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		If Not CurrentData.Use Then
		
			Filter = New Structure;
			Filter.Insert("Region", CurrentData.Region);
			
			TerritoriesRows = ThisForm.Territories.FindRows(Filter);
			
			For Each Row In TerritoriesRows Do
				
				Row.Use = False;
				
			EndDo;
			
		EndIf;
		
	EndIf;
	
	ThisForm.Items.Territories.Refresh();
	
EndProcedure

#EndRegion

#Region Territories

&AtClient
Procedure CheckTerritories(Value)
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		If CurrentData.Use Then
		
			Filter = New Structure;
			Filter.Insert("Region", CurrentData.Region);
			
			Rows = ThisForm.Territories.FindRows(Filter);
			
			For Each Row In Rows Do
				
				Row.Use = Value;
				Modified = True;
				
			EndDo;
			
		EndIf;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Commands

&AtClient
Procedure CheckAllTerritories(Command)
	
	CheckTerritories(True);
	
EndProcedure

&AtClient
Procedure UncheckAllTerritories(Command)
	
	CheckTerritories(False);
	
EndProcedure

&AtClient
Procedure ShowAllTerritories(Command)
	
	ThisForm.Items.ShowAllTerritories.Check = Not ThisForm.Items.ShowAllTerritories.Check;
	ShowAll = ThisForm.Items.ShowAllTerritories.Check;
	CurrentData = ThisForm.Items.Regions.CurrentData;
	RegionSelected = Not CurrentData = Undefined;
	ThisForm.Items.Territories.RowFilter = ?(ShowAll AND RegionSelected, Undefined, New FixedStructure("Region", ThisForm.Items.Regions.CurrentData.Region));
	
	CurrentData = ThisForm.Items.Regions.CurrentData;
	
	If Not CurrentData = Undefined Then
		
		CurrentRegion = CurrentData.Region;
		
	EndIf;
	
EndProcedure

#EndRegion

#EndRegion