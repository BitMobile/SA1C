
#Region CommonProcedureAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	PredefinedItems = New Map;
	PredefinedItems.Insert("Catalog.User", "SRs");
	PredefinedItems.Insert("Catalog.Region", "Owner");
	
	ItemsCollection = CommonProcessors.GetPredefinedItems(PredefinedItems);
	
	For Each Item In ItemsCollection Do
		
		If TypeOf(Object[Item.Key]) = Type("FormDataCollection") Then
			
			If Object[Item.Key].Count() = 0 Then
			
				NewRow = Object[Item.Key].Add();
				
				For Each Attribute In Metadata.Catalogs.Territory.TabularSections[Item.Key].Attributes Do
					
					If TypeOf(NewRow[Attribute.Name]) = TypeOf(Item.Value) Then
						
						NewRow[Attribute.Name] = Item.Value;
						
					EndIf;
					
				EndDo;
				
			EndIf;
			
		Else
			
			Object[Item.Key] = Item.Value;
				
		EndIf;
		
	EndDo;
	
	FillSKUGroups();
	
EndProcedure

&AtServer
Procedure OnWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	// Записать территорию в группы номенклатуры
	Query = New Query;
	Query.Text = 
		"SELECT ALLOWED
		|	SKUGroupTerritories.Ref AS SKUGroup
		|FROM
		|	Catalog.SKUGroup.Territories AS SKUGroupTerritories
		|WHERE
		|	SKUGroupTerritories.Territory = &Ref
		|	AND NOT SKUGroupTerritories.Ref IN (&SGArray)";
	
	Query.SetParameter("Ref", Object.Ref);
	Query.SetParameter("SGArray", SKUGroups.Unload().UnloadColumn("SKUGroup"));
	
	QueryResult = Query.Execute();
	
	Selection = QueryResult.Select();
	
	While Selection.Next() Do
		
		GroupObject = Selection.SKUGroup.GetObject();
		
		FoundString = GroupObject.Territories.Find(Object.Ref);
		
		If Not FoundString = Undefined Then 
			
			GroupObject.Territories.Delete(FoundString);			
			
		EndIf;
		
		GroupObject.Write();
		
	EndDo;
		
	For Each Row In SKUGroups Do 
		
		GroupObject = Row.SKUGroup.GetObject();
		
		FoundString = GroupObject.Territories.Find(Object.Ref);
		
		If FoundString = Undefined Then 
			
			NewRow							= GroupObject.Territories.Add();
			NewRow.Territory				= Object.Ref;
			NewRow.LineNumberInTerritory	= Row.LineNumber;
			
		Else 
			
			FoundString = Row.LineNumber;
			
		EndIf;
		
		GroupObject.Write();
			
	EndDo;
	
EndProcedure

&AtServer
Procedure FillSKUGroups()
	
	// Заполнить группы SKU
	SKUGroups.Clear();
	
	If ValueIsFilled(Object.Ref) Then 
	
		Query = New Query;
		Query.Text = 
			"SELECT ALLOWED DISTINCT
			|	SKUGroupTerritories.Ref AS SKUGroup,
			|	SKUGroupTerritories.LineNumberInTerritory
			|FROM
			|	Catalog.SKUGroup.Territories AS SKUGroupTerritories
			|WHERE
			|	SKUGroupTerritories.Territory = &Ref
			|
			|ORDER BY
			|	SKUGroupTerritories.LineNumberInTerritory";
		
		Query.SetParameter("Ref", Object.Ref);
		
		QueryResult = Query.Execute();
		
		Selection = QueryResult.Select();
		
		While Selection.Next() Do
			
			NewRow = SKUGroups.Add();
			NewRow.SKUGroup = Selection.SKUGroup;
			
		EndDo;
		
	EndIf;
	
EndProcedure

&AtServer
Function ItsFolder(Value)
	
	If Value.IsFolder Then 
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
		
EndFunction

#EndRegion

#Region UserInterface

&AtClient
Procedure OnOpen(Cancel)
	
	SKUGroupsOnChange(Items.SKUGroups);
	
EndProcedure

&AtClient
Procedure AfterWrite(WriteParameters)
	
	SKUGroupsOnChange(Items.SKUGroups);
	
EndProcedure

&AtClient
Procedure OutletsOutletOnChange(Item)
    
    RequestMap = New Map;
    RequestMap.Insert("pName", "Outlet");
    RequestMap.Insert("checkingItem", Items.Outlets.CurrentData);
    RequestMap.Insert("tabularSection", Object.Outlets);
    
    ClientProcessors.UniqueRows(RequestMap);

EndProcedure

&AtClient
Procedure StocksStockOnChange(Item)
	
	RequestMap = New Map;
    RequestMap.Insert("pName", "Stock");
    RequestMap.Insert("checkingItem", Items.Stocks.CurrentData);
    RequestMap.Insert("tabularSection", Object.Stocks);
    
    ClientProcessors.UniqueRows(RequestMap);
	
EndProcedure

&AtClient
Procedure SKUGroupsSKUGroupChoiceProcessing(Item, SelectedValue, StandardProcessing)
	
	If ValueIsFilled(SelectedValue) Then 
		
		If ItsFolder(SelectedValue) Then 
			
			StandardProcessing = False;
			
		EndIf;	
		
	EndIf;	
	
EndProcedure

&AtClient
Procedure SKUGroupsBeforeEditEnd(Item, NewRow, CancelEdit, Cancel)
	
	If Not CancelEdit Then 
		
		If Not ValueIsFilled(Items.SKUGroups.CurrentData.SKUGroup) Then 
			
			Message(NStr("en = 'Value is not selected'; ru = 'Значение не выбрано'"));
			
			Cancel = True;
			
		EndIf;
				
	EndIf;
	
EndProcedure

&AtClient
Procedure SKUGroupsOnChange(Item)
	
	Ind = 0;
	
	For Each ItemElement In SKUGroups Do 
		
		Ind = Ind + 1;
		
		ItemElement.LineNumber = Ind;
		
	EndDo;
	
EndProcedure

&AtServer
Procedure BeforeWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	If ValueIsFilled(CurrentObject.Ref) Then
	
		If Not CurrentObject.Owner =ThisForm.Object.Ref.Owner Then
		
			Query = New Query(
			"SELECT
			|	DistributorTerritories.Ref
			|FROM
			|	Catalog.Distributor.Territories AS DistributorTerritories
			|WHERE
			|	DistributorTerritories.Territory = &Territory
			|
			|UNION ALL
			|
			|SELECT
			|	ContractorsTerritories.Ref
			|FROM
			|	Catalog.Contractors.Territories AS ContractorsTerritories
			|WHERE
			|	ContractorsTerritories.Territory = &Territory");
			
			Query.SetParameter("Territory", CurrentObject.Ref);
			Result = Query.Execute().Unload();
			Cancel = Result.Count();
			
			If Cancel Then
				
				Message(NStr("en = 'You cannot change region of territory that has link with partner or contractor'; ru = 'Нельзя изменять регион территории к которой привязаны партнеры или контрагенты.'"));
				
			EndIf;
			
		EndIf;
		
	EndIf;
	
EndProcedure

#EndRegion


