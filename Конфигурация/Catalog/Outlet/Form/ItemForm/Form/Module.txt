
#Region CommonProceduresAndFunctions

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	#Region Commented
	
	//PredefinedItems = New Map;
	//PredefinedItems.Insert("Catalog.OutletType", "Type");
	//PredefinedItems.Insert("Catalog.OutletClass", "Class");
	//PredefinedItems.Insert("Catalog.Distributor", "Distributor");
	//PredefinedItems.Insert("Document.PriceList", "Prices");
	//
	//ItemsCollection = CommonProcessors.GetPredefinedItems(PredefinedItems);
	//
	//For Each Item In ItemsCollection Do
	//	
	//	If TypeOf(Object[Item.Key]) = Type("FormDataCollection") Then
	//		
	//		If Object[Item.Key].Count() = 0 Then
	//			
	//			NewRow = Object[Item.Key].Add();
	//			
	//			For Each Attribute In Metadata.Catalogs.Outlet.TabularSections[Item.Key].Attributes Do
	//				
	//				If TypeOf(NewRow[Attribute.Name]) = TypeOf(Item.Value) Then
	//					
	//					NewRow[Attribute.Name] = Item.Value;
	//					
	//				EndIf;
	//				
	//			EndDo;
	//			
	//		EndIf;
	//		
	//	Else 
	//		
	//		Object[Item.Key] = Item.Value;
	//		
	//	EndIf;
	//	
	//EndDo;
	
	#EndRegion
	
	// Проверить возможность редактирования параметров торговой точки
	If Not Users.HaveAdditionalRight(GetParametersRight()) Then 
		
		HaveEditParametersRight = False;
		
		Items.Snapshots.ReadOnly = True;
		Items.ClearValue.Enabled = False;
		
	Else 
		
		HaveEditParametersRight = True;
		
	EndIf;
	
	If Not ValueIsFilled(Object.Ref) Then
		
		Object.OutletStatus = Enums.OutletStatus.Potential;
		
	EndIf;
	
	// Запомнить ранее введенные проверяемые данные
	TempEmail		= Object.Email;
	TempPhoneNumber	= Object.PhoneNumber;
	
EndProcedure

&AtServer
Procedure OnReadAtServer(CurrentObject)
	
	FillTerritories();
	
	FillSnapshots();
	
	FillParameters();
	
EndProcedure

&AtServer
Procedure OnWriteAtServer(Cancel, CurrentObject, WriteParameters)
	
	If Not Cancel Then
		
		For Each Row In Object.Parameters Do
			
			If IsPicture(Row.Parameter) Then
				
				If Row.Type = "New" Then
					
					TempFile = GetTempFileName(Row.Extension);
					BinaryData = GetFromTempStorage(Row.StorageAddress);
					BinaryData.Write(TempFile);
					
					CheckFileSize = New File(TempFile);
					
					RecordManager = InformationRegisters.StorageAdditionalInformation.CreateRecordManager();
					RecordManager.Object = CurrentObject.Ref;
					RecordManager.SyncDirection = Enums.SyncDirections.Shared;
					RecordManager.Action = Enums.SyncAction.AddFile;
					RecordManager.FileName = New UUID(Row.Value);
					RecordManager.Extension = Row.Extension;
					RecordManager.Storage = New ValueStorage(BinaryData);
					RecordManager.Size = CheckFileSize.Size();
					RecordManager.FullFileName = "/shared/Catalog.Outlet/" + 
						CurrentObject.Ref.UUID() + 
						"/" + 
						Row.Value + 
						Lower(Row.Extension);
						
					RecordManager.Write();
					
				ElsIf Row.Type = "Private" Then
					
					SelectionStructure = New Structure("FileName");
					SelectionStructure.FileName = New UUID(Row.Value);
					
					Selection = InformationRegisters.StorageAdditionalInformation.Select(SelectionStructure);
					
					If Selection.Next() Then
						
						RecordManagerPrivate = InformationRegisters.StorageAdditionalInformation.CreateRecordManager();
						
						FillPropertyValues(RecordManagerPrivate, Selection);
						
						RecordManagerPrivate.Read();
						
						TempFile = GetTempFileName(Row.Extension);
						BinaryData = GetFromTempStorage(Row.StorageAddress);
						BinaryData.Write(TempFile);
						
						CheckFileSize = New File(TempFile);
						
						RecordManagerPrivate.SyncDirection = Enums.SyncDirections.Shared;
						RecordManagerPrivate.Action = Enums.SyncAction.AddFile;
						RecordManagerPrivate.User = Catalogs.User.EmptyRef();
						RecordManagerPrivate.Storage = New ValueStorage(BinaryData);
						RecordManagerPrivate.Size = CheckFileSize.Size();
						RecordManagerPrivate.FullFileName = "/shared/Catalog.Outlet/" + 
							CurrentObject.Ref.UUID() + 
							"/" + 
							Row.Value + 
							Lower(Row.Extension);
						
						RecordManagerPrivate.Write();
						
					EndIf;
					
				EndIf;
				
			EndIf;
			
		EndDo;
		
		For Each Row In Object.Snapshots Do
			
			If Row.Type = "New" Then
				
				TempFile = GetTempFileName(Row.Extension);
				BinaryData = GetFromTempStorage(Row.StorageAddress);
				BinaryData.Write(TempFile);
				
				CheckFileSize = New File(TempFile);
				
				RecordManager = InformationRegisters.StorageAdditionalInformation.CreateRecordManager();
				RecordManager.Object = CurrentObject.Ref;
				RecordManager.SyncDirection = Enums.SyncDirections.Shared;
				RecordManager.Action = Enums.SyncAction.AddFile;
				RecordManager.FileName = New UUID(Row.FileName);
				RecordManager.Extension = Row.Extension;
				RecordManager.Storage = New ValueStorage(BinaryData);
				RecordManager.Size = CheckFileSize.Size();
				RecordManager.FullFileName = "/shared/Catalog.Outlet/" + 
					CurrentObject.Ref.UUID() + 
					"/" + 
					String(Row.FileName) + 
					Lower(Row.Extension);
					
				RecordManager.Write();
				
			ElsIf Row.Type = "Private" Then
				
				SelectionStructure = New Structure("FileName");
				SelectionStructure.FileName = New UUID(Row.FileName);
				
				Selection = InformationRegisters.StorageAdditionalInformation.Select(SelectionStructure);
				
				If Selection.Next() Then
					
					RecordManagerPrivate = InformationRegisters.StorageAdditionalInformation.CreateRecordManager();
					
					FillPropertyValues(RecordManagerPrivate, Selection);
					
					RecordManagerPrivate.Read();
					
					TempFile = GetTempFileName(Row.Extension);
					BinaryData = GetFromTempStorage(Row.StorageAddress);
					BinaryData.Write(TempFile);
					
					CheckFileSize = New File(TempFile);
					
					RecordManagerPrivate.SyncDirection = Enums.SyncDirections.Shared;
					RecordManagerPrivate.Action = Enums.SyncAction.AddFile;
					RecordManagerPrivate.User = Catalogs.User.EmptyRef();
					RecordManagerPrivate.Storage = New ValueStorage(BinaryData);
					RecordManagerPrivate.Size = CheckFileSize.Size();
					RecordManagerPrivate.FullFileName = "/shared/Catalog.Outlet/" + 
						CurrentObject.Ref.UUID() + 
						"/" + 
						Row.FileName + 
						Lower(Row.Extension);
					
					RecordManagerPrivate.Write();
				
				EndIf;
				
			EndIf;
		
		EndDo;
		
		SetPrivilegedMode(True);
		
		WriteTerritory(CurrentObject);
		
		SetPrivilegedMode(False);
		
	EndIf;
	
EndProcedure

&AtServer
Procedure AfterWriteAtServer(CurrentObject, WriteParameters)
	
	FillParametersAdditionalInformation();
	
	FillSnapshots();
	
EndProcedure

#Region Status

&AtServerNoContext
Function IsClosed(Status)
	
	If Status = Enums.OutletStatus.Closed Then
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
	
EndFunction

&AtServer
Function CheckStatus()
	
	If Object.OutletStatus=Enums.OutletStatus.Closed And Object.ClosingCause=Enums.ClosingCause.EmptyRef() Then
		
		Message(NStr("en = '""Closing cause"" field couldn''t be empty'; ru = 'Поле ""Причина закрытия"" не может быть пустым'"));
		
		Return True;
		
	Else
		
		Return False;
		
	EndIf;
	
EndFunction

#EndRegion

#Region Parameters

&AtServer
Procedure FillParameters()
	
	NewParametersArray = GetNewParameters();
	
	AddNewParameters(NewParametersArray);
	
	FillParametersAdditionalInformation();
	
EndProcedure

&AtServer
Procedure AddNewParameters(ParametersArray)
	
	// Строка добавленных параметров. Нужна для вывода сообщения.
	AddedParameters = New Array;
	
	// Новые параметры добавляются в конец таблицы параметров.
	For Each Parameter In ParametersArray Do
		
		NewRow = Object.Parameters.Add();
		NewRow.Parameter = Parameter;
		
	EndDo;
	
EndProcedure

&AtServerNoContext
Function GetParametersRight()
	
	Return Catalogs.AdditionalAccessRights.EditParametersInOutlet;	
	
EndFunction

&AtServer
Function GetNewParameters()
	
	// Первый запрос пакета выбирает те параметры которые уже добавлены в текущую
	// торговую точку.
	//
	// Второй запрос пакета выбирает все существующие параметры в справочнике.
	//
	// Третий запрос пакета выбирает те параметры в справочнике которые не 
	// добавлены в торговую точку.
	//
	// Четвертый запрос пакета выбирает результирующую выборку параметров к 
	// добавлению в данную торговую точку.
	Query = New Query(
	"SELECT
	|	FormParameters.Parameter AS Parameter
	|INTO FormParameters
	|FROM
	|	&FormParameters AS FormParameters
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	OutletParameter.Ref AS CatalogParameter
	|INTO CatalogParameters
	|FROM
	|	Catalog.OutletParameter AS OutletParameter
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	CatalogParameters.CatalogParameter
	|INTO Difference
	|FROM
	|	CatalogParameters AS CatalogParameters
	|		LEFT JOIN FormParameters AS FormParameters
	|		ON CatalogParameters.CatalogParameter = FormParameters.Parameter
	|WHERE
	|	FormParameters.Parameter IS NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	Difference.CatalogParameter AS Parameter
	|FROM
	|	Difference AS Difference");
	
	Query.SetParameter("FormParameters", Object.Parameters.Unload());
	
	QueryResult = Query.Execute().Unload();
	
	Return QueryResult.UnloadColumn("Parameter");
	
EndFunction

&AtServer
Procedure FillSnapshots()
	
	FileTable = GetFileTable();
	
	For Each Row In Object.Snapshots Do
		
		FillPictureInformation(FileTable, Row, "FileName");
		
	EndDo;
	
EndProcedure 

#EndRegion

#Region ParametersPictures

&AtServer
Procedure FillParametersAdditionalInformation()
	
	FileTable = GetFileTable();
	
	// Для каждой строки из параметров данной торговой точки
	For Each Row In Object.Parameters Do
		
		// Если тип данных параметра текущей строки - фотоснимок
		If IsPicture(Row.Parameter) Then
			
			If Not ValueIsFilled(Row.StorageAddress) And Not Row.IsPicture Then 
			
				FillPictureInformation(FileTable, Row, "Value");
				Row.IsPicture = True;
				
			EndIf;
			
		// Если тип данных параметра данной строки - не фотоснимок
		Else
			
			Row.Presentation = Row.Value;
			Row.IsPicture = False;
			
		EndIf;
		
	EndDo;
	
EndProcedure

&AtServer
Function GetFileTable()
	
	// Выбираем все записи относящиеся к данной торговой точке из регистра 
	// сведений с файлами.
	Query = New Query(
	"SELECT
	|	StorageAdditionalInformation.Object,
	|	StorageAdditionalInformation.SyncDirection,
	|	StorageAdditionalInformation.Action,
	|	StorageAdditionalInformation.User,
	|	StorageAdditionalInformation.FileName,
	|	StorageAdditionalInformation.FullFileName,
	|	StorageAdditionalInformation.Extension,
	|	StorageAdditionalInformation.Storage,
	|	StorageAdditionalInformation.Size
	|FROM
	|	InformationRegister.StorageAdditionalInformation AS StorageAdditionalInformation
	|WHERE
	|	StorageAdditionalInformation.Object = &Outlet");
	
	Query.SetParameter("Outlet", Object.Ref);
	
	// Ложим результат запроса в таблицу файлов
	FileTable = Query.Execute().Unload();
	
	Return FileTable;
	
EndFunction

&AtServer
Procedure FillPictureInformation(FileTable, Row, FileNameColumnName)
	
	// Если значение параметра заполнено
	If ValueIsFilled(Row[FileNameColumnName]) Then
		
		// Проверяем что значение текущего параметра - УИД
		Try
			
			ShapshotUUID = New UUID(Row[FileNameColumnName]);
			
			// Ищем в таблице файлов уид из текущей строки
			FileTableRow = FileTable.Find(ShapshotUUID, "FileName");
			
			// Если найден уид в таблице файлов
			If Not FileTableRow = Undefined Then
				
				Row.Type = "Snapshot";
				
				// Инициализация подключения
				Password = Constants.bitmobile_Пароль.Get();
				Server = StrReplace(Constants.bitmobile_Сервер.Get(), "localhost", "127.0.0.1");
				Path = Constants.bitmobile_ПутьНаСервере.Get();
				Path = StrReplace(Path, "admin", "webdav");
				Port = Constants.bitmobile_Порт.Get();
				
				Try
					
					Connection = New HTTPConnection(Server, ?(Port = 0, 80, Port), "admin", Password);
					
				Except
					
					Connection = Undefined;
					
				EndTry;
				
				// Забираем бинарные данные из таблицы файлов
				BinaryDataOfFile = FileTableRow.Storage.Get();
				
				// Если бинарные данные есть
				If ValueIsFilled(BinaryDataOfFile) Then
					
					Row.StorageAddress = PutToTempStorage(FileTableRow.Storage.Get(), ThisForm.UUID);
					Row.Extension = FileTableRow.Extension;
					
				// Если нет бинарных данных
				Else
					
					// Если соединение было создано успешно
					If Not Connection = Undefined Then
						
						// Пробуем забрать файл
						Try
							
							WebDAVFile = GetTempFileName(FileTableRow.Extension);
							
							Connection.Get(Path + FileTableRow.FullFileName, WebDAVFile);
							
							Row.StorageAddress 	= PutToTempStorage(BinaryDataOfFile, ThisForm.UUID);
							Row.Extension 		= FileTableRow.Extension;
							
						// Не получилось забрать файл
						Except
							
							Row.Type = "WebDAVFailed";
							
						EndTry;
						
					EndIf;
					
				EndIf;
				
			// Если уид не найден
			Else
				
				Row.Type = "NotFound";
				
			EndIf;
			
		// Если значение - не УИД, тогда мы не можем получить фотоснимок
		Except
			
			Row.Type = "NotUID";
			
		EndTry;
		
		
	// Если значение параметра не заполнено
	Else
		
		Row.Type = "NoSnapshot";
		
	EndIf;
	
EndProcedure

&AtServerNoContext
Function IsPicture(Parameter)
	
	If Parameter.DataType = Enums.DataType.Snapshot Then 
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
	
EndFunction

#EndRegion

#Region Territories

&AtServer
Procedure FillTerritories()
	
	Territories = GetTerritories();
	
	SelectionDetailRecords = Territories.Choose();
	
	While SelectionDetailRecords.Next() Do
		
		NewRow = TerritoriesList.Add();
		NewRow.Value = SelectionDetailRecords.Ref;
		
	EndDo;
	
EndProcedure

&AtServer
Function GetTerritories()
	
	Query = New Query;
	Query.Text = 
	"SELECT ALLOWED
	|	TerritoryOutlets.Ref.Ref
	|FROM
	|	Catalog.Territory.Outlets AS TerritoryOutlets
	|WHERE
	|	TerritoryOutlets.Outlet.Ref = &Ref";
	
	Query.SetParameter("Ref", Object.Ref);
	
	Result = Query.Execute();
	
	Return Result;
	
EndFunction

&AtServer
Procedure WriteTerritory(CurrObject)
	
	WrittenTerritories = GetTerritories().Unload();
	
	For Each TerritoryRow In TerritoriesList Do
		
		SelectedItem = WrittenTerritories.Find(TerritoryRow.Value.Ref, "Ref");
		
		If SelectedItem = Undefined Then
			
			TerritoryValue = TerritoryRow.Value;
			
			Territory = TerritoryValue.GetObject();
			
			Outlets = Territory.Outlets.Unload();
			
			NewRow 			= Outlets.Add();
			NewRow.Outlet 	= CurrObject.Ref;
			
			Territory.Outlets.Load(Outlets);
			Territory.Write();
			
		EndIf;
		
	EndDo;
	
	DeleteTerritories(CurrObject);
	
EndProcedure

&AtServer
Procedure DeleteTerritories(CurrObject)
	
	Territories 			= GetTerritories();
	RecordedTerritories 	= Territories.Unload();
	TerritoriesValueTable 	= TerritoriesList.Unload();
	
	For Each Territory In RecordedTerritories Do
		
		If TerritoriesValueTable.Find(Territory.Ref, "Value") = Undefined Then
			
			TerritoryObject = Territory.Ref.GetObject();
			
			Outlets = TerritoryObject.Outlets.Unload();
			Outlets.Delete(Outlets.Find(CurrObject.Ref, "Outlet").LineNumber - 1);
			
			TerritoryObject.Outlets.Load(Outlets);
			TerritoryObject.Write();
			
		EndIf;
		
	EndDo;
	
EndProcedure

#EndRegion

#EndRegion

#Region UserInterface

&AtClient
Procedure OnOpen(Cancel)
	
	OutletStatusOnChange(Undefined);
	
EndProcedure

&AtClient
Procedure BeforeWrite(Cancel, WriteParameters)
	
	Cancel = CheckStatus();
	
	// Выполнить валидацию телефонного номера
	If ValueIsFilled(Object.PhoneNumber) Then 
		
		ParamArray = New Array;
		ParamArray.Add("/^((8|\+7)[\- ]?)?(\(?\d{3,4}\)?[\- ]?)?[\d\- ]{5,10}$/");
		ParamArray.Add(Object.PhoneNumber);
		
		If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArray) Then 
			
			Cancel = True;
			
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("en = 'Incorrect value in the ""Phone number""'; ru = 'Неверное значение в поле ""Телефонный номер""'");
			
			UserMessage.Message();
			
		EndIf;
		
	EndIf;
	
	// Выполнить валидацию почты
	If ValueIsFilled(Object.Email) Then
		
		ParamArray = New Array;
		ParamArray.Add("/^([A-za-z0-9_-]+\.)*[A-za-z0-9_-]+@[A-za-z0-9_-]+(\.[A-za-z0-9_-]+)*\.[A-za-z]{2,6}$/");
		ParamArray.Add(Object.Email);
		
		If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArray) Then 
			
			Cancel = True;
			
			UserMessage			= New UserMessage;
			UserMessage.Text	= NStr("en = 'Incorrect value in the field ""E-mail""'; ru = 'Неверное значение в поле ""Электронная почта""'");
			
			UserMessage.Message();
			
		EndIf;
		
	EndIf;
	
	// Выполнить валидацию контактов
	For Each ContactItem In Object.Contacts Do 
		
		If ValueIsFilled(ContactItem.PhoneNumber) Then
		
			ParamArrayPhone = New Array;
			ParamArrayPhone.Add("/^((8|\+7)[\- ]?)?(\(?\d{3,4}\)?[\- ]?)?[\d\- ]{5,10}$/");
			ParamArrayPhone.Add(ContactItem.PhoneNumber);
			
			If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArrayPhone) Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'Incorrect value in the ""Phone number"". Line number " + ContactItem.LineNumber + " in the table ""Contacts"".'; ru = 'Неверное значение в поле ""Телефон"". Строка №" + ContactItem.LineNumber + " табличной части ""Контакты"".'");
				
				UserMessage.Message();
				
			EndIf;
			
		EndIf;
		
		If ValueIsFilled(ContactItem.Email) Then
		
			ParamArrayEmail = New Array;
			ParamArrayEmail.Add("/^([A-za-z0-9_-]+\.)*[A-za-z0-9_-]+@[A-za-z0-9_-]+(\.[A-za-z0-9_-]+)*\.[A-za-z]{2,6}$/");
			ParamArrayEmail.Add(ContactItem.Email);
			
			If Not CommonProcessorsClient.ExecuteJSFunction("checkRegExp", ParamArrayEmail) Then 
				
				Cancel = True;
				
				UserMessage			= New UserMessage;
				UserMessage.Text	= NStr("en = 'Incorrect value in the ""E-mail"". Line number " + ContactItem.LineNumber + " in the table ""Contacts"".'; ru = 'Неверное значение в поле ""Электронная почта"". Строка №" + ContactItem.LineNumber + " табличной части ""Контакты"".'");
				
				UserMessage.Message();
				
			EndIf;
			
		EndIf;
		
	EndDo;
	
EndProcedure

&AtClient
Procedure AfterWrite(WriteParameters)
	
	FillParameters();
	
EndProcedure

&AtClient
Procedure NotificationProcessing(EventName, Parameter, Source)
	
	If EventName = "OutletParameterCreated" Then
		
		FillParameters();
		
	EndIf;
	
EndProcedure

#Region Status

&AtClient
Procedure OutletStatusOnChange(Item)
	
	If IsClosed(Object.OutletStatus) Then
		
		ThisForm.Items.ClosingCause.Visible = True;
		
	Else 
		
		ThisForm.Items.ClosingCause.Visible = False;
		
	EndIf;
	
EndProcedure

#EndRegion

#Region LattitudeLongtitude

&AtClient
Procedure LattitudeOnChange(Item)
	
	Object.Lattitude = GetRealLatLng(Object.Lattitude, 90);
	
EndProcedure

&AtClient
Procedure LongitudeOnChange(Item)
	
	Object.Longitude = GetRealLatLng(Object.Longitude, 180);
	
EndProcedure

&AtClientAtServerNoContext
Function GetRealLatLng(LatLng, Limit)
	
	Return ?(LatLng > Limit, Limit, ?(LatLng < -Limit, -Limit, LatLng));
	
EndFunction

#EndRegion

#Region Parameters

&AtClient
Procedure UpdateParameters(Command)
	
	FillParameters();
	
EndProcedure

&AtClient
Procedure ParametersOnActivateRow(Item)
	
	IsPicture = Not Item.CurrentData = Undefined And Item.CurrentData.IsPicture;
	
	PictureAddress = ?(IsPicture, Item.CurrentData.StorageAddress, Undefined);
	PictureExtension = ?(IsPicture, Item.CurrentData.Extension, Undefined);
	
	Items.PictureAddress.Hyperlink = IsPicture;
	Items.PictureAddress.NonselectedPictureText = ?(IsPicture, 
		NStr("en = 'Add picture'; ru = 'Добавить изображение'"),
		NStr("en = 'No picture'; ru = 'Нет изображения'"));
	
EndProcedure

&AtClient
Procedure ParametersSelection(Item, SelectedRow, Field, StandardProcessing)
	
	If Item.CurrentItem = Items.ParametersPresentation Then
		
		StandardProcessing = False;
		
		If HaveEditParametersRight Then 
		
			OpenEditParameterValueForm();
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure ParametersOnStartEdit(Item, NewRow, Clone)
	
	If Item.CurrentItem = Items.ParametersPresentation Then
	
		StandardProcessing = False;
		
		OpenEditParameterValueForm();
		
	EndIf;
	
EndProcedure

&AtClient
Procedure OpenEditParameterValueForm()
	
	If IsPicture(Items.Parameters.CurrentData.Parameter) Then
		
		OpenPickPictureFromForm("Parameters", "PictureAddress", "PictureExtension", GetParametersAliases());
		
	Else
		
		OpenOutletParameterValueInputForm();
		
	EndIf;
	
EndProcedure

&AtClient
Procedure OpenOutletParameterValueInputForm()
	
	CurrentRowId = Items.Parameters.CurrentData.GetID();
	CurrentRowData = Object.Parameters.FindByID(CurrentRowId);
	
	InputFormParameters = GetInputFormParameters(CurrentRowData);
	
	OpenForm("CommonForm.OutletParameterValueInputForm", 
		InputFormParameters,
		ThisForm, 
		, 
		, 
		, 
		New NotifyDescription("OutletParameterValueInputProcessing", ThisForm));

EndProcedure

&AtClient
Procedure OutletParameterValueInputProcessing(Result, AdditionalParameter) Export
	
	If Result = Undefined Then
		
		Items.Parameters.EndEditRow(True);
		
	Else
		
		ObjectRow = Object.Parameters.FindByID(Result.StringNumber);
		
		ObjectRow.Value = Result.Str;
		ObjectRow.Presentation = ObjectRow.Value;
		
		Items.Parameters.EndEditRow(False);
		
		Modified = True;
		
	EndIf;
	
EndProcedure 

&AtClient
Function GetInputFormParameters(CurrentData)
	
	InputFormParameters = New Structure;
	InputFormParameters.Insert("StringNumber", CurrentData.GetID());
	InputFormParameters.Insert("OutletParameter", CurrentData.Parameter);
	InputFormParameters.Insert("PreviousValue", CurrentData.Value);
	
	Return InputFormParameters;
	
EndFunction

#EndRegion

#Region ParametersPictures

&AtClient
Procedure ClearValue(Command)
	
	CurrentData = Items.Parameters.CurrentData;
		
	If Not CurrentData = Undefined Then
			
		CurrentRowId = CurrentData.GetID();
		
		ObjectRow = Object.Parameters.FindByID(CurrentRowId);
		
		If CurrentData.IsPicture Then 
			
			ObjectRow.Value = Undefined;
			ObjectRow.StorageAddress = Undefined;
			ObjectRow.Extension = Undefined;
			ObjectRow.Type = "NoSnapshot";
			
			ThisForm.PictureAddress = "";
			ThisForm.PictureExtension = "";
			
		Else 
			
			ObjectRow.Value = Undefined;
			ObjectRow.Presentation = ObjectRow.Value;
			
		EndIf;
		
		Modified = True;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure PictureAddressClick(Item, StandardProcessing)
	
	StandardProcessing = False;
	
	If Not Items.Parameters.CurrentData = Undefined Then
		
		If HaveEditParametersRight Then
			
			OpenPickPictureFromForm("Parameters", "PictureAddress", "PictureExtension", GetParametersAliases());
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure OpenPickPictureFromForm(FormTableName, PictureAttribute, ExtensionAttribute, Aliases = Undefined)
	
	If Not Items[FormTableName].CurrentData = Undefined Then
		
		AdditionalParameters = New Structure;
		AdditionalParameters.Insert("FormTableName", FormTableName);
		AdditionalParameters.Insert("PictureAttribute", PictureAttribute);
		AdditionalParameters.Insert("ExtensionAttribute", ExtensionAttribute);
		AdditionalParameters.Insert("Aliases", ?(Aliases = Undefined, New Structure, Aliases));
		AdditionalParameters.Insert("RowId", Items[FormTableName].CurrentData.GetID());
		
		OpenForm("CommonForm.PickPictureFromForm", 
			, 
			ThisForm, 
			, 
			, 
			, 
			New NotifyDescription("SelectPictureProcessing", ThisForm, AdditionalParameters));
		
	EndIf;
	
EndProcedure

&AtClient
Procedure SelectPictureProcessing(Result, AdditionalParameter) Export
	
	If Not Result = Undefined Then
		
		ObjectRow = Object[AdditionalParameter.FormTableName].FindByID(AdditionalParameter.RowId);
		FillPropertyValues(ObjectRow, Result);
		Items[AdditionalParameter.FormTableName].EndEditRow(False);
		
		ThisForm[AdditionalParameter.PictureAttribute] = ObjectRow.StorageAddress;
		ThisForm[AdditionalParameter.ExtensionAttribute] = ObjectRow.Extension;
		
		Modified = True;
		
	Else
		
		Items[AdditionalParameter.FormTableName].EndEditRow(True);
		
	EndIf;
	
EndProcedure

&AtClient
Function GetParametersAliases()
	
	Aliases = New Structure;
	Aliases.Insert("FileName", "Value");
	
	Return Aliases;
	
EndFunction

#EndRegion

#Region Territories

&AtClient
Procedure TerritoriesListValueOnChange(Item)
	
	OutletValue 		= Items.TerritoriesList.CurrentData.Value;
	
	ParametersFilter 	= New Structure("Value", OutletValue);
	
	FoundRows 			= TerritoriesList.FindRows(ParametersFilter);
	
	If FoundRows.count() > 1 Then
		
		Message(NStr("en = ""This territory is already listed""; ru = ""Выбранная территория уже есть в списке"""));
		
	EndIf;
	
EndProcedure

#EndRegion

#Region Prices

&AtClient
Procedure PricesPriceListOnChange(Item)
	
	requestMap = New Map;
	requestMap.Insert("pName", "PriceList");
	requestMap.Insert("checkingItem", Items.Prices.CurrentData);
	requestMap.Insert("tabularSection", Object.Prices);
	
	ClientProcessors.UniqueRows(requestMap);
	
EndProcedure

&AtClient
Procedure PricesPriceListStartChoice(Item, ChoiceData, StandardProcessing)
	
	StandardProcessing = False;
	
	OpenForm("Document.PriceList.ChoiceForm", , Item);
	
EndProcedure

#EndRegion

#Region Snapshots

&AtClient
Procedure SnapshotsOnActivateRow(Item)
	
	If Not Item.CurrentData = Undefined Then
	
		ThisForm.OutletSnapshotAddress = Item.CurrentData.StorageAddress;
		ThisForm.OutletSnapshotExtension = Item.CurrentData.Extension;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure SnapshotsAfterDeleteRow(Item)
	
	If Item.CurrentData = Undefined Then
		
		ThisForm.OutletSnapshotAddress = Undefined;
		ThisForm.OutletSnapshotExtension = Undefined;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure SnapshotsOnStartEdit(Item, NewRow, Clone)
	
	If Item.CurrentItem = Items.SnapshotsPresentation Then
		
		OpenPickPictureFromForm("Snapshots","OutletSnapshotAddress", "OutletSnapshotExtension");
		
	EndIf;
	
EndProcedure

&AtClient
Procedure SnapshotsSelection(Item, SelectedRow, Field, StandardProcessing)
	
	If Item.CurrentItem = Items.SnapshotsPresentation Then
		
		StandardProcessing = False;
		
		If HaveEditParametersRight Then
			
			OpenPickPictureFromForm("Snapshots","OutletSnapshotAddress", "OutletSnapshotExtension");
			
		EndIf;
		
	EndIf;
	
EndProcedure

&AtClient
Procedure OutletSnapshotAddressClick(Item, StandardProcessing)
	
	StandardProcessing = False;
	
	If Not Items.Snapshots.CurrentData = Undefined Then 
		
		If HaveEditParametersRight Then
		
			OpenPickPictureFromForm("Snapshots", "OutletSnapshotAddress", "OutletSnapshotExtension", GetParametersAliases());
			
		EndIf;
		
	EndIf;
	
EndProcedure

#EndRegion

#EndRegion

