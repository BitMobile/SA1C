
///////////////////////////////////////////////////////
// Common procedure and functions

&AtServer
Procedure OnOpenServer()
       
    PredefinedItems = New Map;
    PredefinedItems.Insert("Catalog.OutletType", "Type");
    PredefinedItems.Insert("Catalog.OutletClass", "Class");
    PredefinedItems.Insert("Catalog.Distributor", "Distributor");
    PredefinedItems.Insert("Document.PriceList", "Prices");
	
	ItemsCollection = CommonProcessors.GetPredefinedItems(PredefinedItems);
	
	For Each Item In ItemsCollection Do
		
		If TypeOf(Object[Item.Key]) = Type("FormDataCollection") Then
			
			If Object[Item.Key].Count() = 0 Then
				
				NewRow = Object[Item.Key].Add();
				
				For Each Attribute In metadata.Catalogs.Outlet.TabularSections[Item.Key].Attributes Do
					
					If TypeOf(NewRow[Attribute.Name]) = TypeOf(Item.Value) Then
						
						NewRow[Attribute.Name] = Item.Value;
						
					EndIf;
					
				EndDo;
				
			EndIf;
			
		Else 
			
			Object[Item.Key] = Item.Value;
			
		EndIf;
		
	EndDo;
	
	FillFileTable();
	
EndProcedure

&AtServer
Procedure FillFileNameArray(FileNameArray, Table)

	For Each Element In Table Do 
		
		If ItsPicture(Element.Parameter) Then 
			
			Try
				
				SnapShotUUID = New UUID(Element.Value);
				
			Except
				
				SnapShotUUID = Undefined;	
				
			EndTry;
				
			If Not SnapShotUUID = Undefined Then 
		
				FileNameArray.Add(SnapShotUUID);	
				
			EndIf;
			
		EndIf;	
		
	EndDo; 
		
EndProcedure

&AtServer
Procedure FillFileTable()
	
	// Заполнить таблицу файлов
	Password 	= Constants.bitmobile_Пароль.Get();
	Server 		= StrReplace(Constants.bitmobile_Сервер.Get(), "localhost", "127.0.0.1");
	Path 		= Constants.bitmobile_ПутьНаСервере.Get();
	Path 		= StrReplace(Path, "admin", "webdav");
	Port 		= Constants.bitmobile_Порт.Get();
	
	Try
	
		Connection = New HTTPConnection(Server, Port, "admin", Password);
		
	Except
		
		Connection = Undefined;
		
	EndTry;	
	
	FileNameArray = New Array; 
	
	FillFileNameArray(FileNameArray, Object.Parameters);
			
	Query = New Query;
	Query.Text = 
		"SELECT
		|	StorageAdditionalInformation.Object,
		|	StorageAdditionalInformation.SyncDirection,
		|	StorageAdditionalInformation.Action,
		|	StorageAdditionalInformation.User,
		|	StorageAdditionalInformation.FileName,
		|	StorageAdditionalInformation.FullFileName,
		|	StorageAdditionalInformation.Extension,
		|	StorageAdditionalInformation.Storage,
		|	StorageAdditionalInformation.Size
		|FROM
		|	InformationRegister.StorageAdditionalInformation AS StorageAdditionalInformation
		|WHERE
		|	StorageAdditionalInformation.FileName IN(&FileNameArray)";
	
	Query.SetParameter("FileNameArray", FileNameArray);
	
	FileTableRegister = Query.Execute().Unload();
	
	For Each Str In FileTableRegister Do  
	
 		BinaryDataOfFile = Str.Storage.Get();
		
		If ValueIsFilled(BinaryDataOfFile) Then 
		
			Ins 				= FileTable.Add();
			Ins.FileName 		= Str.FileName;
			Ins.StorageAddress 	= PutToTempStorage(BinaryDataOfFile, ThisForm.UUID);
			Ins.Extension 		= Str.Extension;
			
		Else 
			
			If Not Connection = Undefined Then 
			
				Try
					
					WebDAVFile = GetTempFileName(Str.Extension);
					
					Connection.Get(Path + Str.FullFileName, WebDAVFile);
					
					BinaryDataOfFile = New BinaryData(WebDAVFile);
					
					Ins 				= FileTable.Add();
					Ins.FileName 		= Str.FileName;
					Ins.StorageAddress 	= PutToTempStorage(BinaryDataOfFile, ThisForm.UUID);
					Ins.Extension 		= Str.Extension;
										
				Except
				EndTry;
				
			EndIf;	
			
		EndIf;	
				
	EndDo;
				
EndProcedure

&AtServer
Procedure FillTerritories()
    
    Territories = GetTerritories();
    
    SelectionDetailRecords = Territories.Choose();
    
    While SelectionDetailRecords.Next() Do
		
		NewRow = TerritoriesList.Add();
        NewRow.Value = SelectionDetailRecords.Ref;
        
    EndDo;	
    
EndProcedure

&AtServer
Function GetTerritories()
    
    Query = New Query;
    Query.Text = 
    "SELECT
    |   TerritoryOutlets.Ref.Ref
    |FROM
    |   Catalog.Territory.Outlets AS TerritoryOutlets
    |WHERE
    |   TerritoryOutlets.Outlet.Ref = &Ref";
    
    Query.SetParameter("Ref", Object.Ref);
    
    Result = Query.Execute();
    
    Return Result;
    
EndFunction

&AtServer
Procedure WriteTerritory()
    
    WrittenTerritories = GetTerritories().Unload();
    
    For Each TerritoryRow In TerritoriesList Do
		
		SelectedItem = WrittenTerritories.Find(TerritoryRow.Value.Ref, "Ref");
		
		If SelectedItem = Undefined Then
			
			TerritoryValue = TerritoryRow.Value;
			
			Territory = TerritoryValue.GetObject();
			
			Outlets = Territory.Outlets.Unload();
			
			NewRow 			= Outlets.Add();
            NewRow.Outlet 	= Object.Ref;
			
			Territory.Outlets.Load(Outlets);
            Territory.Write();
			
		EndIf;
		
	EndDo;
    
EndProcedure

&AtServer
Procedure DeleteTerritories()
    
    Territories 			= GetTerritories();
    RecordedTerritories 	= Territories.Unload();
    TerritoriesValueTable 	= TerritoriesList.Unload();
	
	For Each Territory In RecordedTerritories Do
		
		If TerritoriesValueTable.Find(Territory.Ref, "Value") = Undefined Then
			
			TerritoryObject = Territory.Ref.GetObject();
			
			Outlets = TerritoryObject.Outlets.Unload();
            Outlets.Delete(Outlets.Find(Object.Ref, "Outlet").LineNumber - 1);
			
			TerritoryObject.Outlets.Load(Outlets);
            TerritoryObject.Write();    
			
		EndIf;
		
	EndDo;
    
EndProcedure

&AtServer
Function IsClosed(Status)
    
    If Status = Enums.OutletStatus.Closed Then
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
    
EndFunction

&AtServer
Function CheckStatus()
	
	If Object.OutletStatus=Enums.OutletStatus.Closed And Object.ClosingCause=Enums.ClosingCause.EmptyRef() Then
		
		Message(NStr("en = '""Closing cause"" field couldn''t be empty'; ru = 'Поле ""Причина закрытия"" не может быть пустым'"));
		
		Return True;    
		
	Else
		
		Return False;
		
	EndIf;
EndFunction

&AtServer
Procedure SetPicture(SnapShotUUID)
	
	FindStructure = New Structure("FileName");
	FindStructure.FileName = SnapShotUUID;
	
	FoundRows = FileTable.FindRows(FindStructure);
	
	If Not FoundRows.Count() = 0 Then 
		
		PictureAddress 		= FoundRows[0].StorageAddress;
		PictureExtension	= FoundRows[0].Extension;
				
	EndIf;
				
EndProcedure

&AtServer
Function ItsPicture(Parameter)
	
	If Parameter.DataType = Enums.DataType.Snapshot Then 
		
		Return True;
		
	Else 
		
		Return False;
		
	EndIf;
			
EndFunction

&AtServer
Function PictureExists(SnapShotUUID)
	
	FindStructure = New Structure("FileName");
	FindStructure.FileName = SnapShotUUID;
	
	FoundRows = FileTable.FindRows(FindStructure);
	
	If Not FoundRows.Count() = 0 Then 
		
		Return True;
		
	Else
		
		Return False;
				
	EndIf;

EndFunction

&AtServer
Procedure SetClosingCauseVisibility()
	
	ThisForm.Items.ClosingCause.Visible = Object.OutletStatus = Enums.OutletStatus.Closed;
	
	// TODO: Delete commented; Old; SUPA-514
	//If Object.OutletStatus=Enums.OutletStatus.Closed Then
	//    ThisForm.Items.ClosingCause.Visible=True;    	    
	//EndIf;
    
EndProcedure


///////////////////////////////////////////////////////
// User interface

&AtClient
Procedure OnOpen(Cancel)
    
    OnOpenServer();
	
	FillTerritories();
	
	OutletStatusOnChange(Undefined);
    
    For Each Str in Object.Parameters Do
		
		Ins 			= TempParameters.Add();
        Ins.Parameter 	= Str.Parameter;
        
        If ItsPicture(Str.Parameter) Then 
			
			Try
				
				SnapShotUUID = New UUID(Str.Value);
				
				If PictureExists(SnapShotUUID) Then
				
	            	Ins.Value 			= NStr("en = 'Snapshot'; ru = 'Фотоснимок'");
	            	Ins.SnapShotUUID 	= Str.Value;
					
				Else
					
					Ins.Value = NStr("en = ""Snapshot not found on server""; ru = ""Фотоснимок не найден на сервере""");
									
				EndIf;
				
			Except
				
				Ins.Value = NStr("en = ""Error getting snapshot""; ru = ""Ошибка при получении фотоснимка""");	
				
			EndTry;
			            
        Else 
            
            Ins.Value = Str.Value;
            
		EndIf;
			                       
	EndDo;
    
EndProcedure

&AtClient
Procedure TerritoriesListValueOnChange(Item)
    
    OutletValue 		= Items.TerritoriesList.CurrentData.Value;
	
	ParametersFilter 	= New Structure("Value", OutletValue);
	
	FoundRows 			= TerritoriesList.FindRows(ParametersFilter);
	
	If FoundRows.count() > 1 Then
		
		Message(NStr("en = ""This territory is already listed""; ru = ""Выбранная территория уже есть в списке"""));
		
	EndIf;
        
EndProcedure

&AtClient
Procedure AfterWrite(WriteParameters)
    
    WriteTerritory();
    
EndProcedure

&AtClient
Procedure PricesPriceListOnChange(Item)
    
    requestMap = New Map;
    requestMap.Insert("pName", "PriceList");
    requestMap.Insert("checkingItem", Items.Prices.CurrentData);
    requestMap.Insert("tabularSection", Object.Prices);
    
    ClientProcessors.UniqueRows(requestMap);
    
EndProcedure

&AtClient
Procedure PricesPriceListStartChoice(Item, ChoiceData, StandardProcessing)
	
	StandardProcessing = False;
        
    OpenForm("Document.PriceList.ChoiceForm", , Item);
	
EndProcedure

&AtClient
Procedure OutletStatusOnChange(Item)
	
	If IsClosed(Object.OutletStatus) Then
		
		ThisForm.Items.ClosingCause.Visible=True;    	    
		
	EndIf;
	
EndProcedure

&AtClient
Procedure BeforeWrite(Cancel, WriteParameters)
	
	Cancel = CheckStatus();
	
EndProcedure

&AtClient
Procedure OpenPicture(Command)
	
	FileName = Undefined;
	
	If ValueIsFilled(PictureAddress) Then 
		
		FileName = "picture" + PictureExtension;
		
	EndIf;
		
	If ValueIsFilled(FileName) Then 
		
		GetFile(PictureAddress, FileName, True);
		
	EndIf;
	
EndProcedure

&AtClient
Procedure TempParametersOnActivateRow(Item)
	
	If Items.Pages.CurrentPage = Items.ParametersPage Then	
		
		If Not Item.CurrentRow = Undefined Then			
			
			If ItsPicture(Item.CurrentData.Parameter) Then 
				
				Try
					
					SnapShotUUID = New UUID(Item.CurrentData.SnapShotUUID);
					
					SetPicture(SnapShotUUID);
					
				Except
					
					PictureAddress		= Undefined;
					PictureExtension    = Undefined;
					
				EndTry;
												
			Else 
				
				PictureAddress		= Undefined;
				PictureExtension    = Undefined;
			
			EndIf;
			
		Else
			
			PictureAddress		= Undefined;
			PictureExtension    = Undefined;

		EndIf;
		
	EndIf;

EndProcedure

&AtClient
Procedure LattitudeOnChange(Item)
	
	Object.Lattitude = GetRealLatLng(Object.Lattitude, 90);
	
EndProcedure

&AtClient
Procedure LongitudeOnChange(Item)
	
	Object.Longitude = GetRealLatLng(Object.Longitude, 180);
	
EndProcedure

&AtClient
Function GetRealLatLng(LatLng, Limit)
	
	Return ?(LatLng > Limit, Limit, ?(LatLng < -Limit, -Limit, LatLng));	
	
EndFunction



